/* $Id$ */
/* Copyright (C) 2004 Alexander Chernov */

/* This file is derived from `rpc/key_prot.h' of the GNU C Library,
   version 2.3.2. The original copyright follows. */

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef __RCC_RPC_KEY_PROT_H__
#define __RCC_RPC_KEY_PROT_H__

#include <features.h>
#include <rpc/rpc.h>

/*
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user.
 *
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 *
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
 *
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 *
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 *
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
 */
#if 0
#pragma ident   "@(#)key_prot.x 1.7     94/04/29 SMI"
#endif
/* Copyright (c)  1990, 1991 Sun Microsystems, Inc. */

/* 
 * Compiled from key_prot.x using rpcgen.
 * DO NOT EDIT THIS FILE!
 * This is NOT source code!
 */
#define PROOT 3
#define HEXMODULUS "d4a0ba0250b6fd2ec626e7efd637df76c716e22d0944b88b"
#define HEXKEYBYTES 48
#define KEYSIZE 192
#define KEYBYTES 24
#define KEYCHECKSUMSIZE 16

enum keystatus {
        KEY_SUCCESS = 0,
        KEY_NOSECRET = 1,
        KEY_UNKNOWN = 2,
        KEY_SYSTEMERR = 3,
};
typedef enum keystatus keystatus;
extern  bool_t xdr_keystatus(XDR *, keystatus*);

typedef char keybuf[HEXKEYBYTES];
extern  bool_t xdr_keybuf(XDR *, keybuf);


typedef char *netnamestr;
extern  bool_t xdr_netnamestr(XDR *, netnamestr*);


struct cryptkeyarg {
        netnamestr remotename;
        des_block deskey;
};
typedef struct cryptkeyarg cryptkeyarg;
extern  bool_t xdr_cryptkeyarg(XDR *, cryptkeyarg*);


struct cryptkeyarg2 {
        netnamestr remotename;
        netobj remotekey;
        des_block deskey;
};
typedef struct cryptkeyarg2 cryptkeyarg2;
extern  bool_t xdr_cryptkeyarg2(XDR *, cryptkeyarg2*);


struct cryptkeyres {
        keystatus status;
        union {
                des_block deskey;
        } cryptkeyres_u;
};
typedef struct cryptkeyres cryptkeyres;
extern  bool_t xdr_cryptkeyres(XDR *, cryptkeyres*);

#define MAXGIDS 16

struct unixcred {
        u_int uid;
        u_int gid;
        struct {
                u_int gids_len;
                u_int *gids_val;
        } gids;
};
typedef struct unixcred unixcred;
extern  bool_t xdr_unixcred(XDR *, unixcred*);


struct getcredres {
        keystatus status;
        union {
                unixcred cred;
        } getcredres_u;
};
typedef struct getcredres getcredres;
extern  bool_t xdr_getcredres(XDR *, getcredres*);


struct key_netstarg {
        keybuf st_priv_key;
        keybuf st_pub_key;
        netnamestr st_netname;
};
typedef struct key_netstarg key_netstarg;
extern  bool_t xdr_key_netstarg(XDR *, key_netstarg*);


struct key_netstres {
        keystatus status;
        union {
                key_netstarg knet;
        } key_netstres_u;
};
typedef struct key_netstres key_netstres;
extern  bool_t xdr_key_netstres(XDR *, key_netstres*);


#ifndef opaque
#define opaque char
#endif


#define KEY_PROG ((u_long)100029)
#define KEY_VERS ((u_long)1)

#define KEY_SET ((u_long)1)
extern  keystatus * key_set_1(opaque *, CLIENT *);
extern  keystatus * key_set_1_svc(opaque *, struct svc_req *);
#define KEY_ENCRYPT ((u_long)2)
extern  cryptkeyres * key_encrypt_1(cryptkeyarg *, CLIENT *);
extern  cryptkeyres * key_encrypt_1_svc(cryptkeyarg *, struct svc_req *);
#define KEY_DECRYPT ((u_long)3)
extern  cryptkeyres * key_decrypt_1(cryptkeyarg *, CLIENT *);
extern  cryptkeyres * key_decrypt_1_svc(cryptkeyarg *, struct svc_req *);
#define KEY_GEN ((u_long)4)
extern  des_block * key_gen_1(void *, CLIENT *);
extern  des_block * key_gen_1_svc(void *, struct svc_req *);
#define KEY_GETCRED ((u_long)5)
extern  getcredres * key_getcred_1(netnamestr *, CLIENT *);
extern  getcredres * key_getcred_1_svc(netnamestr *, struct svc_req *);

#define KEY_VERS2 ((u_long)2)

extern  keystatus * key_set_2(opaque *, CLIENT *);
extern  keystatus * key_set_2_svc(opaque *, struct svc_req *);
extern  cryptkeyres * key_encrypt_2(cryptkeyarg *, CLIENT *);
extern  cryptkeyres * key_encrypt_2_svc(cryptkeyarg *, struct svc_req *);
extern  cryptkeyres * key_decrypt_2(cryptkeyarg *, CLIENT *);
extern  cryptkeyres * key_decrypt_2_svc(cryptkeyarg *, struct svc_req *);
extern  des_block * key_gen_2(void *, CLIENT *);
extern  des_block * key_gen_2_svc(void *, struct svc_req *);
extern  getcredres * key_getcred_2(netnamestr *, CLIENT *);
extern  getcredres * key_getcred_2_svc(netnamestr *, struct svc_req *);
#define KEY_ENCRYPT_PK ((u_long)6)
extern  cryptkeyres * key_encrypt_pk_2(cryptkeyarg2 *, CLIENT *);
extern  cryptkeyres * key_encrypt_pk_2_svc(cryptkeyarg2 *, struct svc_req *);
#define KEY_DECRYPT_PK ((u_long)7)
extern  cryptkeyres * key_decrypt_pk_2(cryptkeyarg2 *, CLIENT *);
extern  cryptkeyres * key_decrypt_pk_2_svc(cryptkeyarg2 *, struct svc_req *);
#define KEY_NET_PUT ((u_long)8)
extern  keystatus * key_net_put_2(key_netstarg *, CLIENT *);
extern  keystatus * key_net_put_2_svc(key_netstarg *, struct svc_req *);
#define KEY_NET_GET ((u_long)9)
extern  key_netstres * key_net_get_2(void *, CLIENT *);
extern  key_netstres * key_net_get_2_svc(void *, struct svc_req *);
#define KEY_GET_CONV ((u_long)10)
extern  cryptkeyres * key_get_conv_2(opaque *, CLIENT *);
extern  cryptkeyres * key_get_conv_2_svc(opaque *, struct svc_req *);

#endif /* __RCC_RPC_KEY_PROT_H__ */
