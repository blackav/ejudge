<%
/* $Id$ */
%><%@include "priv_includes.csp"
%><%
#define FAIL(c) do { retval = -(c); goto cleanup; } while (0)
%><%@set getter_name = "csp_get_priv_submit_page"
%><%@set ac_prefix = "NEW_SRV_ACTION_"
%><%@page csp_view_priv_submit_page(PageInterface *pg, FILE *log_f, FILE *out_f, struct http_request_info *phr)
%><%@include "priv_stdvars.csp"
%><%
  const struct section_problem_data *prob = 0;
  int prob_id = 0, variant = 0, i;
  unsigned char bb[1024];
  const unsigned char *sel_flag = 0;
  unsigned char optval[128];
  problem_xml_t px = 0;
  struct watched_file *pw = 0;
  const unsigned char *pw_path = 0;
  path_t variant_stmt_file;
  const unsigned char *alternatives = 0;
  const unsigned char *cl = " class=\"b0\"";
  unsigned char title[1024];

  if (ns_cgi_param_int_opt(phr, "problem", &prob_id, 0) < 0) {
    fprintf(log_f, "Invalid problem.\n");
    goto cleanup;
  }
  if (prob_id < 0 || prob_id > cs->max_prob) {
    fprintf(log_f, "Invalid problem.\n");
    goto cleanup;
  }
  if (prob_id > 0 && !(prob = cs->probs[prob_id])) {
    fprintf(log_f, "Invalid problem.\n");
    goto cleanup;
  }
  if (ns_cgi_param_int_opt(phr, "variant", &variant, 0) < 0) {
    fprintf(log_f, "Invalid variant.\n");
    goto cleanup;
  }
  if (!prob) variant = 0;
  if (prob && prob->variant_num <= 0) variant = 0;
  if (variant < 0
      || (prob && prob->variant_num <= 0 && variant > 0)
      || (prob && prob->variant_num > 0 && variant > prob->variant_num)) {
    fprintf(log_f, "Invalid variant.\n");
    goto cleanup;
  }
  if (opcaps_check(phr->caps, OPCAP_SUBMIT_RUN) < 0) {
    fprintf(log_f, "Permission denied.\n");
    goto cleanup;
  }

  l10n_setlocale(phr->locale_id);
  if (prob && variant > 0) {
    snprintf(title, sizeof(title), "%s %s-%d", _("Submit a solution for"), prob->short_name, variant);
  } else if (prob) {
    snprintf(title, sizeof(title), "%s %s", _("Submit a solution for"), prob->short_name);
  } else {
    snprintf(title, sizeof(title), "%s", _("Submit a solution"));
  }
%><%@include "priv_header.csp"
%>
<% if (prob) { %>
<h2><s:tr>Problem</s:tr> <s:v value="prob->short_name" escape="false"/>: <s:v value="prob->long_name" /></h2>
<% } %>

<s:form enctype="multipart/form-data">

<table class="b0"><tr>
<tr><td class="b0"><s:tr>Problem</s:tr>:</td><td class="b0"><s:select name="problem"><%
  for (i = 1; i <= cs->max_prob; i++) {
    if (!(cs->probs[i])) continue;
%><s:option value="i" selectedExpr="prob_id > 0 && i == prob_id"><s:v value="cs->probs[i]->short_name" escape="false" /> - <s:v value="cs->probs[i]->long_name" /></s:option><%
  }
%></s:select></td><td class="b0"><s:submit ac="priv-submit-page" /></td></tr>
<% if (prob && prob->variant_num > 0) { %>
<tr><td class="b0"><s:tr>Variant</s:tr>:</td><td class="b0"><s:select name="variant"><%
    for (i = 0; i <= prob->variant_num; i++) {
%><s:option value="i" selectedExpr="i == variant"><s:v value="i" checkExpr=" > 0" /></s:option><%
    }
%></s:select></td><td class="b0"><s:submit ac="priv-submit-page" label="Select variant" /></td>
</tr>
<% } %>
</table>
<%
  /* output the problem statement */
  px = 0; pw = 0; pw_path = 0;
  if (prob && prob->variant_num > 0 && variant > 0 && prob->xml.a
      && prob->xml.a[variant - 1]) {
    px = prob->xml.a[variant - 1];
  } else if (prob && prob->variant_num <= 0 && prob->xml.p) {
    px = prob->xml.p;
  }
  if (px && px->stmts) {
    unparse_statement(fout, phr, cnts, extra, prob, variant, px, NULL, 1);
  }

  if (!px && prob && prob->statement_file[0]) {
    if (prob->variant_num > 0 && variant > 0) {
      prepare_insert_variant_num(variant_stmt_file,
                                 sizeof(variant_stmt_file),
                                 prob->statement_file, variant);
      pw = &cs->prob_extras[prob_id].v_stmts[variant];
      pw_path = variant_stmt_file;
    } else if (prob->variant_num <= 0) {
      pw = &cs->prob_extras[prob_id].stmt;
      pw_path = prob->statement_file;
    }
    watched_file_update(pw, pw_path, cs->current_time);
    if (!pw->text) {
%><big><font color="red"><p><s:tr>The problem statement is not available</s:tr></p></font></big><%
     } else {
      fprintf(fout, "%s", pw->text);
    }
  }

  /* update the alternatives */
  alternatives = 0;
  if (prob && (prob->type == PROB_TYPE_SELECT_ONE
               || prob->type == PROB_TYPE_SELECT_MANY)
      && prob->alternatives_file[0]) {
    if (prob->variant_num > 0 && variant > 0) {
      prepare_insert_variant_num(variant_stmt_file,
                                 sizeof(variant_stmt_file),
                                 prob->alternatives_file, variant);
      pw = &cs->prob_extras[prob->id].v_alts[variant];
      pw_path = variant_stmt_file;
    } else if (prob->variant_num <= 0) {
      pw = &cs->prob_extras[prob->id].alt;
      pw_path = prob->alternatives_file;
    }
    watched_file_update(pw, pw_path, cs->current_time);
    alternatives = pw->text;
  }
%>

<table class="b0">

<%  if (!prob || !prob->type) { %>
<tr>
<td class="b0"><s:tr>Language</s:tr>:</td><td class="b0"><s:select name="lang_id"><option value=""></option><%
    for (i = 1; i <= cs->max_lang; i++) {
      if (cs->langs[i]) {
%><s:option value="i"><s:v value="cs->langs[i]->short_name" escape="false" /> - <s:v value="cs->langs[i]->long_name" /></s:option><%
      }
    }
%></s:select></td></tr>

<% if (cs->global->enable_eoln_select > 0) { %>
<tr><td class="b0"><s:tr>EOLN Type</s:tr>:</td><td class="b0"><s:select name="eoln_type">
<option value="0"></option>
<option value="1">LF (Unix/MacOS)</option>
<option value="2">CRLF (Windows/DOS)</option>
</s:select></td></tr>
<% } %>
<% } %>

  /* solution/answer form */
  if (!prob /*|| !prob->type*/) {
    fprintf(fout, "<tr><td%s>%s</td><td%s><input type=\"file\" name=\"file\"/></td></tr>\n", cl, _("File"), cl);
   } else {
    switch (prob->type) {
    case PROB_TYPE_STANDARD:
    case PROB_TYPE_OUTPUT_ONLY:
    case PROB_TYPE_TESTS:
      if (prob->enable_text_form > 0) {
        fprintf(fout, "<tr><td colspan=\"2\"%s><textarea name=\"text_form\" rows=\"20\" cols=\"60\"></textarea></td></tr>\n", cl);
      }
      fprintf(fout, "<tr><td%s>%s</td><td%s><input type=\"file\" name=\"file\"/></td></tr>\n", cl, _("File"), cl);
      break;
    case PROB_TYPE_SHORT_ANSWER:
      fprintf(fout, "<tr><td%s>%s</td><td%s><input type=\"text\" name=\"file\"/></td></tr>\n", cl, _("Answer"), cl);
      break;
    case PROB_TYPE_TEXT_ANSWER:
      fprintf(fout, "<tr><td colspan=\"2\"%s><textarea name=\"file\" rows=\"20\" cols=\"60\"></textarea></td></tr>\n", cl);
      break;
    case PROB_TYPE_SELECT_ONE:
      if (px) {
        unparse_answers(fout, phr, cnts, extra, prob, variant,
                        px, 0 /* lang */, 1 /* is_radio */,
                        -1, prob_id, 0 /* js_flag */, "b0");
      } else if (alternatives) {
        write_alternatives_file(fout, 1, alternatives, -1, 0, 0, 0, "b0");
      } else if (prob->alternative) {
        for (i = 0; prob->alternative[i]; i++) {
          fprintf(fout, "<tr><td%s>%d</td><td%s><input type=\"radio\" name=\"file\" value=\"%d\"/></td><td%s>%s</td></tr>\n", cl, i + 1, cl, i + 1, cl, prob->alternative[i]);
        }
      }
      break;
    case PROB_TYPE_SELECT_MANY:
      if (alternatives) {
        write_alternatives_file(fout, 0, alternatives, -1, 0, 0, 0, "b0");
      } else if (prob->alternative) {
        for (i = 0; prob->alternative[i]; i++) {
          fprintf(fout, "<tr><td%s>%d</td><td%s><input type=\"checkbox\" name=\"ans_%d\"/></td><td%s>%s</td></tr>\n", cl, i + 1, cl, i + 1,
                  cl, prob->alternative[i]);
        }
      }
      break;
    case PROB_TYPE_CUSTOM:
      break;

    default:
      abort();
    }
  }

  fprintf(fout, "<tr><td%s>&nbsp;</td><td%s>%s</td></tr>\n",
          cl, cl, BUTTON(NEW_SRV_ACTION_SUBMIT_RUN));
  fprintf(fout, "<tr><td%s>&nbsp;</td><td%s>%s%s</a></td></tr>",
          cl, cl, ns_aref(bb, sizeof(bb), phr, NEW_SRV_ACTION_MAIN_PAGE, 0),
          _("Main page"));
  fprintf(fout, "</table>\n");

  fprintf(fout, "</form>\n");




<%@include "priv_footer.csp"
%><%
  l10n_setlocale(0);
cleanup:
  html_armor_free(&ab);
%>
