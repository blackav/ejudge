<%
/* $Id$ */
#include "new-server.h"
#include "contests.h"
#include "prepare.h"
#include "mischtml.h"
#include "misctext.h"
#include "l10n.h"
#include "xml_utils.h"

#include "reuse/xalloc.h"

#include <stdio.h>

#include <libintl.h>
#define _(x) gettext(x)
#define ARMOR(s)  html_armor_buf(&ab, (s))
#define BUTTON(a) ns_submit_button(bb, sizeof(bb), 0, a, 0)

void
write_alternatives_file(FILE *fout, int is_radio, const unsigned char *txt,
                        int last_answer, int prob_id, int next_prob_id,
                        int enable_js, const unsigned char *class_name);
static struct server_framework_job *job_first, *job_last;

%><%@set ac_prefix = "NEW_SRV_ACTION_"
%><%@page priv_main_page(FILE *out_f, struct http_request_info *phr, const struct contest_desc *cnts, struct contest_extra *extra)
%><%
  int need_examiners = 0;
  time_t start_time = 0;
  time_t stop_time = 0;
  time_t fog_start_time = 0;
  time_t finish_time = 0;
  serve_state_t cs = extra->serve_state;
  struct section_global_data *global = cs->global;
  time_t duration = 0;
  const unsigned char *s;
  int online_users = 0;
  int i;
  struct last_access_info *pa;
  int job_count = 0;
  unsigned char duration_buf[64];
  time_t tmpt = 0;
  int action = 0;
  int filter_first_run = 0, filter_last_run = 0, filter_mode_clar = 0;
  int filter_first_run_set = 0, filter_last_run_set = 0;
  const unsigned char *filter_expr = 0;
  const struct section_problem_data *prob = 0;
  int x;
  struct html_armor_buffer ab = HTML_ARMOR_INITIALIZER;
  unsigned char bb[1024];
  int variant;
  path_t variant_stmt_file;
  struct watched_file *pw = 0;
  const unsigned char *pw_path = 0;
  int skip_start_form = 0;
  const unsigned char *alternatives = 0;
  int y;
  const unsigned char *filter_first_clar_str = 0;
  const unsigned char *filter_last_clar_str = 0;
  long long tdiff = 0;
  unsigned char hbuf[1024];
%>
<%
  ns_header(out_f, extra->header_txt, 0, 0, 0, 0, phr->locale_id, cnts,
            phr->client_key,
            "%s [%s, %d, %s]: %s", ns_unparse_role(phr->role),
            phr->name_arm, phr->contest_id, extra->contest_arm, _("Main page"));
%>
<script language="javascript">
    var self_url='<s:v escape="false" value="phr->self_url" />';
    var SID='<s:v value="phr->session_id" />';
</script>
<ul>
    <li><s:a ac="view-users"><s:tr>View regular users</s:tr></s:a></li>
    <li><s:a ac="priv-users-view"><s:tr>View privileged users</s:tr></s:a></li>
    <li><s:a ac="view-online-users"><s:tr>View who is currently online</s:tr></s:a></li>
    <li><s:a ac="view-exam-info"><s:tr>View examination information</s:tr></s:a></li>
    <s:if vt="need_examiners">
        <li><s:a ac="examiners-page"><s:tr>Examiners assignments</s:tr></s:a></li>
    </s:if>
    <li><s:a ac="standings"><s:tr>View standings</s:tr></s:a></li>
    <% if (phr->role >= USER_ROLE_JUDGE && opcaps_check(phr->caps, OPCAP_EDIT_PASSWD) >= 0) { %>
        <li><s:a ac="view-reg-pwds"><s:tr>View registration passwords</s:tr></s:a></li>
        <% if (!cnts->disable_team_password) { %>
            <li><s:a ac="view-cnts-pwds"><s:tr>View contest passwords</s:tr></s:a></li>
        <% } %>
    <% } %>
    <% if (phr->role >= USER_ROLE_JUDGE && opcaps_check(phr->caps, OPCAP_DUMP_USERS) >= 0) { %>
        <li><s:a ac="view-user-dump"><s:tr>Dump users in CSV format</s:tr></s:a></li>
    <% } %>
    <% if (phr->role >= USER_ROLE_JUDGE && opcaps_check(phr->caps, OPCAP_DUMP_RUNS) >= 0) { %>
        <li><s:a ac="view-runs-dump"><s:tr>Dump runs in CSV format</s:tr></s:a></li>
        <li><s:a ac="export-xml-runs"><s:tr>Export runs in XML external format</s:tr></s:a></li>
        <li><s:a ac="write-xml-runs"><s:tr>Write runs in XML internal format</s:tr></s:a></li>
        <li><s:a ac="write-xml-runs-with-src"><s:tr>Write runs in XML internal format with source</s:tr></s:a></li>
    <% } %>
    <li><s:a ac="assign-cyphers-1"><s:tr>Assign random cyphers</s:tr></s:a></li>
    <li><s:a ac="view-ip-users"><s:tr>View users for IP addresses</s:tr></s:a></li>
    <li><s:a ac="view-user-ips"><s:tr>View IP addresses for users</s:tr></s:a></li>
    <li><s:a ac="view-testing-queue"><s:tr>View testing queue</s:tr></s:a></li>
    <% if (phr->role >= USER_ROLE_ADMIN) { %>
        <li><s:a ac="admin-contest-settings"><s:tr>Contest settings</s:tr></s:a></li>
    <% } %>
    <% if (cnts->problems_url) { %>
        <li><a href='<s:v escape="false" value="cnts->problems_url" />' target="_blank"><s:tr>Problems</s:tr></a>
    <% } %>
    <li><s:a ac="priv-submit-page"><s:tr>Submit a solution</s:tr></s:a></li>
    <li><s:a ac="logout"><s:tr>Logout</s:tr></s:a></li>
</ul>

<hr /><a name="status" /><h2><s:tr>Server status</s:tr></h2>

<%  if (stop_time > 0 && !global->is_virtual) {
    if (duration > 0 && global->board_fog_time > 0
        && global->board_unfog_time > 0
        && cs->current_time < stop_time + global->board_unfog_time
        && !cs->standings_updated) {
      s = _("The contest is over (standings are frozen)");
    } else {
      s = _("The contest is over");
    }
  } else if (start_time > 0) {
    if (fog_start_time > 0 && cs->current_time >= fog_start_time)
      s = _("The contest is in progress (standings are frozen)");
    else
      s = _("The contest is in progress");
  } else {
    s = _("The contest is not started");
  }
%>

<p><big><b><s:v escape="false" value="s" /></b></big></p>

<%  if (global->score_system == SCORE_OLYMPIAD && !global->is_virtual) {
    if (cs->accepting_mode)
      s = _("Participants' solutions are being accepted");
    else if (!cs->testing_finished)
      s = _("Participants' solutions are being judged");
    else
      s = _("Participants' solutions are judged");
%>
<p><big><b><s:v escape="false" value="s" /></b></big></p>
<%  } %>

<%  if (cs->upsolving_mode) { %>
<p><big><b><s:tr>Upsolving mode</s:tr></b></big></p>
<%  } %>

<%  if (cs->clients_suspended) { %>
<p><big><b><s:tr>Participants' requests are suspended</s:tr></b></big></p>
<%  } %>

<%  if (cs->testing_suspended) { %>
<p><big><b><s:tr>Testing of participants' submits is suspended</s:tr></b></big></p>
<%  } %>
<%  if (cs->printing_suspended) { %>
<p><big><b><s:tr>Print requests are suspended</s:tr></b></big></p>
<%  } %>
<%  if (cs->online_view_source < 0) { %>
<p><big><b><s:tr>Source code is closed</s:tr></b></big></p>
<%  } else if (cs->online_view_source > 0) { %>
<p><big><b><s:tr>Source code is open</s:tr></b></big></p>
<%  } %>
<%  if (cs->online_view_report < 0) { %>
<p><big><b><s:tr>Testing reports are closed</s:tr></b></big></p>
<%  } else if (cs->online_view_report > 0) { %>
<p><big><b><s:tr>Testing reports are open</s:tr></b></big></p>
<%  } %>
<%  if (cs->online_view_judge_score > 0) { %>
<p><big><b><s:tr>Judge scores are opened</s:tr></b></big></p>
<%  } %>
<%  if (cs->online_final_visibility > 0) { %>
<p><big><b><s:tr>Final visibility rules are active</s:tr></b></big></p>
<%  } %>

<%
  // count online users
  online_users = 0;
  for (i = 0; i < extra->user_access[USER_ROLE_CONTESTANT].u; i++) {
    pa = &extra->user_access[USER_ROLE_CONTESTANT].v[i];
    if (pa->time + 65 >= cs->current_time) online_users++;
  }
%>
<p><big><b><s:tr>On-line users in this contest</s:tr>: <s:v value="online_users" /></b></big></p>
<%  if (cs->max_online_count > 0) { %>
<p><big><b><s:tr>Max number of users was</s:tr>: <s:v value="cs->max_online_count"/>, <s:v value="cs->max_online_time" /></b></big></p>
<%  } %>

<%  if (job_count > 0) { %>
<p><b><s:tr>Background jobs</s:tr>: <s:v value="job_count"/></b></p>
<table class="b1">
<%    for (struct server_framework_job *job = job_first; job; job = job->next) { %>
<tr><td class="b1"><%= job->id %></td><td class="b1"><%= xml_unparse_date(job->start_time) %></td><td  class="b1"><%= job->title %></td><td class="b1">
<%      if (job->vt->get_status) {
        unsigned char *str = job->vt->get_status(job);
        if (str && *str) { %>
<%= str %>
<%        } else { %>
&nbsp;
<%        }
        xfree(str);
      } else { %>
&nbsp;
<%      } %>
</td></tr>
<%    } %>
</table>
<%  } %>

<%  if (phr->role == USER_ROLE_ADMIN && opcaps_check(phr->caps, OPCAP_CONTROL_CONTEST) >= 0) { %>
<%    html_start_form(out_f, 1, phr->self_url, phr->hidden_vars); %>
<table border="0">
<tr><td><s:tr>Server time</s:tr>:</td><td><%= ctime(&cs->current_time) %></td><td>&nbsp;</td><td>&nbsp;</td></tr>
<%    if (start_time <= 0) { %>
<tr><td colspan="2"><b><s:tr>Contest is not started</s:tr></b></td><td>&nbsp;</td><td><s:submit ac="start-contest" /></td></tr>
<%    } else { %>
<tr><td><s:tr>Contest start time</s:tr>:</td><td><%= ctime(&start_time) %></td><td>&nbsp;</td>
<%      if (stop_time <= 0) { %>
<td><s:submit ac="stop-contest" /></td></tr>
<%      } else if (global->enable_continue
                 && (!duration || stop_time < start_time + duration)) { %>
<td><s:submit ac="continue-contest" /></td></tr>
<%      } %>
<%    } %>

<%    if (!global->is_virtual && start_time <= 0) { %>
<tr><td><s:tr>Planned start time</s:tr>:</td><td><%= sched_time <= 0?_("Not set"):ctime(&sched_time) %></td><td><input type="text" name="sched_time" size="16"/></td><td><s:submit ac="schedule" /></td></tr>
<%    } %>

<%
    if (finish_time <= 0) {
      if (duration > 0) {
        duration_str(0, duration, 0, duration_buf, 0);
      } else {
        snprintf(duration_buf, sizeof(duration_buf), "%s", _("Unlimited"));
      }
%>
<tr><td><s:tr>Duration</s:tr>:</td><td><s:v escape="false" value="duration_buf" /></td>
<%      if ((stop_time <= 0 || global->enable_continue) && !global->is_virtual) { %>
<td><input type="text" name="dur" size="16"/></td><td><s:submit ac="change-duration" /></td></tr>
<%      } else { %>
<td>&nbsp;</td><td>&nbsp;</td></tr>
<%      } %>

<%      if (duration <= 0 && (stop_time <= 0 || global->enable_continue)
          && !global->is_virtual) { %>
<tr><td><s:tr>Finish time</s:tr>:</td><td>&nbsp;</td><td><input type="text" name="finish_time" size="16" /></td><td><s:submit ac="change-finish-time" /></td></tr>
<%      }
    }
%>

<%    if (!global->is_virtual) {
      if (start_time > 0 && stop_time <= 0 && duration > 0) {
        tmpt = start_time + duration; %>
<tr><td><s:tr>Scheduled end time</s:tr>:</td><td><%= ctime(&tmpt) %></td></tr>
<%      } else if (start_time > 0 && stop_time <= 0 && duration <= 0
                 && finish_time > 0) { %>
<tr><td><s:tr>Scheduled end time</s:tr>:</td><td><%= ctime(&finish_time) %></td><td><input type="text" name="finish_time" size="16" /></td><td><s:submit ac="change-finish-time" /></td></tr>
<%      } else if (stop_time) { %>
<tr><td><s:tr>End time</s:tr>:</td><td><%= ctime(&stop_time) %></td></tr>
<% } %>
<%      if (start_time > 0 && stop_time <= 0 && fog_start_time > 0) { %>
<tr><td><s:tr>Standings freeze time</s:tr>:</td><td><%= ctime(&fog_start_time) %></td></tr>
<%      } else if (stop_time > 0 && duration > 0 && global->board_fog_time > 0
                 && global->board_unfog_time > 0 && !cs->standings_updated
                 && cs->current_time < stop_time + global->board_unfog_time) {
        tmpt = stop_time + global->board_unfog_time; %>
<tr><td><s:tr>Standings unfreeze time</s:tr>:</td><td><%= ctime(&tmpt) %></td></tr>
<%    } %>

<%      if (start_time > 0 && stop_time <= 0 && duration > 0) {
        duration_str(0, cs->current_time, start_time, duration_buf, 0); %>
<tr><td><s:tr>Elapsed time</s:tr>:</td><td><%= duration_buf %></td></tr>
<%        duration_str(0, start_time + duration - cs->current_time, 0,
                     duration_buf, 0); %>
<tr><td><s:tr>Remaining time</s:tr>:</td><td><%= duration_buf %></td></tr>
<%
      }
    } %>
<tr><td><s:tr>Contest load time</s:tr></td><td><%= ctime(&cs->load_time) %></td></tr>
<tr><td><s:tr>Server start time</s:tr></td><td><%= ctime(&server_start_time) %></td></tr>
</table></form>

<hr />

<%    html_start_form(out_f, 1, phr->self_url, phr->hidden_vars); %>
<s:submit ac="update-standings-1" />
<s:submit ac="reset-1" />
<%    action = NEW_SRV_ACTION_SUSPEND;
    if (cs->clients_suspended) action = NEW_SRV_ACTION_RESUME; %>
<%= BUTTON(action) %>
<%    action = NEW_SRV_ACTION_TEST_SUSPEND;
    if (cs->testing_suspended) action = NEW_SRV_ACTION_TEST_RESUME; %>
<%= BUTTON(action) %>
<%
    if (global->enable_printing) {
      action = NEW_SRV_ACTION_PRINT_SUSPEND;
      if (cs->printing_suspended) action = NEW_SRV_ACTION_PRINT_RESUME; %>
<%= BUTTON(action) %>
<%    } %>
<%    if (global->score_system == SCORE_OLYMPIAD && !global->is_virtual) {
      action = NEW_SRV_ACTION_SET_JUDGING_MODE;
      if (!cs->accepting_mode) action = NEW_SRV_ACTION_SET_ACCEPTING_MODE; %>
<%= BUTTON(action) %>
<%    } %>
<%    if (global->score_system == SCORE_OLYMPIAD
        && ((!global->is_virtual && !cs->accepting_mode)
            || (global->is_virtual && global->disable_virtual_auto_judge >0))) {
      action = NEW_SRV_ACTION_SET_TESTING_FINISHED_FLAG;
      if (cs->testing_finished)
        action = NEW_SRV_ACTION_CLEAR_TESTING_FINISHED_FLAG; %>
<%= BUTTON(action) %>
<%    } %>
<%    if (!cnts->disable_team_password) { %>
<s:submit ac="generate-passwords-1" />
<s:submit ac="clear-passwords-1" />
<%    } %>
<s:submit ac="generate-reg-passwords-1" />
<s:submit ac="upsolving-config-1" />
<s:submit ac="reload-server" />
</form>
<%  } else { %>
<table border="0">
<tr><td><s:tr>Server time</s:tr>:</td><td><%= ctime(&cs->current_time) %></td><td>&nbsp;</td><td>&nbsp;</td></tr>
<%    if (start_time <= 0) { %>
<tr><td colspan="2"><b><s:tr>Contest is not started</s:tr></b></td></tr>
<%    } else { %>
<tr><td><s:tr>Contest start time</s:tr>:</td><td><%= ctime(&start_time) %></td></tr>
<%    } %>

<%    if (!global->is_virtual && start_time <= 0) { %>
<tr><td><s:tr>Planned start time</s:tr>:</td><td><%= sched_time <= 0?_("Not set"):ctime(&sched_time) %></td></tr>
<%    } %>
<%
    if (finish_time <= 0) {
      if (duration > 0) {
        duration_str(0, duration, 0, duration_buf, 0);
      } else {
        snprintf(duration_buf, sizeof(duration_buf), "%s", _("Unlimited"));
      }
%>
<tr><td><s:tr>Duration</s:tr>:</td><td><%= duration_buf %></td></tr>
<%    } %>

<%    if (!global->is_virtual) {
      if (start_time > 0 && stop_time <= 0 && duration > 0) {
        tmpt = start_time + duration; %>
<tr><td><s:tr>Scheduled end time</s:tr>:</td><td><%= ctime(&tmpt) %></td></tr>
<%      } else if (start_time > 0 && stop_time <= 0 && duration <= 0
                 && finish_time > 0) { %>
<tr><td><s:tr>Scheduled end time</s:tr>:</td><td><%= ctime(&finish_time) %></td></tr>
<%      } else if (stop_time) { %>
<tr><td><s:tr>End time</s:tr>:</td><td><%= ctime(&stop_time) %></td></tr>
<%      } %>

<%      if (start_time > 0 && stop_time <= 0 && fog_start_time > 0) { %>
<tr><td><s:tr>Standings freeze time</s:tr>:</td><td><%= ctime(&fog_start_time) %></td></tr>
<%      } else if (stop_time > 0 && duration > 0 && global->board_fog_time > 0
                 && global->board_unfog_time > 0 && !cs->standings_updated
                 && cs->current_time < stop_time + global->board_unfog_time) {
        tmpt = stop_time + global->board_unfog_time; %>
<tr><td><s:tr>Standings unfreeze time</s:tr>:</td><td><%= ctime(&tmpt) %></td></tr>
<%      } %>

<%      if (start_time > 0 && stop_time <= 0 && duration > 0) {
        duration_str(0, cs->current_time, start_time, duration_buf, 0); %>
<tr><td><s:tr>Elapsed time</s:tr>:</td><td><%= duration_buf %></td></tr>
<%        duration_str(0, start_time + duration - cs->current_time, 0,
                     duration_buf, 0); %>
<tr><td><s:tr>Remaining time</s:tr></td><td><%= duration_buf %></td></tr>
<%      }
    } %>
</table>
<%  } %>

<%  ns_write_priv_all_runs(out_f, phr, cnts, extra,
                         filter_first_run_set, filter_first_run,
                         filter_last_run_set, filter_last_run,
                         filter_expr); %>

<%
  if (opcaps_check(phr->caps, OPCAP_SUBMIT_RUN) >= 0) {
    if (!prob) {
      // no problem is selected yet
      fprintf(out_f, "<hr><a name=\"submit\"></a><h2>%s</h2>\n",
              _("View the problem statement and send a submission"));
      html_start_form(out_f, 0, phr->self_url, phr->hidden_vars);
      fprintf(out_f, "<table>\n");
      fprintf(out_f, "<tr><td>%s:</td><td><select name=\"problem\">",
              _("Problem"));
      for (x = 1; x <= cs->max_prob; x++) {
        if (!(prob = cs->probs[x])) continue;
        fprintf(out_f, "<option value=\"%d\">%s - %s</option>",
                x, prob->short_name, ARMOR(prob->long_name));
        /*
        if (prob->variant_num <= 0) {
        } else {
          for (y = 1; y <= prob->variant_num; y++) {
            fprintf(out_f, "<option value=\"%d_%d\">%s - %s, %s %d</option>",
                    x, y, prob->short_name,  ARMOR(prob->long_name),
                    _("Variant"), y);
          }
        }
        */
      }
      fprintf(out_f, "</select></td><td>%s</td></tr></table></form>\n",
              ns_submit_button(bb, sizeof(bb), 0,
                               NEW_SRV_ACTION_PRIV_SUBMIT_PAGE,
                               _("Select problem")));
      prob = 0;
    } else {
      // a problem is already selected
      // prob and variant have correct values
      if (variant > 0) {
        fprintf(out_f, "<hr><a name=\"submit\"></a><h2>%s %s-%s (%s %d)</h2>\n",
                _("Submit a solution for"),
                prob->short_name, ARMOR(prob->long_name), _("Variant"), variant);
      } else {
        fprintf(out_f, "<hr><a name=\"submit\"></a><h2>%s %s-%s</h2>\n",
                _("Submit a solution for"),
                prob->short_name,  ARMOR(prob->long_name));
      }

      /* FIXME: handle problem XML */

      /* put problem statement */
      if (prob->statement_file[0]) {
        if (variant > 0) {
          prepare_insert_variant_num(variant_stmt_file,
                                     sizeof(variant_stmt_file),
                                     prob->statement_file, variant);
          pw = &cs->prob_extras[prob->id].v_stmts[variant];
          pw_path = variant_stmt_file;
        } else {
          pw = &cs->prob_extras[prob->id].stmt;
          pw_path = prob->statement_file;
        }
        watched_file_update(pw, pw_path, cs->current_time);
        if (!pw->text) {
          fprintf(out_f, "<big><font color=\"red\"><p>%s</p></font></big>\n",
                  _("The problem statement is not available"));
        } else {
          if (prob->type == PROB_TYPE_CUSTOM) {
            html_start_form(out_f, 2, phr->self_url, phr->hidden_vars);
            skip_start_form = 1;
          }
          fprintf(out_f, "%s", pw->text);
        }
      }
      alternatives = 0;
      if ((prob->type == PROB_TYPE_SELECT_ONE
           || prob->type == PROB_TYPE_SELECT_MANY)
          && prob->alternatives_file[0]) {
        if (variant > 0) {
          prepare_insert_variant_num(variant_stmt_file,
                                     sizeof(variant_stmt_file),
                                     prob->alternatives_file, variant);
          pw = &cs->prob_extras[prob->id].v_alts[variant];
          pw_path = variant_stmt_file;
        } else {
          pw = &cs->prob_extras[prob->id].alt;
          pw_path = prob->alternatives_file;
        }
        watched_file_update(pw, pw_path, cs->current_time);
        alternatives = pw->text;
      }

      if (!skip_start_form) {
        html_start_form(out_f, 2, phr->self_url, phr->hidden_vars);
      }
      if (variant <= 0) {
        html_hidden(out_f, "problem", "%d", prob->id);
      } else {
        html_hidden(out_f, "problem", "%d_%d", prob->id, variant);
      }
      fprintf(out_f, "<table>\n");
      if (!prob->type) {
        fprintf(out_f, "<tr><td>%s:</td><td>", _("Language"));
        fprintf(out_f, "<select name=\"lang_id\"><option value=\"\">\n");
        for (i = 1; i <= cs->max_lang; i++) {
          if (!cs->langs[i]) continue;
          fprintf(out_f, "<option value=\"%d\">%s - %s</option>\n",
                  i, cs->langs[i]->short_name, ARMOR(cs->langs[i]->long_name));
        }
        fprintf(out_f, "</select></td></tr>\n");

        if (global->enable_eoln_select > 0) {
          fprintf(out_f, "<tr><td%s>%s:</td><td%s><select name=\"eoln_type\"%s>",
                  "", "EOLN Type", "", "");
          fprintf(out_f, "<option value=\"0\"></option>");
          fprintf(out_f, "<option value=\"1\"%s>LF (Unix/MacOS)</option>", "");
          fprintf(out_f, "<option value=\"2\"%s>CRLF (Windows/DOS)</option>", "");
          fprintf(out_f, "</select></td></tr>\n");
        }
      }

      switch (prob->type) {
      case PROB_TYPE_STANDARD:
      case PROB_TYPE_OUTPUT_ONLY:
      case PROB_TYPE_TESTS:
        fprintf(out_f, "<tr><td>%s</td><td><input type=\"file\" name=\"file\"/></td></tr>\n", _("File"));
        break;
      case PROB_TYPE_SHORT_ANSWER:
        fprintf(out_f, "<tr><td>%s</td><td><input type=\"text\" name=\"file\"/></td></tr>\n", _("Answer"));
        break;
      case PROB_TYPE_TEXT_ANSWER:
        fprintf(out_f, "<tr><td colspan=\"2\"><textarea name=\"file\" rows=\"20\" cols=\"60\"></textarea></td></tr>\n");
        break;
      case PROB_TYPE_SELECT_ONE:
        /* FIXME: handle problem XML */
        if (alternatives) {
          write_alternatives_file(out_f, 1, alternatives, -1, 0, 0, 0, "b0");
        } else if (prob->alternative) {
          for (i = 0; prob->alternative[i]; i++) {
            fprintf(out_f, "<tr><td>%d</td><td><input type=\"radio\" name=\"file\" value=\"%d\"/></td><td>%s</td></tr>\n", i + 1, i + 1, prob->alternative[i]);
          }
        }
        break;
      case PROB_TYPE_SELECT_MANY:
        if (alternatives) {
          write_alternatives_file(out_f, 0, alternatives, -1, 0, 0, 0, "b0");
        } else if (prob->alternative) {
          for (i = 0; prob->alternative[i]; i++) {
            fprintf(out_f, "<tr><td>%d</td><td><input type=\"checkbox\" name=\"ans_%d\"/></td><td>%s</td></tr>\n", i + 1, i + 1, prob->alternative[i]);
          }
        }
        break;
      case PROB_TYPE_CUSTOM:    /* form is a part of problem statement */
        break;
      }
      fprintf(out_f, "<tr><td>%s</td><td>%s</td></tr></table></form>\n",
              _("Send!"), BUTTON(NEW_SRV_ACTION_SUBMIT_RUN));
     
      fprintf(out_f, "<hr><a name=\"submit\"></a><h2>%s</h2>\n",
              _("Select another problem"));

      html_start_form(out_f, 0, phr->self_url, phr->hidden_vars);
      fprintf(out_f, "<table>\n");
      fprintf(out_f, "<tr><td>%s:</td><td><select name=\"problem\">",
              _("Problem"));
      for (x = 1; x <= cs->max_prob; x++) {
        if (!(prob = cs->probs[x])) continue;
        if (prob->variant_num <= 0) {
          fprintf(out_f, "<option value=\"%d\">%s - %s</option>",
                  x, prob->short_name, ARMOR(prob->long_name));
        } else {
          for (y = 1; y <= prob->variant_num; y++) {
            fprintf(out_f, "<option value=\"%d_%d\">%s - %s, %s %d</option>",
                    x, y, prob->short_name, ARMOR(prob->long_name),
                    _("Variant"), y);
          }
        }
      }
      fprintf(out_f, "</select></td><td>%s</td></tr></table></form>\n",
              ns_submit_button(bb, sizeof(bb), 0, NEW_SRV_ACTION_MAIN_PAGE,
                               _("Select problem")));
      prob = 0;
    }
  }

  if (opcaps_check(phr->caps, OPCAP_VIEW_CLAR) >= 0) {
    ns_write_all_clars(out_f, phr, cnts, extra, filter_mode_clar,
                       filter_first_clar_str, filter_last_clar_str);
  }
%>

<%  if (opcaps_check(phr->caps, OPCAP_NEW_MESSAGE) >= 0) { %>
<hr /><h2><s:tr>Compose a message to all participants</s:tr></h2>
<%    html_start_form(out_f, 1, phr->self_url, phr->hidden_vars); %>
<table>
<tr><td><s:tr>To user id</s:tr>:</td><td><input type="text" size="16" name="msg_dest_id"/></td></tr>
<tr><td><s:tr>To user login</s:tr>:</td><td><input type="text" size="32" name="msg_dest_login"/></td></tr>
<tr><td><s:tr>Subject</s:tr>:</td><td><input type="text" size="64" name="msg_subj"/></td></tr>
<%    if (start_time <= 0) { %>
<tr><td><s:tr>Do not show before the contest starts?</s:tr></td><td><select name="msg_hide_flag"><option value="0">NO</option><option value="1">YES</option></select></td></tr>
<%    } %>
</table>
<p><textarea name="msg_text" rows="20" cols="60"></textarea></p>
<p><s:submit ac="priv-submit-clar" /></p></form>
<%  } %>

<hr/><a name="chgpasswd"></a>
<h2><s:tr>Change password</s:tr></h2>
<%  html_start_form(out_f, 1, phr->self_url, phr->hidden_vars); %>

<table>
<tr><td><s:tr>Old password</s:tr>:</td><td><input type="password" name="oldpasswd" size="16"/></td></tr>
<tr><td><s:tr>New password</s:tr>:</td><td><input type="password" name="newpasswd1" size="16"/></td></tr>
<tr><td><s:tr>Retype new password</s:tr>:</td><td><input type="password" name="newpasswd2" size="16"/></td></tr>
<tr><td colspan="2"><s:submit ac="change-password" /></td></tr>
</table></form>

<%
#if CONF_HAS_LIBINTL - 0 == 1
  if (cs->global->enable_l10n) {
%>

<hr /><a name="chglanguage" /><<s:v escape="false" value="cnts->team_head_style" />><s:tr>Change language</s:tr></<s:v escape="false" value="cnts->team_head_style" />>

<%    html_start_form(out_f, 1, phr->self_url, phr->hidden_vars); %>
<table><tr><td><s:tr>Change language</s:tr></td><td>
<%    l10n_html_locale_select(out_f, phr->locale_id); %>
</td><td><s:submit ac="change-language" /></td></tr></table></form>
<%
  }
#endif /* CONF_HAS_LIBINTL */
%>

<%
  gettimeofday(&phr->timestamp2, 0);
  tdiff = ((long long) phr->timestamp2.tv_sec) * 1000000;
  tdiff += phr->timestamp2.tv_usec;
  tdiff -= ((long long) phr->timestamp1.tv_sec) * 1000000;
  tdiff -= phr->timestamp1.tv_usec;
%>

<div class="dotted"><p<s:v escape="false" value="cnts->team_par_style" />><s:tr>Page generation time</s:tr>: <s:v value="tdiff / 1000" /><%= $fmt("%lld",tdiff / 1000) %> <s:tr>msec</s:tr></p></div>

<%
  html_armor_free(&ab);
%>
