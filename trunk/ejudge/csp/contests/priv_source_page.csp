<%
/* $Id$ */
%><%@include "priv_includes.csp"
%><%
#define FAIL(c) do { retval = -(c); goto cleanup; } while (0)
%><%@set getter_name = "csp_get_priv_source_page"
%><%@set ac_prefix = "NEW_SRV_ACTION_"
%><%@page csp_view_priv_source_page(PageInterface *pg, FILE *log_f, FILE *out_f, struct http_request_info *phr)
%><%@include "priv_stdvars.csp"
%><%
%><%@include "priv_header.csp"
%>


<%

void
ns_write_priv_source(const serve_state_t state,
                     FILE *f,
                     FILE *log_f,
                     struct http_request_info *phr,
                     const struct contest_desc *cnts,
                     struct contest_extra *extra,
                     int run_id)
{
  path_t src_path;
  struct run_entry info;
  char *src_text = 0; //, *html_text;
  //unsigned char *numb_txt;
  size_t src_len; //, html_len, numb_len;
  time_t start_time;
  int variant, src_flags;
  unsigned char filtbuf1[128];
  unsigned char filtbuf2[256];
  unsigned char filtbuf3[512];
  unsigned char *ps1, *ps2;
  time_t run_time;
  int run_id2;
  unsigned char bt[1024];
  unsigned char bb[1024];
  const struct section_problem_data *prob = 0;
  const struct section_language_data *lang = 0;
  const unsigned char *ss;
  const struct section_global_data *global = state->global;
  struct html_armor_buffer ab = HTML_ARMOR_INITIALIZER;
  const unsigned char *run_charset = 0;
  int charset_id = 0;
  const unsigned char *cl = 0;
  int txt_flags = 0;
  path_t txt_path = { 0 };
  char *txt_text = 0;
  size_t txt_size = 0;

  if (ns_cgi_param(phr, "run_charset", &ss) > 0 && ss && *ss)
    run_charset = ss;

  if (run_id < 0 || run_id >= run_get_total(state->runlog_state)) {
    ns_error(log_f, NEW_SRV_ERR_INV_RUN_ID);
    return;
  }
  run_get_entry(state->runlog_state, run_id, &info);
  if (info.status > RUN_LAST
      || (info.status > RUN_MAX_STATUS && info.status < RUN_TRANSIENT_FIRST)) {
    ns_error(log_f, NEW_SRV_ERR_SOURCE_UNAVAILABLE);
    return;
  }

  src_flags = serve_make_source_read_path(state, src_path, sizeof(src_path), &info);
  if (src_flags < 0) {
    ns_error(log_f, NEW_SRV_ERR_SOURCE_NONEXISTANT);
    return;
  }

  if (info.prob_id > 0 && info.prob_id <= state->max_prob)
    prob = state->probs[info.prob_id];
  if (info.lang_id > 0 && info.lang_id <= state->max_lang)
    lang = state->langs[info.lang_id];

  ns_header(f, extra->header_txt, 0, 0, 0, 0, phr->locale_id, cnts,
            phr->client_key,
            "%s [%s, %s]: %s %d", ns_unparse_role(phr->role),
            phr->name_arm, extra->contest_arm,
            _("Viewing run"), run_id);

  run_time = info.time;
  if (run_time < 0) run_time = 0;
  start_time = run_get_start_time(state->runlog_state);
  if (start_time < 0) start_time = 0;
  if (run_time < start_time) run_time = start_time;

  ns_write_run_view_menu(f, phr, cnts, extra, run_id);

  fprintf(f, "<h2>%s %d",
          _("Information about run"), run_id);
  if (phr->role == USER_ROLE_ADMIN && opcaps_check(phr->caps, OPCAP_EDIT_RUN) >= 0) {
    fprintf(f, " [<a href=\"%s\">%s</a>]",
            ns_url(bb, sizeof(bb), phr, NEW_SRV_ACTION_PRIV_EDIT_RUN_PAGE,
                   "run_id=%d", run_id),
            "Edit");
  }
  fprintf(f, "</h2>\n");

  fprintf(f, "<table>\n");
  fprintf(f, "<tr><td style=\"width: 10em;\">%s:</td><td>%d</td></tr>\n", _("Run ID"), info.run_id);
  fprintf(f, "<tr><td>%s:</td><td>%s:%d</td></tr>\n",
          _("Submission time"), duration_str(1, info.time, 0, 0, 0), info.nsec);
  fprintf(f, "<tr><td>%s:</td><td>%s</td></tr>\n",
          _("Contest time"), duration_str_2(filtbuf1, sizeof(filtbuf1), run_time - start_time, info.nsec));

#if CONF_HAS_LIBUUID - 0 != 0
  fprintf(f, "<tr><td>%s:</td><td>%s</td></tr>\n", "UUID", ej_uuid_unparse(info.run_uuid, ""));
#endif

  // IP-address
  fprintf(f, "<tr><td>%s:</td>", _("Originator IP"));
  snprintf(filtbuf1, sizeof(filtbuf1), "ip == ip(%d)", run_id);
  url_armor_string(filtbuf2, sizeof(filtbuf2), filtbuf1);
  fprintf(f, "<td>%s%s</a></td>",
          ns_aref(filtbuf3, sizeof(filtbuf3), phr, 0,
                  "filter_expr=%s", filtbuf2),
          xml_unparse_ip(info.a.ip));
  fprintf(f, "</tr>\n");

  // user_id
  snprintf(filtbuf1, sizeof(filtbuf1), "uid == %d", info.user_id);
  url_armor_string(filtbuf2, sizeof(filtbuf2), filtbuf1);
  fprintf(f, "<tr><td>%s:</td><td>%s%d</a></td></tr>",
          _("User ID"),
          ns_aref(filtbuf3, sizeof(filtbuf3), phr, 0,
                  "filter_expr=%s", filtbuf2),
          info.user_id);

  // user login
  fprintf(f, "<tr><td>%s:</td><td>%s</td></tr>\n",
          _("User login"), teamdb_get_login(state->teamdb_state, info.user_id));

  // user name
  fprintf(f, "<tr><td>%s:</td><td>%s</td></tr>\n",
          _("User name"), ARMOR(teamdb_get_name(state->teamdb_state, info.user_id)));

  // problem
  if (prob) {
    snprintf(filtbuf1, sizeof(filtbuf1), "prob == \"%s\"",  prob->short_name);
    url_armor_string(filtbuf2, sizeof(filtbuf2), filtbuf1);
    fprintf(f, "<tr><td>%s:</td><td>%s%s - %s</a>",
            "Problem", ns_aref(filtbuf3, sizeof(filtbuf3), phr, 0, "filter_expr=%s", filtbuf2),
            prob->short_name, ARMOR(prob->long_name));
    if (prob->xml_file && prob->xml_file[0]) {
      fprintf(f, " %s[%s]</a>",
              ns_aref(filtbuf3, sizeof(filtbuf3), phr,
                      NEW_SRV_ACTION_PRIV_SUBMIT_PAGE,
                      "problem=%d", prob->id),
              "Statement");
    }
    fprintf(f, "</td></tr>\n");
  } else {
    fprintf(f, "<tr><td>%s:</td><td>#%d</td></tr>\n", "Problem", info.prob_id);
  }

  // variant
  if (prob && prob->variant_num > 0) {
    variant = info.variant;
    if (!variant) variant = find_variant(state, info.user_id, info.prob_id, 0);
    if (variant > 0) {
      snprintf(filtbuf1, sizeof(filtbuf1), "prob == \"%s\" && variant == %d", 
               prob->short_name, variant);
      url_armor_string(filtbuf2, sizeof(filtbuf2), filtbuf1);
      ps1 = ns_aref(filtbuf3, sizeof(filtbuf3), phr, 0,
                    "filter_expr=%s", filtbuf2);
      ps2 = "</a>";
      if (info.variant > 0) {
        snprintf(bb, sizeof(bb), "%d", info.variant);
      } else {
        snprintf(bb, sizeof(bb), "%d (implicit)", variant);
      }
    } else {
      ps1 = ""; ps2 = "";
      snprintf(bb, sizeof(bb), "<i>unassigned</i>");
    }
    fprintf(f, "<tr><td>%s:</td><td>%s%s%s</td></tr>\n", _("Variant"), ps1, bb, ps2);
  }

  // lang_id
  if (lang) {
    snprintf(filtbuf1, sizeof(filtbuf1), "lang == \"%s\"", lang->short_name);
    url_armor_string(filtbuf2, sizeof(filtbuf2), filtbuf1);
    fprintf(f, "<tr><td>%s:</td><td>%s%s - %s</a></td></tr>\n", _("Language"),
            ns_aref(filtbuf3, sizeof(filtbuf3), phr, 0, "filter_expr=%s", filtbuf2),
            lang->short_name, ARMOR(lang->long_name));
  } else if (!info.lang_id) {
    fprintf(f, "<tr><td>%s:</td><td>%s</td></tr>\n", _("Language"), "N/A");
  } else {
    fprintf(f, "<tr><td>%s:</td><td>#%d</td></tr>\n", _("Language"), info.lang_id);
  }

  // EOLN type
  if (info.eoln_type) {
    fprintf(f, "<tr><td>%s:</td><td>%s</td></tr>\n", _("EOLN Type"),
            eoln_type_unparse_html(info.eoln_type));
  }

  // status
  run_status_to_str_short(bb, sizeof(bb), info.status);
  snprintf(filtbuf1, sizeof(filtbuf1), "status == %s", bb);
  url_armor_string(filtbuf2, sizeof(filtbuf2), filtbuf1);
  fprintf(f, "<tr><td>%s:</td><td>%s%s</a></td></tr>\n",
          _("Status"),
          ns_aref(filtbuf3, sizeof(filtbuf3), phr, 0, "filter_expr=%s", filtbuf2),
          run_status_str(info.status, 0, 0, 0, 0));

  if (info.passed_mode > 0) {
    if (info.test < 0) {
      snprintf(bb, sizeof(bb), "N/A");
    } else {
      snprintf(bb, sizeof(bb), "%d", info.test);
    }
    fprintf(f, "<tr><td>%s:</td><td>%s</td></tr>\n", _("Tests passed"), bb);
  }
  if (global->score_system == SCORE_KIROV
      || global->score_system == SCORE_OLYMPIAD) {
    if (info.passed_mode <= 0) {
      // test (number of tests passed)
      if (info.test <= 0) {
        snprintf(bb, sizeof(bb), "N/A");
      } else {
        snprintf(bb, sizeof(bb), "%d", info.test - 1);
      }
      fprintf(f, "<tr><td>%s:</td><td>%s</td></tr>\n", _("Tests passed"), bb);
    }

    // score
    if (info.score < 0) {
      snprintf(bb, sizeof(bb), "N/A");
    } else {
      snprintf(bb, sizeof(bb), "%d", info.score);
    }
    fprintf(f, "<tr><td>%s:</td><td>%s</td></tr>\n", _("Score gained"), bb);
  } else if (global->score_system == SCORE_MOSCOW) {
    if (info.passed_mode <= 0) {
      // the first failed test
      if (info.test <= 0) {
        snprintf(bb, sizeof(bb), "N/A");
      } else {
        snprintf(bb, sizeof(bb), "%d", info.test);
      }
      fprintf(f, "<tr><td>%s:</td><td><i>%s</i></td></tr>\n", _("Failed test"), bb);
    }

    // score
    if (info.score < 0) {
      snprintf(bb, sizeof(bb), "N/A");
    } else {
      snprintf(bb, sizeof(bb), "%d", info.score);
    }
    fprintf(f, "<tr><td>%s:</td><td>%s</td></tr>\n", _("Score gained"), bb);
  } else {
    // ACM scoring system
    if (info.passed_mode <= 0) {
      // first failed test
      if (info.test <= 0) {
        snprintf(bb, sizeof(bb), "N/A");
      } else {
        snprintf(bb, sizeof(bb), "%d", info.test);
      }
      fprintf(f, "<tr><td>%s:</td><td><i>%s</i></td></tr>\n", _("Failed test"), bb);
    }
  }

  // is_marked
  fprintf(f, "<tr><td>%s:</td><td>%s</td></tr>\n",
          _("Marked?"),
          html_unparse_bool(bb, sizeof(bb), info.is_marked));
  fprintf(f, "</table>\n");

  /// additional info
  fprintf(f, "<script language=\"javascript\">\n");
  fprintf(f,
          "function setDivVisibility(oper, value)\n"
          "{\n"
          "  obj1 = document.getElementById(\"Show\" + oper + \"Div\");\n"
          "  obj2 = document.getElementById(\"Hide\" + oper + \"Div\");\n"
          "  if (value) {\n"
          "    obj1.style.display = \"none\";\n"
          "    obj2.style.display = \"\";\n"
          "  } else {\n"
          "    obj1.style.display = \"\";\n"
          "    obj2.style.display = \"none\";\n"
          "  }\n"
          "}\n"
          "");
  fprintf(f, "</script>\n");

  fprintf(f, "<div id=\"ShowExtraDiv\">");
  fprintf(f, "<a onclick=\"setDivVisibility('Extra', true)\">[%s]</a>\n", "More info");
  fprintf(f, "</div>");
  fprintf(f, "<div style=\"display: none;\" id=\"HideExtraDiv\">");
  fprintf(f, "<a onclick=\"setDivVisibility('Extra', false)\">[%s]</a><br/>\n", "Hide extended info");

  fprintf(f, "<table>\n");

  // mime_type
  if (!info.lang_id) {
    fprintf(f, "<tr><td>%s</td><td>%s</td></tr>\n",
            _("Content type"), mime_type_get_type(info.mime_type));
  }

  // is_imported
  fprintf(f, "<tr><td style=\"width: 10em;\">%s:</td><td>%s</td></tr>\n",
          _("Imported?"), html_unparse_bool(bb, sizeof(bb), info.is_imported));

  // is_hidden
  fprintf(f, "<tr><td>%s:</td><td>%s</td></tr>\n",
          _("Hidden?"), html_unparse_bool(bb, sizeof(bb), info.is_hidden));

  // is_examinable
  /*
  fprintf(f, "<tr><td>%s:</td><td>%s</td></tr>\n",
          _("Examinable?"),
          html_unparse_bool(bb, sizeof(bb), info.is_examinable));
  */

  // is_saved
  fprintf(f, "<tr><td>%s:</td><td>%s</td></tr>\n",
          _("Saved?"),
          html_unparse_bool(bb, sizeof(bb), info.is_saved));

  // is_readonly
  fprintf(f, "<tr><td>%s:</td><td>%s</td></tr>\n",
          _("Read-only?"), html_unparse_bool(bb, sizeof(bb), info.is_readonly));

  // locale_id
  fprintf(f, "<tr><td>%s:</td><td>%d</td></tr>\n", _("Locale ID"), info.locale_id);

  // score_adj
  if (global->score_system != SCORE_ACM) {
    fprintf(f, "<tr><td>%s:</td><td>%d</td></tr>\n", _("Score adjustment"),
            info.score_adj);
  }

  // size
  snprintf(filtbuf1, sizeof(filtbuf1), "size == size(%d)", run_id);
  url_armor_string(filtbuf2, sizeof(filtbuf2), filtbuf1);
  fprintf(f, "<tr><td>%s:</td><td>%s%u</a></td></tr>\n",
          _("Size"),
          ns_aref(filtbuf3, sizeof(filtbuf3), phr, 0,
                  "filter_expr=%s", filtbuf2),
          info.size);

  // hash code
  snprintf(filtbuf1, sizeof(filtbuf1), "hash == hash(%d)", run_id);
  url_armor_string(filtbuf2, sizeof(filtbuf2), filtbuf1);
  fprintf(f, "<tr><td>%s:</td><td>%s%s</a></td></tr>\n",
          _("Hash value"),
          ns_aref(filtbuf3, sizeof(filtbuf3), phr, 0,
                  "filter_expr=%s", filtbuf2),
          unparse_sha1(info.sha1));

  fprintf(f, "<tr><td>%s:</td><td>%d</td></tr>\n", _("Pages printed"), info.pages);
  fprintf(f, "</table>\n");

  fprintf(f, "</div>\n");

  fprintf(f, "<p>%s%s</a></p>\n",
          ns_aref(filtbuf3, sizeof(filtbuf3), phr,
                  NEW_SRV_ACTION_PRIV_DOWNLOAD_RUN, "run_id=%d", run_id),
          _("Download run"));

  if (phr->role == USER_ROLE_ADMIN && opcaps_check(phr->caps, OPCAP_EDIT_RUN) >= 0
      && info.is_readonly <= 0) {
    html_start_form(f, 1, phr->self_url, phr->hidden_vars);
    html_hidden(f, "run_id", "%d", run_id);
    fprintf(f, "<p>%s</p>", BUTTON(NEW_SRV_ACTION_CLEAR_RUN));
    fprintf(f, "</form>\n");
  }

  if (opcaps_check(phr->caps, OPCAP_PRINT_RUN) >= 0) {
    html_start_form(f, 1, phr->self_url, phr->hidden_vars);
    html_hidden(f, "run_id", "%d", run_id);
    fprintf(f, "<p>%s</p>", BUTTON(NEW_SRV_ACTION_PRINT_RUN));
    fprintf(f, "</form>\n");
  }

  filtbuf1[0] = 0;
  if (run_id > 0) {
    run_id2 = run_find(state->runlog_state, run_id - 1, 0, info.user_id,
                       info.prob_id, info.lang_id, NULL, NULL);
    if (run_id2 >= 0) {
      snprintf(filtbuf1, sizeof(filtbuf1), "%d", run_id2);
    }
  }
  html_start_form(f, 1, phr->self_url, phr->hidden_vars);
  html_hidden(f, "run_id", "%d", run_id);
  fprintf(f, "<p>%s: %s %s</p></form>\n",
          _("Compare this run with run"),
          html_input_text(bt, sizeof(bt), "run_id2", 10, 0, "%s", filtbuf1),
          BUTTON(NEW_SRV_ACTION_COMPARE_RUNS));

  html_start_form(f, 0, phr->self_url, phr->hidden_vars);
  html_hidden(f, "run_id", "%d", run_id);
  fprintf(f, "<p>%s: ", _("Charset"));
  charset_html_select(f, "run_charset", run_charset);
  fprintf(f, "%s</p>",
          ns_submit_button(bb, sizeof(bb), 0, NEW_SRV_ACTION_VIEW_SOURCE,
                           _("Change")));
  fprintf(f, "</form>\n");

  if (global->enable_report_upload) {
    html_start_form(f, 2, phr->self_url, phr->hidden_vars);
    html_hidden(f, "run_id", "%d", run_id);
    fprintf(f, "<p>%s: ", _("Upload judging protocol"));
    fprintf(f, "<input type=\"file\" name=\"file\"/>");
    if (global->team_enable_rep_view) {
      fprintf(f, "<input type=\"checkbox\" %s%s/>%s",
              "name=\"judge_report\"", "checked=\"yes\"",
              _("Judge's report"));
      fprintf(f, "<input type=\"checkbox\" %s%s/>%s",
              "name=\"user_report\"", "checked=\"yes\"",
              _("User's report"));
    }
    fprintf(f, "%s</form>\n", BUTTON(NEW_SRV_ACTION_UPLOAD_REPORT));
  }

  /*
  print_nav_buttons(state, f, run_id, sid, self_url, hidden_vars, extra_args,
                    _("Main page"), 0, 0, 0, _("Refresh"), _("View report"),
                    _("View team report"));
  */

  fprintf(f, "<hr>\n");
  if (prob && prob->type > 0 && info.mime_type > 0) {
    if(info.mime_type >= MIME_TYPE_IMAGE_FIRST
       && info.mime_type <= MIME_TYPE_IMAGE_LAST) {
      fprintf(f, "<p><img src=\"%s\" alt=\"submit image\"/></p>",
              ns_url(filtbuf3, sizeof(filtbuf3), phr,
                     NEW_SRV_ACTION_PRIV_DOWNLOAD_RUN,
                     "run_id=%d&no_disp=1", run_id));
    } else {
      fprintf(f, "<p>The submission is binary and thus is not shown.</p>\n");
    }
  } else if (lang && lang->binary) {
    fprintf(f, "<p>The submission is binary and thus is not shown.</p>\n");
  } else if (!info.is_imported) {
    if (src_flags < 0 || generic_read_file(&src_text, 0, &src_len, src_flags, 0, src_path, "") < 0) {
      fprintf(f, "<big><font color=\"red\">Cannot read source text!</font></big>\n");
    } else {
      if (run_charset && (charset_id = charset_get_id(run_charset)) > 0) {
        unsigned char *newsrc = charset_decode_to_heap(charset_id, src_text);
        xfree(src_text);
        src_text = newsrc;
        src_len = strlen(src_text);
      }

      fprintf(f, "<table class=\"b0\">");
      text_table_number_lines(f, src_text, src_len, 0, " class=\"b0\"");
      fprintf(f, "</table><br/><hr/>");

      xfree(src_text); src_text = 0;
      /*
      numb_txt = "";
      if ((numb_len = text_numbered_memlen(src_text, src_len))) {
        numb_txt = alloca(numb_len + 1);
        text_number_lines(src_text, src_len, numb_txt);
      }

      html_len = html_armored_memlen(numb_txt, numb_len);
      html_text = alloca(html_len + 16);
      html_armor_text(numb_txt, numb_len, html_text);
      html_text[html_len] = 0;
      fprintf(f, "<pre>%s</pre>", html_text);
      xfree(src_text);
      fprintf(f, "<hr/>\n");
      */
    }
    /*
    print_nav_buttons(state, f, run_id, sid, self_url, hidden_vars, extra_args,
                      _("Main page"), 0, 0, 0, _("Refresh"), _("View report"),
                      _("View team report"));
    */
  }

    /* try to load text description of the archive */
  txt_flags = serve_make_report_read_path(state, txt_path, sizeof(txt_path), &info);
  if (txt_flags >= 0) {
    if (generic_read_file(&txt_text, 0, &txt_size, txt_flags, 0,
                          txt_path, 0) >= 0) {
      fprintf(f, "<h2>%s</h2>\n<pre>%s</pre>\n", "Style checker output", ARMOR(txt_text));
      xfree(txt_text); txt_text = 0; txt_size = 0;
    }
  }

  fprintf(f, "<h2>%s</h2>\n", _("Send a message about this run"));
  html_start_form_id(f, 1, phr->self_url, "run_comment", phr->hidden_vars);
  html_hidden(f, "run_id", "%d", run_id);
  fprintf(f, "<table%s><tr>", cl);
  fprintf(f, "<td%s>%s</td>", cl,
          BUTTON(NEW_SRV_ACTION_PRIV_SUBMIT_RUN_JUST_IGNORE));
  fprintf(f, "<td%s>%s</td>", cl,
          BUTTON(NEW_SRV_ACTION_PRIV_SUBMIT_RUN_JUST_OK));
  fprintf(f, "</tr></table><br/>\n");
  fprintf(f, "<table%s><tr>", cl);
  fprintf(f, "<td><input type=\"button\" onclick=\"formatViolation()\" value=\"%s\" /></td>", _("Formatting rules violation"));
  fprintf(f, "</tr></table>\n");
  fprintf(f, "<p><textarea id=\"msg_text\" name=\"msg_text\" rows=\"20\" cols=\"60\">"
          "</textarea></p>");
  cl = " class=\"b0\"";
  fprintf(f, "<table%s><tr>", cl);
  fprintf(f, "<td%s>%s</td>", cl,
          BUTTON(NEW_SRV_ACTION_PRIV_SUBMIT_RUN_COMMENT));
  fprintf(f, "<td%s>%s</td>", cl,
          BUTTON(NEW_SRV_ACTION_PRIV_SUBMIT_RUN_COMMENT_AND_IGNORE));
  fprintf(f, "<td%s>%s</td>", cl,
          BUTTON(NEW_SRV_ACTION_PRIV_SUBMIT_RUN_COMMENT_AND_OK));
  fprintf(f, "<td%s>%s</td>", cl,
          BUTTON(NEW_SRV_ACTION_PRIV_SET_RUN_REJECTED));
  fprintf(f, "</tr></table>\n");
  fprintf(f, "</form>\n");

  html_armor_free(&ab);
}


%>




<%@include "priv_footer.csp"
%><%
  l10n_setlocale(0);
cleanup:
  html_armor_free(&ab);
%>
