<%
    if (prob_id > cs->max_prob) prob_id = 0;
    if (prob_id > 0 && !(prob = cs->probs[prob_id])) prob_id = 0;
    if (prob_id > 0 && !serve_is_problem_started(cs, phr->user_id, prob))
      prob_id = 0;
    if (prob_id > 0 && serve_is_problem_deadlined(cs, phr->user_id, phr->login,
                                                  prob,
                                                  &prob_deadline[prob_id]))
      prob_id = 0;
    //if (prob_id > 0 && prob->disable_user_submit > 0) prob_id = 0;
    if (prob_id > 0 && prob->variant_num > 0
        && (variant = find_variant(cs, phr->user_id, prob_id, 0)) <= 0)
      prob_id = 0;

    if (start_time > 0 && stop_time <= 0 && !prob_id) {
%><div class="h2-long"><h2><s:_>View the problem statement and send a submission</s:_></h2></div>
<s:form>
<table class="b0">
<tr><td class="b0"><s:_>Problem</s:_>:</td><td class="b0"><%
      html_problem_selection(cs, out_f, phr, solved_flag, accepted_flag, 0, 0, start_time);
%></td><td class="b0"><s:submit ac="view-problem-submit" label="Select problem" /></td></tr></table>
</s:form>
<%
    } /* 14 */ else if (start_time > 0 && stop_time <= 0 && prob_id > 0) {
      prob = cs->probs[prob_id];

      if (!cnts->exam_mode) {
%><h2><%
        if ((prob_status[prob_id] & PROB_STATUS_SUBMITTABLE)) {
%><s:_>Submit a solution for</s:_><%
        } else {
%><s:_>Problem</s:_><%
        }
%> <s:v value="prob->short_name" escape="false" /><%
        if (prob->long_name && prob->long_name[0]) {
%>-<s:v value="prob->long_name" /><%
        }
        if (variant > 0) {
%> (<s:_>Variant</s:_> <s:v value="variant" />)<%
        }
%></h2>

<table class="b0">
<%
        if (prob->type == PROB_TYPE_STANDARD) {
%>
<%
          if (prob->use_stdin <= 0 && prob->input_file[0]) {
%>
    <tr><td class="b0"><b><s:_>Input file name</s:_>:</b></td><td class="b0"><tt><s:v value="prob->input_file" /></tt></td></tr>
<%
          }
%>
<%
          if (prob->use_stdout <= 0 && prob->output_file[0]) {
%>
    <tr><td class="b0"><b><s:_>Output file name</s:_>:</b></td><td class="b0"><tt><s:v value="prob->output_file" /></tt></td></tr>
<%
          }
%>
<%
          if (prob->time_limit_millis > 0) {
%>
    <tr><td class="b0"><b><s:_>Time limit</s:_>:</b></td><td class="b0"><tt><s:v value="prob->time_limit_millis" /> <s:_>ms</s:_></tt></td></tr>
<%
          } else if (prob->time_limit > 0) {
%>
    <tr><td class="b0"><b><s:_>Time limit</s:_>:</b></td><td class="b0"><tt><s:v value="prob->time_limit" /> <s:_>s</s:_></tt></td></tr>
<%
          }
%>
<%
          if (prob->real_time_limit > 0) {
%>
    <tr><td class="b0"><b><s:_>Real time limit</s:_>:</b></td><td class="b0"><tt><s:v value="prob->real_time_limit" /> <s:_>s</s:_></tt></td></tr>
<%
          }
%>
<%
          if (prob->max_vm_size != 0 && prob->max_vm_size != ~(size_t) 0) {
%>
    <tr><td class="b0"><b><s:_>Memory limit</s:_>:</b></td><td class="b0"><tt><s:v format="V" value="prob->max_vm_size" /></tt></td></tr>
<%
          }
%>
<%
          if (prob->max_stack_size != 0 && prob->max_stack_size != ~(size_t) 0 && prob->max_stack_size != prob->max_vm_size) {
%>
    <tr><td class="b0"><b><s:_>Stack limit</s:_>:</b></td><td class="b0"><tt><s:v format="V" value="prob->max_stack_size" /></tt></td></tr>
<%
          }
%>
<%
        }
%>

<%
        if (prob->start_date > 0) {
%>
    <tr><td class="b0"><b><s:_>Open date</s:_>:</b></td><td class="b0"><tt><s:v value="prob->start_date" /></tt></td></tr>
<%
        }
%>

<%
        if (prob_deadline[prob_id] > 0) {
%>
    <tr><td class="b0"><b><s:_>Deadline</s:_>:</b></td><td class="b0"><tt><s:v value="prob_deadline[prob_id]" /></tt></td></tr>
<%
        }
%>

<%
        if ((prob_status[prob_id] & PROB_STATUS_SUBMITTABLE) && prob->date_penalty) {
          int dpi;
%>
    <tr><td class="b0"><b><s:_>Date penalty</s:_>:</b></td><td class="b0"><%
          for (dpi = 0; prob->date_penalty[dpi]; ++dpi) {
            char *dp = prob->date_penalty[dpi];
            if (dp != prob->date_penalty[0]) {
%>, <%
            }
%><s:v value="dp" /><%
          }
%></td></tr>
<%
        }
%>

<%
      }
%><%
      if (prob->max_user_run_count > 0) {
        int ignored_set = 0;
        if (prob->ignore_compile_errors > 0) ignored_set |= 1 << RUN_COMPILE_ERR;
        ignored_set |= 1 << RUN_IGNORED;
        int remain_count = prob->max_user_run_count - run_count_all_attempts_2(cs->runlog_state, phr->user_id, prob_id, ignored_set);
        if (remain_count < 0) remain_count = 0;
%>
    <tr><td class="b0"><b><s:_>Remaining attempts</s:_>:</b></td><td class="b0"><tt><s:v value="remain_count" /></tt></td></tr>
<%
        if (remain_count <= 0) prob_status[prob_id] &= ~PROB_STATUS_SUBMITTABLE;
      }
%>

</table>

<%
      px = 0;
      if (variant > 0 && prob->xml.a && prob->xml.a[variant - 1]) {
        px = prob->xml.a[variant - 1];
      } else if (variant <= 0 && prob->xml.p) {
        px = prob->xml.p;
      }

      /* put problem statement */
      if (px && px->stmts) {
        ns_unparse_statement(out_f, phr, cnts, extra, prob, 0, px, NULL,
                          prob_status[prob_id] & PROB_STATUS_SUBMITTABLE);
      } else if (prob->statement_file[0]
          && (prob_status[prob_id] & PROB_STATUS_VIEWABLE)) {
        if (variant > 0) {
          prepare_insert_variant_num(variant_stmt_file,
                                     sizeof(variant_stmt_file),
                                     prob->statement_file, variant);
          pw = &cs->prob_extras[prob_id].v_stmts[variant];
          pw_path = variant_stmt_file;
        } else {
          pw = &cs->prob_extras[prob_id].stmt;
          pw_path = prob->statement_file;
        }
        watched_file_update(pw, pw_path, cs->current_time);
        if (!pw->text) {
%><big><font color="red"><p><s:_>The problem statement is not available</s:_></p></font></big>
<%
        } else {
          if ((prob_status[prob_id] & PROB_STATUS_SUBMITTABLE)
              && prob->type == PROB_TYPE_CUSTOM) {
            html_start_form(out_f, 2, phr->self_url, phr->hidden_vars);
            skip_start_form = 1;
          }
          fprintf(out_f, "%s", pw->text);
        }
      } else {
      }

      if ((prob_status[prob_id] & PROB_STATUS_SUBMITTABLE)) {
        if (!skip_start_form) {
%><s:form enctype="multipart/form-data"><%
        }
%><s:hidden name="prob_id" value="prob_id" />
<table class="b0">
<%        if (!prob->type) {
          int last_eoln_type = 0;
          for (i = 1; i <= cs->max_lang; i++) {
            if (!cs->langs[i] || cs->langs[i]->disabled
                || (cs->langs[i]->insecure && global->secure_run)) continue;
            if ((lang_list = prob->enable_language)) {
              for (j = 0; lang_list[j]; j++)
                if (!strcmp(lang_list[j], cs->langs[i]->short_name))
                  break;
              if (!lang_list[j]) continue;
            } else if ((lang_list = prob->disable_language)) {
              for (j = 0; lang_list[j]; j++)
                if (!strcmp(lang_list[j], cs->langs[i]->short_name))
                  break;
              if (lang_list[j]) continue;
            }
            lang_count++;
            lang_id = i;
          }

          if (lang_count == 1) {
%><s:hidden name="lang_id" value="lang_id" />
<tr><td class="b0"><s:_>Language</s:_>:</td><td class="b0"><s:v value="cs->langs[lang_id]->short_name" escape="false" /> - <s:v value="cs->langs[lang_id]->long_name" /></td></tr>
<%
          } else {
            last_lang_id = get_last_language(cs, phr->user_id, &last_eoln_type);
%><tr><td class="b0"><s:_>Language</s:_>:</td><td class="b0"><s:select name="lang_id"><option value=""></option><%
            for (i = 1; i <= cs->max_lang; i++) {
              if (!cs->langs[i] || cs->langs[i]->disabled
                  || (cs->langs[i]->insecure && global->secure_run)) continue;
              if ((lang_list = prob->enable_language)) {
                for (j = 0; lang_list[j]; j++)
                  if (!strcmp(lang_list[j], cs->langs[i]->short_name))
                    break;
                if (!lang_list[j]) continue;
              } else if ((lang_list = prob->disable_language)) {
                for (j = 0; lang_list[j]; j++)
                  if (!strcmp(lang_list[j], cs->langs[i]->short_name))
                    break;
                if (lang_list[j]) continue;
              }
%><s:option value="i" selectedExpr="last_lang_id == i"><s:v value="cs->langs[i]->short_name" escape="false" /> - <s:v value="cs->langs[i]->long_name" /></s:option><%
            }
%></s:select></td></tr>
<%
          }
%><%
          if (cs->global->enable_eoln_select > 0) {
%><tr><td class="b0"><s:_>Desired EOLN Type</s:_>:</td><td class="b0"><s:select name="eoln_type">
<option value="0"></option>
<s:option value="1" selectedExpr="last_eoln_type == 1">LF (Unix/MacOS)</s:option>
<s:option value="2" selectedExpr="last_eoln_type == 2">CRLF (Windows/DOS)</s:option>
</s:select></td></tr>
<%
          }
        }
%><%
        switch (prob->type) {
          /*
        case PROB_TYPE_STANDARD:
          fprintf(out_f, "<tr><td class=\"b0\">%s</td><td class=\"b0\"><input type=\"file\" name=\"file\"/></td></tr>", _("File"));
          break;
          */
        case PROB_TYPE_STANDARD:
        case PROB_TYPE_OUTPUT_ONLY:
        case PROB_TYPE_TESTS:
          if (prob->enable_text_form > 0) {
%><tr><td colspan="2" class="b0"><textarea name="text_form" rows="20" cols="60"></textarea></td></tr>
<%
          }
%><tr><td class="b0"><s:_>File</s:_></td><td class="b0"><input type="file" name="file"/></td></tr>
<%
          break;
        case PROB_TYPE_SHORT_ANSWER:
          last_source = 0;
          if (cnts->exam_mode) {
            last_source = get_last_source(cs, phr->user_id, prob->id);
          }
          if (last_source) {
%><tr><td class="b0"><s:_>Answer</s:_></td><td class="b0"><s:textfield name="file" value="last_source" /></td></tr>
<%
          } else {
%><tr><td class="b0"><s:_>Answer</s:_></td><td class="b0"><input type="text" name="file" /></td></tr>
<%
          }
          xfree(last_source); last_source = 0;
          break;
        case PROB_TYPE_TEXT_ANSWER:
%><tr><td colspan="2" class="b0"><textarea name="file" rows="20" cols="60"></textarea></td></tr>
<%
          break;
        case PROB_TYPE_SELECT_ONE:
          last_answer = -1;
          if (cnts->exam_mode) {
            last_answer = get_last_answer_select_one(cs, phr->user_id,
                                                     prob->id);
          }

          if (px) {
            next_prob_id = prob->id;
            if (cnts->exam_mode) {
              if (prob->advance_to_next > 0) {
                next_prob_id++;
                for (; next_prob_id <= cs->max_prob; next_prob_id++) {
                  if (!(prob2 = cs->probs[next_prob_id])) continue;
                  if (!serve_is_problem_started(cs, phr->user_id, prob2))
                    continue;
                  break;
                }
                if (next_prob_id > cs->max_prob) next_prob_id = prob->id;
              }
              ns_unparse_answers(out_f, phr, cnts, extra, prob, variant,
                                 px, 0 /* lang */, 1 /* is_radio */,
                                 last_answer, next_prob_id,
                                 1 /* js_flag */, "b0");
            } else {
              ns_unparse_answers(out_f, phr, cnts, extra, prob, variant,
                                 px, 0 /* lang */, 1 /* is_radio */,
                                 last_answer, next_prob_id,
                                 0 /* js_flag */, "b0");
            }
          } else if (prob->alternative) {
            for (i = 0; prob->alternative[i]; i++) {
              cc = "";
              if (i + 1 == last_answer) cc = " checked=\"1\"";
              fprintf(out_f, "<tr><td class=\"b0\">%d</td><td class=\"b0\"><input type=\"radio\" name=\"file\" value=\"%d\"%s/></td><td>%s</td></tr>", i + 1, i + 1, cc, prob->alternative[i]);
            }
          }
          break;
        case PROB_TYPE_SELECT_MANY:
          if (prob->alternative) {
            for (i = 0; prob->alternative[i]; i++) {
              fprintf(out_f, "<tr><td class=\"b0\">%d</td><td class=\"b0\"><input type=\"checkbox\" name=\"ans_%d\"/></td><td>%s</td></tr>", i + 1, i + 1, prob->alternative[i]);
            }
          }
          break;
        case PROB_TYPE_CUSTOM:
          break;
        }
        if (cnts->exam_mode) {
          if (prob->type != PROB_TYPE_SELECT_ONE) {
            cc = "";
            if (prob && (prob->type == PROB_TYPE_SELECT_MANY || prob->type == PROB_TYPE_SELECT_ONE)) cc = "<td class=\"b0\">&nbsp;</td>";
            fprintf(out_f, "<tr>%s<td class=\"b0\">&nbsp;</td><td class=\"b0\">%s</td></tr></table></form>", cc,
                    ns_submit_button(bb, sizeof(bb), 0,
                                     NEW_SRV_ACTION_SUBMIT_RUN,
                                     _("Submit solution!")));
          } else {
            fprintf(out_f, "</tr></table></form>");
          }
        } else {
%><tr><td class="b0"><s:_>Send!</s:_></td><td class="b0"><s:submit ac="submit-run" /></td></tr></table></form>
<%
        }
      } /* prob->disable_user_submit <= 0 */
%><%
      if (global->problem_navigation
          //&& !prob->disable_user_submit
          && prob->type != PROB_TYPE_SELECT_ONE
          && all_attempts[prob->id]) {
        if (all_attempts[prob->id] <= 15) {
%><h2><s:_>Previous submissions of this problem</s:_></h2>
<%
        } else {
%><h2><s:_>Previous submissions of this problem</s:_> (<s:_>last 15</s:_>)</h2>
<%
        }
        if (cs->contest_plugin && cs->contest_plugin->generate_html_user_runs){
          // FIXME: logged output is also ignored
          // FIXME: return code is ignored for now
          char *ur_text = 0;
          size_t ur_size = 0;
          FILE *ur_file = open_memstream(&ur_text, &ur_size);
          (*cs->contest_plugin->generate_html_user_runs)(cs->contest_plugin_data, ur_file, out_f, cnts, cs, phr, phr->user_id, prob_id, all_runs, "b1");
          close_memstream(ur_file); ur_file = 0;
          xfree(ur_text); ur_text = 0;
        } else if (global->score_system == SCORE_OLYMPIAD) {
          ns_write_olympiads_user_runs(phr, out_f, cnts, extra, all_runs,
                                       prob_id, "b1");
        } else {
          new_write_user_runs(cs, out_f, phr, all_runs, prob->id, "b1");
        }
      }
%><%
      if (!cnts->exam_mode) {
        if (global->problem_navigation <= 0) {
%><h2><s:_>Select another problem</s:_></h2>
<%
        } else {
          /*
          fprintf(out_f, "<%s>%s</%s>\n",
                  cnts->team_head_style, _("Problem navigation"),
                  cnts->team_head_style);
          */
        }
%><s:form>
<table class="b0">
<tr>
<%
        if (global->problem_navigation > 0) {
          for (i = prob_id - 1; i > 0; i--) {
            if (!(prob_status[i] & PROB_STATUS_GOOD)) continue;
            break;
          }
          if (i > 0) {
%><s:url name="ProblemUrl" ac="view-problem-submit">
<s:param name="prob_id" value="i" />
</s:url><td class="b0"><s:a url="ProblemUrl"><s:_>Previous problem</s:_></s:a></td><%
          }
        }

        if (global->problem_navigation <= 0) {
%><td class="b0"><s:_>Problem</s:_>:</td><td class="b0"><%
          html_problem_selection(cs, out_f, phr, solved_flag, accepted_flag, 0, 0, start_time);
%></td><td class="b0"><s:submit ac="view-problem-submit" /></td><%
        }

        if (global->problem_navigation > 0) {
          for (i = prob_id + 1; i <= cs->max_prob; i++) {
            if (!(prob_status[i] & PROB_STATUS_GOOD)) continue;
            break;
          }
          if (i <= cs->max_prob) {
%><s:url name="ProblemUrl" ac="view-problem-submit">
<s:param name="prob_id" value="i" />
</s:url><td class="b0"><s:a url="ProblemUrl"><s:_>Next problem</s:_></s:a></td><%
          }
        }
%></tr></table>
</s:form>
<%
      }
    }
%>
