<%
/* $Id$ */
%>

<!--
  unsigned char name_buf[1024];
  int i, sel_num;
  struct section_problem_data *prob, *sup_prob = 0;
  unsigned char *s, *ss, *checker_env;
  unsigned char prob_hidden_vars[4096];
  unsigned char *extra_msg = 0;
  struct section_problem_data *tmp_prob = 0;
  unsigned char msg_buf[1024];
  int flags, show_adv = 0, show_details = 0;;
  unsigned char num_buf[1024];
  struct section_global_data *global = sstate->global;
  unsigned char hbuf[1024];
  int row = 1, problem_type_flag = 0;
  struct html_armor_buffer ab = HTML_ARMOR_INITIALIZER;
-->

<%
  int show_details = 0, show_adv = 0;
  if ((flags & SID_STATE_SHOW_HIDDEN)) show_details = 1;
  if ((flags & SID_STATE_SHOW_CLOSED)) show_adv = 1;
  struct section_problem_data *tmp_prob = prepare_copy_problem(prob);
  int prob_type = 0;
  const unsigned char *str_value = 0;
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <tr bgcolor="#b0b0b0">
        <td colspan="2" align="center"><%
  if (is_abstract) {
%><s:v value="prob->short_name" /><%
  } else if (!prob->short_name[0]) {
%>Problem <s:v value="prob->id" /><%
  } else if (!prob->long_name[0]) {
%><s:v value="prob->short_name" /><%
  } else {
%><s:v value="prob->short_name" />: <s:v value="prob->long_name" /><%
  }
%></td>
        <td colspan="2"><%
  if (!show_details) {
%><s:submit ac="prob-show-details" label="Show details" /><%
  } else {
%><s:submit ac="prob-hide-details" label="Hide details" /><%
    if (!show_adv) {
%><s:submit ac="prob-show-advanced" label="Show advanced" /><%
    } else {
%><s:submit ac="prob-hide-advanced" label="Hide advanced" /><%
    }
  }
%><s:submit ac="prob-delete" label="Delete!" /></td>
    </tr>
</s:form>
<%
  if (show_details) {
    const struct section_problem_data *sup_prob = 0;
    int sup_id = 0;
    int j;
    if (!is_abstract && prob->super && prob->super[0]) {
      for (j = 0; j < phr->ss->aprob_u; ++j) {
        if (!strcmp(prob->super, phr->ss->aprobs[j]->short_name)) {
          sup_prob = phr->ss->aprobs[j];
          sup_id = j + 1;
          break;
        }
      }
    }
    row = 1;
%><%
    if (!is_abstract) {
%>
<s:htr attr="form_row_attrs[row ^= 1]">
    <td>Problem ID:</td>
    <td><s:v value="prob->id" /></td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
</s:htr>

<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Problem short name:</td>
        <td><s:textfield name="param" value="prob->short_name" size="48" maxlength="1024" check="no" /><% if (!prob->short_name) { %>(<i>Not set</i>)<% } %></td>
        <td><s:submit ac="prob-change-short-name" label="Change" /><s:submit ac="prob-clear-short-name" label="Clear" /></td>
        <td><s:help ac="prob-change-short-name" /></td>
    </s:htr>
</s:form>

<%
      if (show_adv) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Internal name:</td>
        <td><s:textfield name="param" value="prob->internal_name" size="48" maxlength="1024" check="no" /><% if (!prob->internal_name) { %>(<i>Not set</i>)<% } %></td>
        <td><s:submit ac="prob-change-internal-name" label="Change" /><s:submit ac="prob-clear-internal-name" label="Clear" /></td>
        <td><s:help ac="prob-change-internal-name" /></td>
    </s:htr>
</s:form>
<%
      }
%>


<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Problem long name:</td>
        <td><s:textfield name="param" value="prob->long_name" size="48" maxlength="1024" check="no" /><% if (!prob->long_name) { %>(<i>Not set</i>)<% } %></td>
        <td><s:submit ac="prob-change-long-name" label="Change" /><s:submit ac="prob-clear-long-name" label="Clear" /></td>
        <td><s:help ac="prob-change-long-name" /></td>
    </s:htr>
</s:form>

<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Base abstract problem:</td>
        <td><select name="param"><option value="0"></option><%
    for (j = 0; j < phr->ss->aprob_u; ++j) {
%><s:option value="j + 1" selectedExpr="j + 1 == sup_id"><s:v value="phr->ss->aprobs[j]->short_name" /></s:option><%
    }
%></select></td>
        <td><s:submit ac="prob-change-super" label="Change" /></td>
        <td><s:help ac="prob-change-super" /></td>
    </s:htr>
</s:form>
<%
    } else {
%>
<s:htr attr="form_row_attrs[row ^= 1]">
    <td>Problem Name:</td>
    <td><s:v value="prob->short_name" /></td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
</s:htr>
<%
    }
%>

<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Problem type:</td>
        <td><select name="param"><%
    if (is_abstract || !sup_prob) {
      prob_type = prob->type;
      if (prob_type < 0 || prob_type >= PROB_TYPE_LAST) prob_type = 0;
      for (j = 0; j < PROB_TYPE_LAST; ++j) {
%><s:option value="j" selectedExpr="j == prob_type"><s:v value="problem_unparse_type(j)" escape="false" /></s:option><%
      }
    } else {
      prob_type = prob->type;
      if (prob_type < -1 || prob_type >= PROB_TYPE_LAST) prob_type = -1;
      int sup_type = sup_prob->type;
      if (sup_type < 0 || sup_type >= PROB_TYPE_LAST) sup_type = 0;
%><s:option value="-1" selectedExpr="prob_type < 0">Default (<s:v value="problem_unparse_type(sup_type)" escape="false" />)</s:option><%
      for (j = 0; j < PROB_TYPE_LAST; ++j) {
%><s:option value="j" selectedExpr="j == prob->type"><s:v value="problem_unparse_type(j)" escape="false" /></s:option><%
      }
      if (prob_type < 0) prob_type = sup_type;
    }
%></select></td>
        <td><s:submit ac="prob-change-type" label="Change" /></td>
        <td><s:help ac="prob-change-type" /></td>
    </s:htr>
</s:form>

<%
    if (!is_abstract && show_adv) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Title for the standings column:</td>
        <td><s:textfield name="param" value="prob->stand_name" size="48" maxlength="1024" check="no" /><% if (!prob->stand_name) { %>(<i>Not set</i>)<% } %></td>
        <td><s:submit ac="prob-change-stand-name" label="Change" /><s:submit ac="prob-clear-stand-name" label="Clear" /></td>
        <td><s:help ac="prob-change-stand-name" /></td>
    </s:htr>
</s:form>
<%
    }
%>

<%
    if (!is_abstract && show_adv) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Collate this problem with the specified one:</td>
        <td><s:textfield name="param" value="prob->stand_column" size="48" maxlength="1024" check="no" /><% if (!prob->stand_column) { %>(<i>Not set</i>)<% } %></td>
        <td><s:submit ac="prob-change-stand-column" label="Change" /><s:submit ac="prob-clear-stand-column" label="Clear" /></td>
        <td><s:help ac="prob-change-stand-column" /></td>
    </s:htr>
</s:form>
<%
    }
%>

<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Problem is checked manually:</td>
        <td><%
    if (is_abstract || !sup_prob) {
      int value = (prob->manual_checking == 1);
%><s:yesno name="param" value="value" /><%
    } else {
      prepare_set_prob_value(CNTSPROB_manual_checking, tmp_prob, sup_prob, global);
%><s:yesno3 name="param" value="prob->manual_checking" default="sup_prob->manual_checking" /><%
    }
%></td>
        <td><s:submit ac="prob-change-manual-checking" label="Change" /></td>
        <td><s:help ac="prob-change-manual-checking" /></td>
    </s:htr>
</s:form>

<%
  if (is_abstract || tmp_prob->manual_checking > 0) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Check output presentation anyway?</td>
        <td><%
    if (is_abstract || !sup_prob) {
      int value = (prob->check_presentation == 1);
%><s:yesno name="param" value="value" /><%
    } else {
      prepare_set_prob_value(CNTSPROB_check_presentation, tmp_prob, sup_prob, global);
%><s:yesno3 name="param" value="prob->check_presentation" default="sup_prob->check_presentation" /><%
    }
%></td>
        <td><s:submit ac="prob-change-check-presentation" label="Change" /></td>
        <td><s:help ac="prob-change-check-presentation" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (prob_type == PROB_TYPE_STANDARD) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Use standard input?</td>
        <td><%
    if (is_abstract || !sup_prob) {
      int value = prob->use_stdin;
%><s:yesno name="param" value="value" /><%
    } else {
      prepare_set_prob_value(CNTSPROB_use_stdin, tmp_prob, sup_prob, global);
%><s:yesno3 name="param" value="prob->use_stdin" default="sup_prob->use_stdin" /><%
    }
%></td>
        <td><s:submit ac="prob-change-use-stdin" label="Change" /></td>
        <td><s:help ac="prob-change-use-stdin" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (prob_type == PROB_TYPE_STANDARD) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Combined standard/file input?</td>
        <td><%
    if (is_abstract || !sup_prob) {
      int value = prob->combined_stdin;
%><s:yesno name="param" value="value" /><%
    } else {
      prepare_set_prob_value(CNTSPROB_combined_stdin, tmp_prob, sup_prob, global);
%><s:yesno3 name="param" value="prob->combined_stdin" default="sup_prob->combined_stdin" /><%
    }
%></td>
        <td><s:submit ac="prob-change-combined-stdin" label="Change" /></td>
        <td><s:help ac="prob-change-combined-stdin" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (prob_type == PROB_TYPE_STANDARD) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Input file name:</td>
        <td><%
    if (is_abstract || !sup_prob) {
      const unsigned char *value = prob->input_file;
      if (value && value[0] < ' ') value = 0;
%><s:textfield name="param" value="value" size="48" maxlength="1024" checkExpr="" /><% if (!value) { %>(<i>Not set</i>)<% } %><%
    } else {
      prepare_set_prob_value(CNTSPROB_input_file, tmp_prob, sup_prob, global);
      const unsigned char *value = prob->input_file;
      if (value && value[0] < ' ') value = 0;
%><s:textfield name="param" value="value" size="48" maxlength="1024" checkExpr="" /><% if (!value) { %>(<i>Default</i>: <i><s:v value="tmp_prob->input_file" /></i>)<% } %><%
    }
%></td>
        <td><s:submit ac="prob-change-input-file" label="Change" /><s:submit ac="prob-clear-input-file" label="Clear" /></td>
        <td><s:help ac="prob-change-input-file" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (prob_type == PROB_TYPE_STANDARD) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Use standard output?</td>
        <td><%
    if (is_abstract || !sup_prob) {
      int value = prob->use_stdout;
%><s:yesno name="param" value="value" /><%
    } else {
      prepare_set_prob_value(CNTSPROB_use_stdout, tmp_prob, sup_prob, global);
%><s:yesno3 name="param" value="prob->use_stdout" default="sup_prob->use_stdout" /><%
    }
%></td>
        <td><s:submit ac="prob-change-use-stdout" label="Change" /></td>
        <td><s:help ac="prob-change-use-stdout" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (prob_type == PROB_TYPE_STANDARD) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Combined standard/file output?</td>
        <td><%
    if (is_abstract || !sup_prob) {
      int value = prob->combined_stdout;
%><s:yesno name="param" value="value" /><%
    } else {
      prepare_set_prob_value(CNTSPROB_combined_stdout, tmp_prob, sup_prob, global);
%><s:yesno3 name="param" value="prob->combined_stdout" default="sup_prob->combined_stdout" /><%
    }
%></td>
        <td><s:submit ac="prob-change-combined-stdout" label="Change" /></td>
        <td><s:help ac="prob-change-combined-stdout" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (prob_type == PROB_TYPE_STANDARD) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Output file name:</td>
        <td><%
    if (is_abstract || !sup_prob) {
      const unsigned char *value = prob->output_file;
      if (value && value[0] < ' ') value = 0;
%><s:textfield name="param" value="value" size="48" maxlength="1024" checkExpr="" /><% if (!value) { %>(<i>Not set</i>)<% } %><%
    } else {
      prepare_set_prob_value(CNTSPROB_output_file, tmp_prob, sup_prob, global);
      const unsigned char *value = prob->output_file;
      if (value && value[0] < ' ') value = 0;
%><s:textfield name="param" value="value" size="48" maxlength="1024" checkExpr="" /><% if (!value) { %>(<i>Default</i>: <i><s:v value="tmp_prob->output_file" /></i>)<% } %><%
    }
%></td>
        <td><s:submit ac="prob-change-output-file" label="Change" /><s:submit ac="prob-clear-output-file" label="Clear" /></td>
        <td><s:help ac="prob-change-output-file" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (prob_type == PROB_TYPE_STANDARD && show_adv) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Consider output to stderr as PE?</td>
        <td><%
    if (is_abstract || !sup_prob) {
      int value = prob->disable_stderr == 1;
%><s:yesno name="param" value="value" /><%
    } else {
      prepare_set_prob_value(CNTSPROB_disable_stderr, tmp_prob, sup_prob, global);
%><s:yesno3 name="param" value="prob->disable_stderr" default="sup_prob->disable_stderr" /><%
    }
%></td>
        <td><s:submit ac="prob-change-disable-stderr" label="Change" /></td>
        <td><s:help ac="prob-change-disable-stderr" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (prob_type == PROB_TYPE_STANDARD && show_adv) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Input data is binary?</td>
        <td><%
    if (is_abstract || !sup_prob) {
      int value = prob->binary_input == 1;
%><s:yesno name="param" value="value" /><%
    } else {
      prepare_set_prob_value(CNTSPROB_binary_input, tmp_prob, sup_prob, global);
%><s:yesno3 name="param" value="prob->binary_input" default="sup_prob->binary_input" /><%
    }
%></td>
        <td><s:submit ac="prob-change-binary-input" label="Change" /></td>
        <td><s:help ac="prob-change-binary-input" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (prob_type != PROB_TYPE_STANDARD && prob_type != PROB_TYPE_TESTS) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Submit is binary?</td>
        <td><%
    if (is_abstract || !sup_prob) {
      int value = prob->binary == 1;
%><s:yesno name="param" value="value" /><%
    } else {
      prepare_set_prob_value(CNTSPROB_binary, tmp_prob, sup_prob, global);
%><s:yesno3 name="param" value="prob->binary" default="sup_prob->binary" /><%
    }
%></td>
        <td><s:submit ac="prob-change-binary" label="Change" /></td>
        <td><s:help ac="prob-change-binary" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (prob_type == PROB_TYPE_STANDARD && show_adv && (is_abstract || tmp_prob->binary_input <= 0)) {
    int value = 0;
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Test normalization mode:</td>
        <td><select name="param"><%
    if (is_abstract || !sup_prob) {
      value = test_normalization_parse(prob->normalization);
      if (value < 0) value = TEST_NORM_NL;
      if (value == TEST_NORM_DEFAULT) value = TEST_NORM_NL;
    } else {
      value = test_normalization_parse(prob->normalization);
      if (value < 0) value = TEST_NORM_DEFAULT;
      int sup_value = test_normalization_parse(sup_prob->normalization);
      if (sup_value < 0) sup_value = TEST_NORM_NL;
      if (sup_value == TEST_NORM_DEFAULT) sup_value = TEST_NORM_NL;
%><s:option value='""' selectedExpr="value == TEST_NORM_DEFAULT">Default (<s:v value="test_normalization_unparse(sup_value)" escape="false" />)</s:option><%
    }
%><s:option value='"none"' selectedExpr="value == TEST_NORM_NONE">none - No normalization</s:option>
<s:option value='"nl"' selectedExpr="value == TEST_NORM_NL">nl - End-of-line normalization</s:option>
<s:option value='"nlws"' selectedExpr="value == TEST_NORM_NLWS">nlws - End-of-line and trailing space normalization</s:option>
<s:option value='"nlwsnp"' selectedExpr="value == TEST_NORM_NLWSNP">nlwsnp - End-of-line, trailing space, and trailing lines normalization</s:option>
<s:option value='"nlnp"' selectedExpr="value == TEST_NORM_NLNP">nlnp - End-of-line and trailing lines normalization</s:option>
</select></td>
        <td><s:submit ac="prob-change-normalization" label="Change" /></td>
        <td><s:help ac="prob-change-normalization" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>XML File with problem statement:</td>
        <td><%
  str_value = prob->xml_file;
  if (str_value && str_value[0] < ' ') str_value = 0;
%><s:textfield name="param" value="str_value" size="48" maxlength="1024" checkExpr="" /><%
  if (is_abstract) {
%><% if (!str_value) { %>(<i>Not set</i>)<% } %><%
  } else if (!sup_prob) {
    prepare_set_prob_value(CNTSPROB_xml_file, tmp_prob, sup_prob, global);
    if (!str_value) {
%>(<i>Not set</i>)<%
    } else {
%>(<i><s:v value="tmp_prob->xml_file" /></i>)<%
    }
  } else {
    prepare_set_prob_value(CNTSPROB_xml_file, tmp_prob, sup_prob, global);
    if (!str_value) {
%>(<i>Default: <s:v value="tmp_prob->xml_file" /></i>)<%
    } else {
%>(<i><s:v value="tmp_prob->xml_file" /></i>)<%
    }
  }
%></td>
        <td><s:submit ac="prob-change-xml-file" label="Change" /><s:submit ac="prob-clear-xml-file" label="Clear" /></td>
        <td><s:help ac="prob-change-xml-file" /></td>
    </s:htr>
</s:form>

<%
  if (global->advanced_layout <= 0) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Directory with tests:</td>
        <td><%
    str_value = prob->test_dir;
    if (str_value && str_value[0] < ' ') str_value = 0;
%><s:textfield name="param" value="str_value" size="48" maxlength="1024" checkExpr="" /><%
    if (is_abstract) {
      if (!str_value) {
%>(<i>Not set</i>)<%
      }
    } else {
      prepare_set_prob_value(CNTSPROB_test_dir, tmp_prob, sup_prob, global);
      if (!sup_prob && !str_value) {
%>(<i>Not set</i>)<%
      } else if (!str_value) {
%>(<i>Default: <s:v value="tmp_prob->test_dir" /></i>)<%
      } else {
%>(<i><s:v value="tmp_prob->test_dir" /></i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-test-dir" label="Change" /><s:submit ac="prob-clear-test-dir" label="Clear" /></td>
        <td><s:help ac="prob-change-test-dir" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (!is_abstract) {
    prepare_set_prob_value(CNTSPROB_test_sfx, tmp_prob, sup_prob, global);
    prepare_set_prob_value(CNTSPROB_test_pat, tmp_prob, sup_prob, global);
  }
%>

<%
  if (is_abstract || show_adv || tmp_prob->test_pat[0] >= ' ') {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Pattern for test file names:</td>
        <td><%
    str_value = prob->test_pat;
    if (str_value[0] == 1) str_value = 0;
%><s:textfield name="param" value="str_value" size="48" maxlength="1024" checkExpr="" /><%
    if (is_abstract) {
      if (!str_value) {
%>(<i>Not set</i>)<%
      }
    } else {
      if (!sup_prob && !str_value) {
%>(<i>Not set</i>)<%
      } else if (!str_value) {
%>(<i>Default: <s:v value="tmp_prob->test_pat" /></i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-test-pat" label="Change" /><s:submit ac="prob-clear-test-pat" label="Clear" /></td>
        <td><s:help ac="prob-change-test-pat" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (is_abstract || tmp_prob->test_pat[0] < ' ') {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Suffix of test files:</td>
        <td><%
    str_value = prob->test_sfx;
    if (str_value[0] == 1) str_value = 0;
%><s:textfield name="param" value="str_value" size="48" maxlength="1024" checkExpr="" /><%
    if (is_abstract) {
      if (!str_value) {
%>(<i>Not set</i>)<%
      }
    } else {
      if (!sup_prob && !str_value) {
%>(<i>Not set</i>)<%
      } else if (!str_value) {
%>(<i>Default: <s:v value="tmp_prob->test_sfx" /></i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-test-sfx" label="Change" /><s:submit ac="prob-clear-test-sfx" label="Clear" /></td>
        <td><s:help ac="prob-change-test-sfx" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Use &quot;correct answer&quot; files for check?</td>
        <td><%
    if (is_abstract || !sup_prob) {
      int value = (prob->use_corr > 0);
%><s:yesno name="param" value="value" /><%
    } else {
      prepare_set_prob_value(CNTSPROB_use_corr, tmp_prob, sup_prob, global);
%><s:yesno3 name="param" value="prob->use_corr" default="sup_prob->use_corr" /><%
    }
%></td>
        <td><s:submit ac="prob-change-use-corr" label="Change" /></td>
        <td><s:help ac="prob-change-use-corr" /></td>
    </s:htr>
</s:form>

<%
  if (tmp_prob->use_corr > 0 && global->advanced_layout <= 0) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Directory with &quot;correct answer&quot; files:</td>
        <td><%
    str_value = prob->corr_dir;
    if (str_value && str_value[0] < ' ') str_value = 0;
%><s:textfield name="param" value="str_value" size="48" maxlength="1024" checkExpr="" /><%
    if (is_abstract) {
      if (!str_value) {
%>(<i>Not set</i>)<%
      }
    } else {
      prepare_set_prob_value(CNTSPROB_corr_dir, tmp_prob, sup_prob, global);
      if (!sup_prob && !str_value) {
%>(<i>Not set</i>)<%
      } else if (!str_value) {
%>(<i>Default: <s:v value="tmp_prob->corr_dir" /></i>)<%
      } else {
%>(<i><s:v value="tmp_prob->corr_dir" /></i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-corr-dir" label="Change" /><s:submit ac="prob-clear-corr-dir" label="Clear" /></td>
        <td><s:help ac="prob-change-corr-dir" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (!prob->abstract) {
    prepare_set_prob_value(CNTSPROB_corr_sfx, tmp_prob, sup_prob, global);
    prepare_set_prob_value(CNTSPROB_corr_pat, tmp_prob, sup_prob, global);
  }
%>

<%
  if (tmp_prob->use_corr > 0 && (is_abstract || show_adv || tmp_prob->corr_pat[0] >= ' ')) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Pattern for &quot;correct answer&quot; file names:</td>
        <td><%
    str_value = prob->corr_pat;
    if (str_value[0] == 1) str_value = 0;
%><s:textfield name="param" value="str_value" size="48" maxlength="1024" checkExpr="" /><%
    if (is_abstract) {
      if (!str_value) {
%>(<i>Not set</i>)<%
      }
    } else {
      if (!sup_prob && !str_value) {
%>(<i>Not set</i>)<%
      } else if (!str_value) {
%>(<i>Default: <s:v value="tmp_prob->corr_pat" /></i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-corr-pat" label="Change" /><s:submit ac="prob-clear-corr-pat" label="Clear" /></td>
        <td><s:help ac="prob-change-corr-pat" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (tmp_prob->use_corr > 0 && (is_abstract || tmp_prob->corr_pat[0] < ' ')) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Suffix of &quot;correct answer&quot; files:</td>
        <td><%
    str_value = prob->corr_sfx;
    if (str_value[0] == 1) str_value = 0;
%><s:textfield name="param" value="str_value" size="48" maxlength="1024" checkExpr="" /><%
    if (is_abstract) {
      if (!str_value) {
%>(<i>Not set</i>)<%
      }
    } else {
      if (!sup_prob && !str_value) {
%>(<i>Not set</i>)<%
      } else if (!str_value) {
%>(<i>Default: <s:v value="tmp_prob->corr_sfx" /></i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-corr-sfx" label="Change" /><s:submit ac="prob-clear-corr-sfx" label="Clear" /></td>
        <td><s:help ac="prob-change-corr-sfx" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Use test info files for check?</td>
        <td><%
    if (is_abstract || !sup_prob) {
      int value = (prob->use_info > 0);
%><s:yesno name="param" value="value" /><%
    } else {
      prepare_set_prob_value(CNTSPROB_use_info, tmp_prob, sup_prob, global);
%><s:yesno3 name="param" value="prob->use_info" default="sup_prob->use_info" /><%
    }
%></td>
        <td><s:submit ac="prob-change-use-info" label="Change" /></td>
        <td><s:help ac="prob-change-use-info" /></td>
    </s:htr>
</s:form>

<%
  if (tmp_prob->use_info > 0 && global->advanced_layout <= 0) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Directory with test info files:</td>
        <td><%
    str_value = prob->info_dir;
    if (str_value && str_value[0] < ' ') str_value = 0;
%><s:textfield name="param" value="str_value" size="48" maxlength="1024" checkExpr="" /><%
    if (is_abstract) {
      if (!str_value) {
%>(<i>Not set</i>)<%
      }
    } else {
      prepare_set_prob_value(CNTSPROB_info_dir, tmp_prob, sup_prob, global);
      if (!sup_prob && !str_value) {
%>(<i>Not set</i>)<%
      } else if (!str_value) {
%>(<i>Default: <s:v value="tmp_prob->info_dir" /></i>)<%
      } else {
%>(<i><s:v value="tmp_prob->info_dir" /></i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-info-dir" label="Change" /><s:submit ac="prob-clear-info-dir" label="Clear" /></td>
        <td><s:help ac="prob-change-info-dir" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (!prob->abstract) {
    prepare_set_prob_value(CNTSPROB_info_sfx, tmp_prob, sup_prob, global);
    prepare_set_prob_value(CNTSPROB_info_pat, tmp_prob, sup_prob, global);
  }
%>

<%
  if (tmp_prob->use_info > 0 && (is_abstract || show_adv || tmp_prob->info_pat[0] >= ' ')) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Pattern for test info file names:</td>
        <td><%
    str_value = prob->info_pat;
    if (str_value[0] == 1) str_value = 0;
%><s:textfield name="param" value="str_value" size="48" maxlength="1024" checkExpr="" /><%
    if (is_abstract) {
      if (!str_value) {
%>(<i>Not set</i>)<%
      }
    } else {
      if (!sup_prob && !str_value) {
%>(<i>Not set</i>)<%
      } else if (!str_value) {
%>(<i>Default: <s:v value="tmp_prob->info_pat" /></i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-info-pat" label="Change" /><s:submit ac="prob-clear-info-pat" label="Clear" /></td>
        <td><s:help ac="prob-change-info-pat" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (tmp_prob->use_info > 0 && (is_abstract || tmp_prob->info_pat[0] < ' ')) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Suffix of test info:</td>
        <td><%
    str_value = prob->info_sfx;
    if (str_value[0] == 1) str_value = 0;
%><s:textfield name="param" value="str_value" size="48" maxlength="1024" checkExpr="" /><%
    if (is_abstract) {
      if (!str_value) {
%>(<i>Not set</i>)<%
      }
    } else {
      if (!sup_prob && !str_value) {
%>(<i>Not set</i>)<%
      } else if (!str_value) {
%>(<i>Default: <s:v value="tmp_prob->info_sfx" /></i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-info-sfx" label="Change" /><s:submit ac="prob-clear-info-sfx" label="Clear" /></td>
        <td><s:help ac="prob-change-info-sfx" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (show_adv && tmp_prob->use_info > 0) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Use special working directory for check?</td>
        <td><%
    if (is_abstract || !sup_prob) {
      int value = (prob->use_tgz > 0);
%><s:yesno name="param" value="value" /><%
    } else {
      prepare_set_prob_value(CNTSPROB_use_tgz, tmp_prob, sup_prob, global);
%><s:yesno3 name="param" value="prob->use_tgz" default="sup_prob->use_tgz" /><%
    }
%></td>
        <td><s:submit ac="prob-change-use-tgz" label="Change" /></td>
        <td><s:help ac="prob-change-use-tgz" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (!prob->abstract) {
    prepare_set_prob_value(CNTSPROB_tgz_sfx, tmp_prob, sup_prob, global);
    prepare_set_prob_value(CNTSPROB_tgz_pat, tmp_prob, sup_prob, global);
    prepare_set_prob_value(CNTSPROB_tgzdir_sfx, tmp_prob, sup_prob, global);
    prepare_set_prob_value(CNTSPROB_tgzdir_pat, tmp_prob, sup_prob, global);
  }
%>

<%
  if (show_adv && tmp_prob->use_tgz > 0 && (is_abstract || tmp_prob->tgz_pat[0] >= ' ')) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Pattern for working dir archives:</td>
        <td><%
    str_value = prob->tgz_pat;
    if (str_value[0] == 1) str_value = 0;
%><s:textfield name="param" value="str_value" size="48" maxlength="1024" checkExpr="" /><%
    if (is_abstract) {
      if (!str_value) {
%>(<i>Not set</i>)<%
      }
    } else {
      if (!sup_prob && !str_value) {
%>(<i>Not set</i>)<%
      } else if (!str_value) {
%>(<i>Default: <s:v value="tmp_prob->tgz_pat" /></i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-tgz-pat" label="Change" /><s:submit ac="prob-clear-tgz-pat" label="Clear" /></td>
        <td><s:help ac="prob-change-tgz-pat" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (show_adv && tmp_prob->use_tgz > 0 && (is_abstract || tmp_prob->tgzdir_pat[0] >= ' ')) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Pattern for master working dirs:</td>
        <td><%
    str_value = prob->tgzdir_pat;
    if (str_value[0] == 1) str_value = 0;
%><s:textfield name="param" value="str_value" size="48" maxlength="1024" checkExpr="" /><%
    if (is_abstract) {
      if (!str_value) {
%>(<i>Not set</i>)<%
      }
    } else {
      if (!sup_prob && !str_value) {
%>(<i>Not set</i>)<%
      } else if (!str_value) {
%>(<i>Default: <s:v value="tmp_prob->tgzdir_pat" /></i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-tgzdir-pat" label="Change" /><s:submit ac="prob-clear-tgzdir-pat" label="Clear" /></td>
        <td><s:help ac="prob-change-tgzdir-pat" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (show_adv && tmp_prob->use_tgz > 0 && (is_abstract || tmp_prob->tgz_pat[0] < ' ')) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Suffix of working dir archives:</td>
        <td><%
    str_value = prob->tgz_sfx;
    if (str_value[0] == 1) str_value = 0;
%><s:textfield name="param" value="str_value" size="48" maxlength="1024" checkExpr="" /><%
    if (is_abstract) {
      if (!str_value) {
%>(<i>Not set</i>)<%
      }
    } else {
      if (!sup_prob && !str_value) {
%>(<i>Not set</i>)<%
      } else if (!str_value) {
%>(<i>Default: <s:v value="tmp_prob->tgz_sfx" /></i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-tgz-sfx" label="Change" /><s:submit ac="prob-clear-tgz-sfx" label="Clear" /></td>
        <td><s:help ac="prob-change-tgz-sfx" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (show_adv && tmp_prob->use_tgz > 0 && (is_abstract || tmp_prob->tgzdir_pat[0] < ' ')) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Suffix of master working dirs:</td>
        <td><%
    str_value = prob->tgzdir_sfx;
    if (str_value[0] == 1) str_value = 0;
%><s:textfield name="param" value="str_value" size="48" maxlength="1024" checkExpr="" /><%
    if (is_abstract) {
      if (!str_value) {
%>(<i>Not set</i>)<%
      }
    } else {
      if (!sup_prob && !str_value) {
%>(<i>Not set</i>)<%
      } else if (!str_value) {
%>(<i>Default: <s:v value="tmp_prob->tgzdir_sfx" /></i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-tgzdir-sfx" label="Change" /><s:submit ac="prob-clear-tgzdir-sfx" label="Clear" /></td>
        <td><s:help ac="prob-change-tgzdir-sfx" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  prepare_set_prob_value(CNTSPROB_time_limit, tmp_prob, sup_prob, global);
  prepare_set_prob_value(CNTSPROB_time_limit_millis, tmp_prob, sup_prob, global);
%>

<%
  if (show_adv || tmp_prob->time_limit_millis > 0) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Processor time limit (ms):</td>
        <td><s:textfield name="param" value="prob->time_limit_millis" size="48" maxlength="1024" checkExpr=" > 0" /><%
    if (is_abstract) {
      if (prob->time_limit_millis <= 0) {
%>(<i>Not set</i>)<%
      }
    } else {
      if (prob->time_limit_millis <= 0 && tmp_prob->time_limit_millis <= 0) {
%>(<i>Not set</i>)<%
      } else if (prob->time_limit_millis <= 0) {
%>(<i>Default: <s:v value="tmp_prob->time_limit_millis" /></i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-time-limit-millis" label="Change" /></td>
        <td><s:help ac="prob-change-time-limit-millis" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<%
  if (tmp_prob->time_limit_millis <= 0) {
%>
<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Processor time limit (s):</td>
        <td><s:textfield name="param" value="prob->time_limit" size="48" maxlength="1024" checkExpr=" >= 0" /><%
    if (is_abstract) {
      if (prob->time_limit < 0) {
%>(<i>Not set</i>)<%
      } else if (!prob->time_limit) {
%>(<i>Unlimited</i>)<%
      }
    } else {
      if (prob->time_limit < 0 && tmp_prob->time_limit < 0) {
%>(<i>Not set</i>)<%
      } else if (prob->time_limit < 0 && !tmp_prob->time_limit) {
%>(<i>Default: Unlimited</i>)<%
      } else if (prob->time_limit < 0) {
%>(<i>Default: <s:v value="tmp_prob->time_limit" /></i>)<%
      } else if (!prob->time_limit) {
%>(<i>Unlimited</i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-time-limit" label="Change" /></td>
        <td><s:help ac="prob-change-time-limit" /></td>
    </s:htr>
</s:form>
<%
  }
%>

<s:form>
    <s:hidden name="prob_id" check="false" />
    <s:htr attr="form_row_attrs[row ^= 1]">
        <td>Real time limit (s):</td>
        <td><s:textfield name="param" value="prob->real_time_limit" size="48" maxlength="1024" checkExpr=" >= 0" /><%
    if (is_abstract) {
      if (prob->real_time_limit < 0) {
%>(<i>Not set</i>)<%
      } else if (!prob->real_time_limit) {
%>(<i>Unlimited</i>)<%
      }
    } else {
      if (prob->real_time_limit < 0 && tmp_prob->real_time_limit < 0) {
%>(<i>Not set</i>)<%
      } else if (prob->real_time_limit < 0 && !tmp_prob->real_time_limit) {
%>(<i>Default: Unlimited</i>)<%
      } else if (prob->real_time_limit < 0) {
%>(<i>Default: <s:v value="tmp_prob->real_time_limit" /></i>)<%
      } else if (!prob->real_time_limit) {
%>(<i>Unlimited</i>)<%
      }
    }
%></td>
        <td><s:submit ac="prob-change-real-time-limit" label="Change" /></td>
        <td><s:help ac="prob-change-real-time-limit" /></td>
    </s:htr>
</s:form>

<!--
  //PROBLEM_PARAM(max_vm_size, "d"),
  extra_msg = "";
  if (prob->abstract) {
    /*
    if (prob->max_vm_size == -1L) extra_msg = "<i>(Undefined)</i>";
    else if (!prob->max_vm_size) extra_msg = "<i>(OS Limit)</i>";
    */
    if (prob->max_vm_size == -1L || !prob->max_vm_size)
      extra_msg = "<i>(OS Limit)</i>";
  } else {
    if (prob->max_vm_size == -1L) {
      prepare_set_prob_value(CNTSPROB_max_vm_size,
                             tmp_prob, sup_prob, sstate->global);
      if (tmp_prob->max_vm_size == -1L || !tmp_prob->max_vm_size)
        snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - OS Limit)</i>");
      else
        snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %s)</i>",
                 size_t_to_size_str(num_buf, sizeof(num_buf), tmp_prob->max_vm_size));
      extra_msg = msg_buf;
    } else if (!prob->max_vm_size) extra_msg = "<i>(OS Limit)</i>";
  }
  if (prob->max_vm_size == -1L) {
    snprintf(num_buf, sizeof(num_buf), "-1");
  } else {
    size_t_to_size_str(num_buf, sizeof(num_buf), tmp_prob->max_vm_size);
  }
  if (!problem_type_flag) {
    html_start_form(f, 1, self_url, prob_hidden_vars);
    fprintf(f, "<tr%s><td>%s</td><td>", form_row_attrs[row ^= 1],
            "Maximum virtual memory size:");
    html_edit_text_form(f, 0, 0, "param", num_buf);
    fprintf(f, "%s</td><td>", extra_msg);
    html_submit_button(f, SSERV_CMD_PROB_CHANGE_MAX_VM_SIZE, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_PROB_CHANGE_MAX_VM_SIZE);
    fprintf(f, "</tr></form>\n");
  }

  if (!problem_type_flag && show_adv) {
    //PROBLEM_PARAM(max_stack_size, "z"),
    extra_msg = "";
    if (prob->abstract) {
      /*
      if (prob->max_stack_size == -1L) extra_msg = "<i>(Undefined)</i>";
      else if (!prob->max_stack_size) extra_msg = "<i>(OS Limit)</i>";
      */
      if (prob->max_stack_size == -1L || !prob->max_stack_size)
        extra_msg = "<i>(OS Limit)</i>";
    } else {
      if (prob->max_stack_size == -1L) {
        prepare_set_prob_value(CNTSPROB_max_stack_size,
                               tmp_prob, sup_prob, sstate->global);
        if (tmp_prob->max_stack_size == -1L || !tmp_prob->max_stack_size)
          snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - OS Limit)</i>");
        else
          snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %s)</i>",
                   num_to_size_str(num_buf, sizeof(num_buf), tmp_prob->max_stack_size));
        extra_msg = msg_buf;
      } else if (!prob->max_stack_size) extra_msg = "<i>(OS Limit)</i>";
    }
    if (prob->max_stack_size == -1L) {
      snprintf(num_buf, sizeof(num_buf), "-1");
    } else {
      num_to_size_str(num_buf, sizeof(num_buf), tmp_prob->max_stack_size);
    }
    html_start_form(f, 1, self_url, prob_hidden_vars);
    fprintf(f, "<tr%s><td>%s</td><td>",
            form_row_attrs[row ^= 1], "Maximum stack size:");
    html_edit_text_form(f, 0, 0, "param", num_buf);
    fprintf(f, "%s</td><td>", extra_msg);
    html_submit_button(f, SSERV_CMD_PROB_CHANGE_MAX_STACK_SIZE, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_PROB_CHANGE_MAX_STACK_SIZE);
    fprintf(f, "</tr></form>\n");
  }

  //PROBLEM_PARAM(max_core_size, "z"),
  if (show_adv) {
    extra_msg = "";
    if (prob->abstract) {
      if (prob->max_core_size == -1L)
        extra_msg = "<i>(OS Limit)</i>";
    } else {
      if (prob->max_core_size == -1L) {
        prepare_set_prob_value(CNTSPROB_max_core_size,
                               tmp_prob, sup_prob, sstate->global);
        if (tmp_prob->max_core_size == -1L)
          snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - OS Limit)</i>");
      else
        snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %s)</i>",
                 size_t_to_size_str(num_buf, sizeof(num_buf), tmp_prob->max_core_size));
        extra_msg = msg_buf;
      }
    }
    if (prob->max_core_size == -1L) {
      num_buf[0] = 0;
    } else {
      size_t_to_size_str(num_buf, sizeof(num_buf), tmp_prob->max_core_size);
    }
    if (!problem_type_flag) {
      html_start_form(f, 1, self_url, prob_hidden_vars);
      fprintf(f, "<tr%s><td>%s</td><td>", form_row_attrs[row ^= 1],
              "Maximum core file size:");
      html_edit_text_form(f, 0, 0, "param", num_buf);
      fprintf(f, "%s</td><td>", extra_msg);
      html_submit_button(f, SSERV_CMD_PROB_CHANGE_MAX_CORE_SIZE, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_PROB_CHANGE_MAX_CORE_SIZE);
      fprintf(f, "</tr></form>\n");
    }
  }

  //PROBLEM_PARAM(max_file_size, "z"),
  if (show_adv) {
    extra_msg = "";
    if (prob->abstract) {
      if (prob->max_file_size == -1L)
        extra_msg = "<i>(OS Limit)</i>";
    } else {
      if (prob->max_file_size == -1L) {
        prepare_set_prob_value(CNTSPROB_max_file_size,
                               tmp_prob, sup_prob, sstate->global);
        if (tmp_prob->max_file_size == -1L)
          snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - OS Limit)</i>");
      else
        snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %s)</i>",
                 size_t_to_size_str(num_buf, sizeof(num_buf), tmp_prob->max_file_size));
        extra_msg = msg_buf;
      }
    }
    if (prob->max_file_size == -1L) {
      num_buf[0] = 0;
    } else {
      size_t_to_size_str(num_buf, sizeof(num_buf), tmp_prob->max_file_size);
    }
    if (!problem_type_flag) {
      html_start_form(f, 1, self_url, prob_hidden_vars);
      fprintf(f, "<tr%s><td>%s</td><td>", form_row_attrs[row ^= 1],
              "Maximum file size:");
      html_edit_text_form(f, 0, 0, "param", num_buf);
      fprintf(f, "%s</td><td>", extra_msg);
      html_submit_button(f, SSERV_CMD_PROB_CHANGE_MAX_FILE_SIZE, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_PROB_CHANGE_MAX_FILE_SIZE);
      fprintf(f, "</tr></form>\n");
    }
  }

  //PROBLEM_PARAM(max_open_file_count, "d"),
  if (show_adv) {
    extra_msg = "";
    if (prob->abstract) {
      if (prob->max_open_file_count < 0)
        extra_msg = "<i>(OS Limit)</i>";
    } else {
      if (prob->max_open_file_count < 0) {
        prepare_set_prob_value(CNTSPROB_max_open_file_count,
                               tmp_prob, sup_prob, sstate->global);
        if (tmp_prob->max_open_file_count < 0)
          snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - OS Limit)</i>");
        else
          snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %d)</i>",
                   tmp_prob->max_open_file_count);
        extra_msg = msg_buf;
      }
    }
    if (prob->max_open_file_count < 0) {
      num_buf[0] = 0;
    } else {
      snprintf(num_buf, sizeof(num_buf), "%d", tmp_prob->max_open_file_count);
    }
    if (!problem_type_flag) {
      html_start_form(f, 1, self_url, prob_hidden_vars);
      fprintf(f, "<tr%s><td>%s</td><td>", form_row_attrs[row ^= 1],
              "Maximum open file count:");
      html_edit_text_form(f, 0, 0, "param", num_buf);
      fprintf(f, "%s</td><td>", extra_msg);
      html_submit_button(f,SSERV_CMD_PROB_CHANGE_MAX_OPEN_FILE_COUNT,"Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_PROB_CHANGE_MAX_OPEN_FILE_COUNT);
      fprintf(f, "</tr></form>\n");
    }
  }

  //PROBLEM_PARAM(max_process_count, "d"),
  if (show_adv) {
    extra_msg = "";
    if (prob->abstract) {
      if (prob->max_process_count < 0)
        extra_msg = "<i>(OS Limit)</i>";
    } else {
      if (prob->max_process_count < 0) {
        prepare_set_prob_value(CNTSPROB_max_process_count,
                               tmp_prob, sup_prob, sstate->global);
        if (tmp_prob->max_process_count < 0)
          snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - OS Limit)</i>");
        else
          snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %d)</i>",
                   tmp_prob->max_process_count);
        extra_msg = msg_buf;
      }
    }
    if (prob->max_process_count < 0) {
      num_buf[0] = 0;
    } else {
      snprintf(num_buf, sizeof(num_buf), "%d", tmp_prob->max_process_count);
    }
    if (!problem_type_flag) {
      html_start_form(f, 1, self_url, prob_hidden_vars);
      fprintf(f, "<tr%s><td>%s</td><td>", form_row_attrs[row ^= 1],
              "Maximum process count:");
      html_edit_text_form(f, 0, 0, "param", num_buf);
      fprintf(f, "%s</td><td>", extra_msg);
      html_submit_button(f,SSERV_CMD_PROB_CHANGE_MAX_PROCESS_COUNT, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_PROB_CHANGE_MAX_PROCESS_COUNT);
      fprintf(f, "</tr></form>\n");
    }
  }

  if (show_adv) {
    //PROBLEM_PARAM(enable_process_group, "d"),
    extra_msg = "Undefined";
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_enable_process_group,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->enable_process_group?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f,"Use separate process group:",
                               prob->enable_process_group,
                               SSERV_CMD_PROB_CHANGE_ENABLE_PROCESS_GROUP,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
  }

  //PROBLEM_PARAM(checker_real_time_limit, "d"),
  if (show_adv) {
    extra_msg = "";
    if (prob->abstract) {
      if (prob->checker_real_time_limit == -1) extra_msg = "<i>(Undefined)</i>";
      else if (!prob->checker_real_time_limit) extra_msg = "<i>(Unlimited)</i>";
    } else {
      if (prob->checker_real_time_limit == -1) {
        prepare_set_prob_value(CNTSPROB_checker_real_time_limit,
                               tmp_prob, sup_prob, sstate->global);
        if (!tmp_prob->checker_real_time_limit)
          snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - Unlimited)</i>");
        else
          snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %d)</i>",
                   tmp_prob->checker_real_time_limit);
        extra_msg = msg_buf;
      } else if (!prob->checker_real_time_limit) extra_msg = "<i>(Unlimited)</i>";
    }
    print_int_editing_row(f, "Real time limit for checker (sec):",
                          prob->checker_real_time_limit, extra_msg,
                          SSERV_CMD_PROB_CHANGE_CHECKER_REAL_TIME_LIMIT,
                          session_id, form_row_attrs[row ^= 1],
                          self_url, extra_args, prob_hidden_vars);
  }

  if (show_adv) {
    //PROBLEM_PARAM(use_ac_not_ok, "d"),
    extra_msg = "Undefined";
    tmp_prob->use_ac_not_ok = prob->use_ac_not_ok;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_use_ac_not_ok,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->use_ac_not_ok?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Use AC status instead of OK:",
                               prob->use_ac_not_ok,
                               SSERV_CMD_PROB_CHANGE_USE_AC_NOT_OK,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

    if (tmp_prob->use_ac_not_ok > 0) {
      extra_msg = "Undefined";
      tmp_prob->ignore_prev_ac = prob->ignore_prev_ac;
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_ignore_prev_ac,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->ignore_prev_ac?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f, "Mark previous AC as IG:",
                                 prob->ignore_prev_ac,
                                 SSERV_CMD_PROB_CHANGE_IGNORE_PREV_AC,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
    }

    //PROBLEM_PARAM(team_enable_rep_view, "d"),
    extra_msg = "Undefined";
    tmp_prob->team_enable_rep_view = prob->team_enable_rep_view;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_team_enable_rep_view,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->team_enable_rep_view?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Contestant may view testing protocol:",
                               prob->team_enable_rep_view,
                               SSERV_CMD_PROB_CHANGE_TEAM_ENABLE_REP_VIEW,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

    if (tmp_prob->team_enable_rep_view != 1) {
      //PROBLEM_PARAM(team_enable_ce_view, "d"),
      extra_msg = "Undefined";
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_team_enable_ce_view,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->team_enable_ce_view?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f, "Contestant may view compilation errors:",
                                 prob->team_enable_ce_view,
                                 SSERV_CMD_PROB_CHANGE_TEAM_ENABLE_CE_VIEW,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
    }

    if (tmp_prob->team_enable_rep_view != 0) {
      //PROBLEM_PARAM(team_show_judge_report, "d"),
      extra_msg = "Undefined";
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_team_show_judge_report,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->team_show_judge_report?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f,"Contestant may view FULL (judge's) testing protocol:",
                                 prob->team_show_judge_report,
                                 SSERV_CMD_PROB_CHANGE_TEAM_SHOW_JUDGE_REPORT,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);

      //PROBLEM_PARAM(show_checker_comment, "d"),
      extra_msg = "Undefined";
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_show_checker_comment,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->show_checker_comment?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f,"Contestant may view checker comment:",
                                 prob->show_checker_comment,
                                 SSERV_CMD_PROB_CHANGE_SHOW_CHECKER_COMMENT,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
    }

    //PROBLEM_PARAM(ignore_compile_errors, "d"),
    extra_msg = "Undefined";
    tmp_prob->ignore_compile_errors = prob->ignore_compile_errors;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_ignore_compile_errors,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->ignore_compile_errors?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Ignore compilation errors:",
                               prob->ignore_compile_errors,
                               SSERV_CMD_PROB_CHANGE_IGNORE_COMPILE_ERRORS,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

    //PROBLEM_PARAM(disable_user_submit, "d"),
    extra_msg = "Undefined";
    tmp_prob->disable_user_submit = prob->disable_user_submit;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_disable_user_submit,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->disable_user_submit?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Disable user submissions:",
                               prob->disable_user_submit,
                               SSERV_CMD_PROB_CHANGE_DISABLE_USER_SUBMIT,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

    if (global && global->problem_navigation > 0) {
      //PROBLEM_PARAM(disable_tab, "d"),
      extra_msg = "Undefined";
      tmp_prob->disable_tab = prob->disable_tab;
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_disable_tab,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->disable_tab?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f, "Disable problem tab:",
                                 prob->disable_tab,
                                 SSERV_CMD_PROB_CHANGE_DISABLE_TAB,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
    }

    //PROBLEM_PARAM(restricted_statement, "d"),
    extra_msg = "Undefined";
    tmp_prob->restricted_statement = prob->restricted_statement;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_restricted_statement,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->restricted_statement?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Restricted problem statement:",
                               prob->restricted_statement,
                               SSERV_CMD_PROB_CHANGE_RESTRICTED_STATEMENT,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

    //PROBLEM_PARAM(disable_submit_after_ok, "d"),
    extra_msg = "Undefined";
    tmp_prob->disable_submit_after_ok = prob->disable_submit_after_ok;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_disable_submit_after_ok,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->disable_submit_after_ok?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Disable submissions after OK:",
                               prob->disable_submit_after_ok,
                               SSERV_CMD_PROB_CHANGE_DISABLE_SUBMIT_AFTER_OK,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

    //PROBLEM_PARAM(disable_security, "d"),
    extra_msg = "Undefined";
    tmp_prob->disable_security = prob->disable_security;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_disable_security,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->disable_security?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Disable security restrictions:",
                               prob->disable_security,
                               SSERV_CMD_PROB_CHANGE_DISABLE_SECURITY,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

    //PROBLEM_PARAM(disable_testing, "d"),
    extra_msg = "Undefined";
    tmp_prob->disable_testing = prob->disable_testing;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_disable_testing,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->disable_testing?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Disable any testing of submissions:",
                               prob->disable_testing,
                               SSERV_CMD_PROB_CHANGE_DISABLE_TESTING,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

    if (tmp_prob->disable_testing != 1) {
      //PROBLEM_PARAM(disable_auto_testing, "d"),
      extra_msg = "Undefined";
      tmp_prob->disable_auto_testing = prob->disable_auto_testing;
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_disable_auto_testing,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->disable_auto_testing?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f, "Disable automatic testing of submissions:",
                                 prob->disable_auto_testing,
                                 SSERV_CMD_PROB_CHANGE_DISABLE_AUTO_TESTING,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
    }

    if (!problem_type_flag && tmp_prob->disable_testing == 1) {
      //PROBLEM_PARAM(enable_compilation, "d"),
      extra_msg = "Undefined";
      tmp_prob->enable_compilation = prob->enable_compilation;
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_enable_compilation,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->enable_compilation?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f, "Still compile runs to mark as ACCEPTED:",
                                 prob->enable_compilation,
                                 SSERV_CMD_PROB_CHANGE_ENABLE_COMPILATION,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
    }
  } /* show_adv */

  if (show_adv) {
    //PROBLEM_PARAM(ignore_exit_code, "d"),
    extra_msg = 0;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_ignore_exit_code,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->ignore_exit_code?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Ignore exit code?", prob->ignore_exit_code,
                               SSERV_CMD_PROB_CHANGE_IGNORE_EXIT_CODE,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
  }

  if (sstate->global && sstate->global->score_system == SCORE_KIROV
      && show_adv) {
    //PROBLEM_PARAM(olympiad_mode, "d"),
    extra_msg = 0;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_olympiad_mode,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->olympiad_mode?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Use Olympiad mode?", prob->olympiad_mode,
                               SSERV_CMD_PROB_CHANGE_OLYMPIAD_MODE,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
  }

  if (sstate->global && sstate->global->score_system == SCORE_KIROV
      && show_adv) {
    //PROBLEM_PARAM(score_latest, "d"),
    extra_msg = 0;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_score_latest,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->score_latest?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Score the latest submit?", prob->score_latest,
                               SSERV_CMD_PROB_CHANGE_SCORE_LATEST,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

    //PROBLEM_PARAM(score_latest_or_unmarked, "d"),
    extra_msg = 0;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_score_latest_or_unmarked,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->score_latest_or_unmarked?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Score the latest or the best unmarked?", prob->score_latest_or_unmarked,
                               SSERV_CMD_PROB_CHANGE_SCORE_LATEST_OR_UNMARKED,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

    //PROBLEM_PARAM(score_latest_marked, "d"),
    extra_msg = 0;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_score_latest_marked,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->score_latest_marked?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Score the latest marked submit?", prob->score_latest_marked,
                               SSERV_CMD_PROB_CHANGE_SCORE_LATEST_MARKED,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

  }

  if (sstate->global && sstate->global->score_system != SCORE_ACM) {
    //PROBLEM_PARAM(full_score, "d"),
    extra_msg = "";
    if (prob->full_score == -1) {
      if (prob->abstract) {
        extra_msg = "<i>(Undefined)</i>";
      } else {
        prepare_set_prob_value(CNTSPROB_full_score,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %d)</i>",
                 tmp_prob->full_score);
        extra_msg = msg_buf;
      }
    }
    print_int_editing_row(f, "Score for full solution:",
                          prob->full_score, extra_msg,
                          SSERV_CMD_PROB_CHANGE_FULL_SCORE,
                          session_id, form_row_attrs[row ^= 1],
                          self_url, extra_args, prob_hidden_vars);
  }

  if (sstate->global && sstate->global->score_system != SCORE_ACM
      && sstate->global->separate_user_score > 0) {
    //PROBLEM_PARAM(full_user_score, "d"),
    extra_msg = "";
    if (prob->full_user_score == -1) {
      if (prob->abstract) {
        extra_msg = "<i>(Undefined)</i>";
      } else {
        prepare_set_prob_value(CNTSPROB_full_user_score,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %d)</i>",
                 tmp_prob->full_user_score);
        extra_msg = msg_buf;
      }
    }
    print_int_editing_row(f, "Score for user-visible full solution:",
                          prob->full_user_score, extra_msg,
                          SSERV_CMD_PROB_CHANGE_FULL_USER_SCORE,
                          session_id, form_row_attrs[row ^= 1],
                          self_url, extra_args, prob_hidden_vars);
  }

  if (sstate->global &&
      (sstate->global->score_system == SCORE_KIROV
       || sstate->global->score_system == SCORE_OLYMPIAD)) {
    if (show_adv) {
      //PROBLEM_PARAM(variable_full_score, "d"),
      extra_msg = "Undefined";
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_variable_full_score,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->variable_full_score?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f, "Allow variable score for full solution:",
                                 prob->variable_full_score,
                                 SSERV_CMD_PROB_CHANGE_VARIABLE_FULL_SCORE,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
    }

    //PROBLEM_PARAM(test_score, "d"),
    extra_msg = "";
    if (prob->test_score == -1) {
      if (prob->abstract) {
        extra_msg = "<i>(Undefined)</i>";
      } else {
        prepare_set_prob_value(CNTSPROB_test_score,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %d)</i>",
                 tmp_prob->test_score);
        extra_msg = msg_buf;
      }
    }
    print_int_editing_row(f, "Default score for 1 passed test:",
                          prob->test_score, extra_msg,
                          SSERV_CMD_PROB_CHANGE_TEST_SCORE,
                          session_id, form_row_attrs[row ^= 1],
                          self_url, extra_args, prob_hidden_vars);

    if (sstate->global->score_system == SCORE_KIROV) {
      //PROBLEM_PARAM(run_penalty, "d"),
      extra_msg = "";
      if (prob->run_penalty == -1) {
        if (prob->abstract) {
          extra_msg = "<i>(Undefined)</i>";
        } else {
          prepare_set_prob_value(CNTSPROB_run_penalty,
                                 tmp_prob, sup_prob, sstate->global);
          snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %d)</i>",
                   tmp_prob->run_penalty);
          extra_msg = msg_buf;
        }
      }
      print_int_editing_row(f, "Penalty for a submission:",
                            prob->run_penalty, extra_msg,
                            SSERV_CMD_PROB_CHANGE_RUN_PENALTY,
                            session_id, form_row_attrs[row ^= 1],
                            self_url, extra_args, prob_hidden_vars);
    }

    //PROBLEM_PARAM(disqualified_penalty, "d"),
    extra_msg = "";
    if (prob->disqualified_penalty == -1) {
      if (prob->abstract) {
        extra_msg = "<i>(Undefined)</i>";
      } else {
        prepare_set_prob_value(CNTSPROB_disqualified_penalty,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %d)</i>",
                 tmp_prob->disqualified_penalty);
        extra_msg = msg_buf;
      }
    }
    print_int_editing_row(f, "Penalty for a disqualified submission:",
                          prob->disqualified_penalty, extra_msg,
                          SSERV_CMD_PROB_CHANGE_DISQUALIFIED_PENALTY,
                          session_id, form_row_attrs[row ^= 1],
                          self_url, extra_args, prob_hidden_vars);

    //PROBLEM_PARAM(test_score_list, "s"),
    print_string_editing_row(f, "Test scores for tests:", prob->test_score_list,
                             SSERV_CMD_PROB_CHANGE_TEST_SCORE_LIST,
                             SSERV_CMD_PROB_CLEAR_TEST_SCORE_LIST,
                             0,
                             session_id, form_row_attrs[row ^= 1],
                             self_url, extra_args, prob_hidden_vars);
  }

  if ((sstate->global->score_system == SCORE_ACM
       || sstate->global->score_system == SCORE_MOSCOW)
      && show_adv) {
    //PROBLEM_PARAM(acm_run_penalty, "d"),
    extra_msg = "";
    if (prob->acm_run_penalty == -1) {
      if (prob->abstract) {
        extra_msg = "<i>(Undefined)</i>";
      } else {
        prepare_set_prob_value(CNTSPROB_acm_run_penalty,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %d)</i>",
                 tmp_prob->acm_run_penalty);
        extra_msg = msg_buf;
      }
    }
    print_int_editing_row(f, "Penalty for a submission (minutes):",
                          prob->acm_run_penalty, extra_msg,
                          SSERV_CMD_PROB_CHANGE_ACM_RUN_PENALTY,
                          session_id, form_row_attrs[row ^= 1],
                          self_url, extra_args, prob_hidden_vars);
  }

  if (sstate->global && sstate->global->score_system == SCORE_MOSCOW) {
    //PROBLEM_PARAM(score_tests, "s"),
    print_string_editing_row(f, "Tests for problem scores:", prob->score_tests,
                             SSERV_CMD_PROB_CHANGE_SCORE_TESTS,
                             SSERV_CMD_PROB_CLEAR_SCORE_TESTS,
                             0,
                             session_id, form_row_attrs[row ^= 1],
                             self_url, extra_args, prob_hidden_vars);
  }

  if (sstate->global
      && (sstate->global->score_system == SCORE_KIROV
          || sstate->global->score_system == SCORE_OLYMPIAD)
      && !prob->abstract
      && show_adv) {
    if (!prob->test_sets || !prob->test_sets[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse_2(prob->test_sets);
    }
    print_string_editing_row_3(f, "Specially scored test sets:", checker_env,
                               SSERV_CMD_PROB_CHANGE_TEST_SETS,
                               SSERV_CMD_PROB_CLEAR_TEST_SETS,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env);
  }

  //PROBLEM_PARAM(score_bonus, "s"),
  extra_msg = 0;
  if (global && global->score_system == SCORE_KIROV) {
    if (prob->abstract && (show_adv || prob->score_bonus[0])) extra_msg = "";
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_score_bonus,
                             tmp_prob, sup_prob, sstate->global);
      if (show_adv || tmp_prob->score_bonus[0]) {
        snprintf(msg_buf, sizeof(msg_buf), "<i>(%s\"%s\")</i>",
                 prob->score_bonus[0]?"Default - ":"",
                 ARMOR(tmp_prob->score_bonus));
        extra_msg = msg_buf;
      }
    }
  }
  if (extra_msg)
    print_string_editing_row_3(f, "Additional score bonus:", prob->score_bonus,
                               SSERV_CMD_PROB_CHANGE_SCORE_BONUS,
                               SSERV_CMD_PROB_CLEAR_SCORE_BONUS,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

  //PROBLEM_PARAM(open_tests, "s"),
  extra_msg = 0;
  if (show_adv && !prob->abstract) {
    if (prob->abstract && (show_adv || prob->open_tests[0])) extra_msg = "";
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_open_tests,
                             tmp_prob, sup_prob, sstate->global);
      if (show_adv || tmp_prob->open_tests[0]) {
        snprintf(msg_buf, sizeof(msg_buf), "<i>(%s\"%s\")</i>",
                 prob->open_tests[0]?"Default - ":"",
                 ARMOR(tmp_prob->open_tests));
        extra_msg = msg_buf;
      }
    }
  }
  if (extra_msg)
    print_string_editing_row_3(f, "Tests open for participants:",
                               prob->open_tests,
                               SSERV_CMD_PROB_CHANGE_OPEN_TESTS,
                               SSERV_CMD_PROB_CLEAR_OPEN_TESTS,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

  //PROBLEM_PARAM(final_open_tests, "s"),
  extra_msg = 0;
  if (show_adv && !prob->abstract) {
    if (prob->abstract && (show_adv || prob->final_open_tests[0])) extra_msg = "";
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_final_open_tests,
                             tmp_prob, sup_prob, sstate->global);
      if (show_adv || tmp_prob->final_open_tests[0]) {
        snprintf(msg_buf, sizeof(msg_buf), "<i>(%s\"%s\")</i>",
                 prob->final_open_tests[0]?"Default - ":"",
                 ARMOR(tmp_prob->final_open_tests));
        extra_msg = msg_buf;
      }
    }
  }
  if (extra_msg)
    print_string_editing_row_3(f, "Tests open for participants finally:",
                               prob->final_open_tests,
                               SSERV_CMD_PROB_CHANGE_FINAL_OPEN_TESTS,
                               SSERV_CMD_PROB_CLEAR_FINAL_OPEN_TESTS,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

  if (sstate->global && sstate->global->score_system == SCORE_OLYMPIAD) {
    //PROBLEM_PARAM(tests_to_accept, "d"),
    extra_msg = "";
    if (prob->tests_to_accept == -1) {
      if (prob->abstract) {
        extra_msg = "<i>(Undefined)</i>";
      } else {
        prepare_set_prob_value(CNTSPROB_tests_to_accept,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %d)</i>",
                 tmp_prob->tests_to_accept);
        extra_msg = msg_buf;
      }
    }
    if (!problem_type_flag) {
      print_int_editing_row(f, "Number of accept tests:",
                            prob->tests_to_accept, extra_msg,
                            SSERV_CMD_PROB_CHANGE_TESTS_TO_ACCEPT,
                            session_id, form_row_attrs[row ^= 1],
                            self_url, extra_args, prob_hidden_vars);
    }

    if (show_adv) {
      //PROBLEM_PARAM(accept_partial, "d"),
      extra_msg = "Undefined";
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_accept_partial,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->accept_partial?"Yes":"No");
        extra_msg = msg_buf;
      }
      if (!problem_type_flag) {
        print_boolean_3_select_row(f, "Accept for testing solutions that do not pass all accept tests:",
                                   prob->accept_partial,
                                   SSERV_CMD_PROB_CHANGE_ACCEPT_PARTIAL,
                                   extra_msg,
                                   session_id, form_row_attrs[row ^= 1],
                                   self_url, extra_args, prob_hidden_vars);
      }

      //PROBLEM_PARAM(min_tests_to_accept, "d"),
      extra_msg = "";
      if (prob->min_tests_to_accept < 0) {
        if (prob->abstract) {
          extra_msg = "<i>(Undefined)</i>";
        } else {
          prepare_set_prob_value(CNTSPROB_min_tests_to_accept,
                                 tmp_prob, sup_prob, sstate->global);
          if (tmp_prob->min_tests_to_accept < 0)
            tmp_prob->min_tests_to_accept = tmp_prob->tests_to_accept;
          snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %d)</i>",
                   tmp_prob->min_tests_to_accept);
          extra_msg = msg_buf;
        }
      }
      if (!problem_type_flag) {
        print_int_editing_row(f, "Min. Number of accept tests:",
                              prob->min_tests_to_accept, extra_msg,
                              SSERV_CMD_PROB_CHANGE_MIN_TESTS_TO_ACCEPT,
                              session_id, form_row_attrs[row ^= 1],
                              self_url, extra_args, prob_hidden_vars);
      }
    }
  }

  if (show_adv) {
    //PROBLEM_PARAM(max_user_run_count, "d"),
    extra_msg = "";
    if (prob->max_user_run_count < 0) {
      if (prob->abstract) {
        extra_msg = "<i>(Undefined)</i>";
      } else {
        prepare_set_prob_value(CNTSPROB_max_user_run_count,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %d)</i>",
                 tmp_prob->max_user_run_count);
        extra_msg = msg_buf;
      }
    }
    print_int_editing_row(f, "Max submissions for the problem:",
                          prob->max_user_run_count, extra_msg,
                          SSERV_CMD_PROB_CHANGE_MAX_USER_RUN_COUNT,
                          session_id, form_row_attrs[row ^= 1],
                          self_url, extra_args, prob_hidden_vars);
  }

  if (show_adv) {
    //PROBLEM_PARAM(hidden, "d"),
      extra_msg = "Undefined";
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_hidden,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->hidden?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f, "Do not show this problem in standings:",
                                 prob->hidden,
                                 SSERV_CMD_PROB_CHANGE_HIDDEN,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
  }

  if (!prob->abstract && show_adv && sstate->global
      && sstate->global->stand_show_ok_time) {
    //PROBLEM_PARAM(stand_hide_time, "d"),
    print_boolean_select_row(f, "Do not show accept time for this problem",
                             prob->stand_hide_time,
                             SSERV_CMD_PROB_CHANGE_STAND_HIDE_TIME,
                             session_id, form_row_attrs[row ^= 1],
                             self_url, extra_args, prob_hidden_vars);

  }

  if (show_adv && sstate->global && sstate->global->problem_navigation) {
    //PROBLEM_PARAM(advance_to_next, "d"),
      extra_msg = "Undefined";
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_advance_to_next,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->advance_to_next?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f,"Automatically advance to the next problem:",
                                 prob->advance_to_next,
                                 SSERV_CMD_PROB_CHANGE_ADVANCE_TO_NEXT,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
  }

  if (show_adv && sstate->global) {
    //PROBLEM_PARAM(disable_ctrl_chars, "d"),
      extra_msg = "Undefined";
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_disable_ctrl_chars,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->disable_ctrl_chars?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f,"Disable any control characters in the source code:",
                                 prob->disable_ctrl_chars,
                                 SSERV_CMD_PROB_CHANGE_DISABLE_CTRL_CHARS,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
  }

  if (show_adv) {
    //PROBLEM_PARAM(enable_text_form, "d"),
      extra_msg = "Undefined";
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_enable_text_form,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->enable_text_form?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f,"Enable text input form anyway:",
                                 prob->enable_text_form,
                                 SSERV_CMD_PROB_CHANGE_ENABLE_TEXT_FORM,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
  }

  if (show_adv) {
    //PROBLEM_PARAM(stand_attr, "s"),
    extra_msg = 0;
    if (prob->abstract && !prob->use_stdout) extra_msg = "";
    if (!prob->abstract && !tmp_prob->use_stdout) {
      extra_msg = "";
      prepare_set_prob_value(CNTSPROB_stand_attr,
                             tmp_prob, sup_prob, sstate->global);
      if (!prob->stand_attr[0]) {
        snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - \"%s\")</i>",
                 ARMOR(tmp_prob->stand_attr));
        extra_msg = msg_buf;
      }
    }
    if (!problem_type_flag && extra_msg) {
      print_string_editing_row_2(f, "Standings attributes:", prob->stand_attr,
                                 SSERV_CMD_PROB_CHANGE_STAND_ATTR,
                                 SSERV_CMD_PROB_CLEAR_STAND_ATTR,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
    }
  }

  //PROBLEM_PARAM(disable_pe, "d")
  if (show_adv) {
    extra_msg = 0;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_disable_pe,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->disable_pe?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Convert PEs to VAs",
                               prob->disable_pe,
                               SSERV_CMD_PROB_CHANGE_DISABLE_PE,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
  }

  //PROBLEM_PARAM(disable_wtl, "d")
  if (show_adv) {
    extra_msg = 0;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_disable_wtl,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->disable_wtl?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Convert WTLs to TLs",
                               prob->disable_wtl,
                               SSERV_CMD_PROB_CHANGE_DISABLE_WTL,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
  }

  //PROBLEM_PARAM(standard_checker, "s"),
  print_std_checker_row(f, prob, sstate, session_id, form_row_attrs[row ^= 1],
                        self_url, extra_args, prob_hidden_vars);

  //PROBLEM_PARAM(check_cmd, "s"),
  extra_msg = 0;
  if (prob->abstract) extra_msg = "";
  if (!prob->abstract && !prob->standard_checker[0]) {
    extra_msg = "";
    prepare_set_prob_value(CNTSPROB_check_cmd,
                           tmp_prob, sup_prob, sstate->global);
    snprintf(msg_buf, sizeof(msg_buf), "<i>(%s\"%s\")</i>",
             prob->check_cmd[0]?"Default - ":"", ARMOR(tmp_prob->check_cmd));
    extra_msg = msg_buf;
  }
  if (extra_msg)
    print_string_editing_row_3(f, "Checker name:", prob->check_cmd,
                               SSERV_CMD_PROB_CHANGE_CHECK_CMD,
                               SSERV_CMD_PROB_CLEAR_CHECK_CMD,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

  //PROBLEM_PARAM(checker_env, "x"),
  if (!prob->abstract) {
    if (!prob->checker_env || !prob->checker_env[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse(prob->checker_env);
    }
    print_string_editing_row_3(f, "Checker environment:", checker_env,
                               SSERV_CMD_PROB_CHANGE_CHECKER_ENV,
                               SSERV_CMD_PROB_CLEAR_CHECKER_ENV,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env);
  }

  //PROBLEM_PARAM(scoring_checker, "d")
  if (show_adv) {
    extra_msg = 0;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_scoring_checker,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->scoring_checker?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Checker calculates score",
                               prob->scoring_checker,
                               SSERV_CMD_PROB_CHANGE_SCORING_CHECKER,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
  }

  //PROBLEM_PARAM(start_env, "x"),
  if (!prob->abstract && show_adv) {
    if (!prob->start_env || !prob->start_env[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse(prob->start_env);
    }
    print_string_editing_row_3(f, "Start environment:", checker_env,
                               SSERV_CMD_PROB_CHANGE_START_ENV,
                               SSERV_CMD_PROB_CLEAR_START_ENV,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env);
  }

  //PROBLEM_PARAM(valuer_cmd, "s"),
  extra_msg = 0;
  if (show_adv) {
    if (prob->abstract) extra_msg = "";
    if (!prob->abstract) {
      extra_msg = "";
      prepare_set_prob_value(CNTSPROB_valuer_cmd,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "<i>(%s\"%s\")</i>",
               prob->valuer_cmd[0]?"Default - ":"",ARMOR(tmp_prob->valuer_cmd));
      extra_msg = msg_buf;
    }
  }
  if (extra_msg)
    print_string_editing_row_3(f, "Score valuer name:", prob->valuer_cmd,
                               SSERV_CMD_PROB_CHANGE_VALUER_CMD,
                               SSERV_CMD_PROB_CLEAR_VALUER_CMD,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

  if (show_adv) {
    //PROBLEM_PARAM(valuer_sets_marked, "d"),
      extra_msg = "Undefined";
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_valuer_sets_marked,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->valuer_sets_marked?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f,"Valuer sets _marked_ flag:",
                                 prob->valuer_sets_marked,
                                 SSERV_CMD_PROB_CHANGE_VALUER_SETS_MARKED,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
  }

  //PROBLEM_PARAM(interactive_valuer, "d")
  if (show_adv) {
    extra_msg = 0;
    if (!prob->abstract) {
      prepare_set_prob_value(CNTSPROB_interactive_valuer,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
               tmp_prob->interactive_valuer?"Yes":"No");
      extra_msg = msg_buf;
    }
    print_boolean_3_select_row(f, "Valuer works interactively",
                               prob->interactive_valuer,
                               SSERV_CMD_PROB_CHANGE_INTERACTIVE_VALUER,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
  }

  if (show_adv) {
    //PROBLEM_PARAM(ignore_unmarked, "d"),
      extra_msg = "Undefined";
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_ignore_unmarked,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->ignore_unmarked?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f,"Ignore unmarked runs in scoring:",
                                 prob->ignore_unmarked,
                                 SSERV_CMD_PROB_CHANGE_IGNORE_UNMARKED,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
  }

  //PROBLEM_PARAM(valuer_env, "x"),
  if (!prob->abstract && show_adv) {
    if (!prob->valuer_env || !prob->valuer_env[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse(prob->valuer_env);
    }
    print_string_editing_row_3(f, "Valuer environment:", checker_env,
                               SSERV_CMD_PROB_CHANGE_VALUER_ENV,
                               SSERV_CMD_PROB_CLEAR_VALUER_ENV,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env);
  }

  //PROBLEM_PARAM(interactor_cmd, "s"),
  extra_msg = 0;
  if (show_adv) {
    if (prob->abstract) extra_msg = "";
    if (!prob->abstract) {
      extra_msg = "";
      prepare_set_prob_value(CNTSPROB_interactor_cmd,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "<i>(%s\"%s\")</i>",
               prob->interactor_cmd[0]?"Default - ":"",
               ARMOR(tmp_prob->interactor_cmd));
      extra_msg = msg_buf;
    }
  }
  if (extra_msg)
    print_string_editing_row_3(f, "Interactor name:", prob->interactor_cmd,
                               SSERV_CMD_PROB_CHANGE_INTERACTOR_CMD,
                               SSERV_CMD_PROB_CLEAR_INTERACTOR_CMD,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

  //PROBLEM_PARAM(interactor_env, "x"),
  if (!prob->abstract) {
    if (!prob->interactor_env || !prob->interactor_env[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse(prob->interactor_env);
    }
    print_string_editing_row_3(f, "Interactor environment:", checker_env,
                               SSERV_CMD_PROB_CHANGE_INTERACTOR_ENV,
                               SSERV_CMD_PROB_CLEAR_INTERACTOR_ENV,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env);
  }

  //PROBLEM_PARAM(interactor_time_limit, "d"),
  if (show_adv) {
    extra_msg = "";
    if (prob->abstract) {
      if (prob->interactor_time_limit == -1) extra_msg = "<i>(Undefined)</i>";
      else if (!prob->interactor_time_limit) extra_msg = "<i>(Unlimited)</i>";
    } else {
      if (prob->interactor_time_limit == -1) {
        prepare_set_prob_value(CNTSPROB_interactor_time_limit,
                               tmp_prob, sup_prob, sstate->global);
        if (!tmp_prob->interactor_time_limit)
          snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - Unlimited)</i>");
        else
          snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - %d)</i>",
                   tmp_prob->interactor_time_limit);
        extra_msg = msg_buf;
      } else if (!prob->interactor_time_limit) extra_msg = "<i>(Unlimited)</i>";
    }
    print_int_editing_row(f, "Time limit for interactor (sec):",
                          prob->interactor_time_limit, extra_msg,
                          SSERV_CMD_PROB_CHANGE_INTERACTOR_TIME_LIMIT,
                          session_id, form_row_attrs[row ^= 1],
                          self_url, extra_args, prob_hidden_vars);
  }

  //PROBLEM_PARAM(style_checker_cmd, "s"),
  extra_msg = 0;
  if (show_adv) {
    if (prob->abstract) extra_msg = "";
    if (!prob->abstract) {
      extra_msg = "";
      prepare_set_prob_value(CNTSPROB_style_checker_cmd,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "<i>(%s\"%s\")</i>",
               prob->style_checker_cmd[0]?"Default - ":"",
               ARMOR(tmp_prob->style_checker_cmd));
      extra_msg = msg_buf;
    }
  }
  if (extra_msg)
    print_string_editing_row_3(f, "Style checker name:",prob->style_checker_cmd,
                               SSERV_CMD_PROB_CHANGE_STYLE_CHECKER_CMD,
                               SSERV_CMD_PROB_CLEAR_STYLE_CHECKER_CMD,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

  //PROBLEM_PARAM(style_checker_env, "x"),
  if (!prob->abstract) {
    if (!prob->style_checker_env || !prob->style_checker_env[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse(prob->style_checker_env);
    }
    print_string_editing_row_3(f, "Style checker environment:", checker_env,
                               SSERV_CMD_PROB_CHANGE_STYLE_CHECKER_ENV,
                               SSERV_CMD_PROB_CLEAR_STYLE_CHECKER_ENV,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env); checker_env = 0;
  }

  //PROBLEM_PARAM(lang_compiler_env, "x"),
  if (!prob->abstract) {
    if (!prob->lang_compiler_env || !prob->lang_compiler_env[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse(prob->lang_compiler_env);
    }
    print_string_editing_row_3(f, "Compiler environment:", checker_env,
                               SSERV_CMD_PROB_CHANGE_LANG_COMPILER_ENV,
                               SSERV_CMD_PROB_CLEAR_LANG_COMPILER_ENV,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env); checker_env = 0;
  }

  //PROBLEM_PARAM(test_checker_cmd, "s"),
  extra_msg = 0;
  if (show_adv) {
    if (prob->abstract) extra_msg = "";
    if (!prob->abstract) {
      extra_msg = "";
      prepare_set_prob_value(CNTSPROB_test_checker_cmd,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "<i>(%s\"%s\")</i>",
               prob->test_checker_cmd?"Default - ":"",
               ARMOR(tmp_prob->test_checker_cmd));
      extra_msg = msg_buf;
      xfree(tmp_prob->test_checker_cmd); tmp_prob->test_checker_cmd = 0;
    }
  }
  if (extra_msg)
    print_string_editing_row_3(f, "Test checker name:",
                               prob->test_checker_cmd,
                               SSERV_CMD_PROB_CHANGE_TEST_CHECKER_CMD,
                               SSERV_CMD_PROB_CLEAR_TEST_CHECKER_CMD,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

  //PROBLEM_PARAM(test_checker_env, "x"),
  if (!prob->abstract) {
    if (!prob->test_checker_env || !prob->test_checker_env[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse(prob->test_checker_env);
    }
    print_string_editing_row_3(f, "Test checker environment:", checker_env,
                               SSERV_CMD_PROB_CHANGE_TEST_CHECKER_ENV,
                               SSERV_CMD_PROB_CLEAR_TEST_CHECKER_ENV,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env); checker_env = 0;
  }

  //PROBLEM_PARAM(init_cmd, "s"),
  extra_msg = 0;
  if (show_adv) {
    if (prob->abstract) extra_msg = "";
    if (!prob->abstract) {
      extra_msg = "";
      prepare_set_prob_value(CNTSPROB_init_cmd,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "<i>(%s\"%s\")</i>",
               prob->init_cmd?"Default - ":"",
               ARMOR(tmp_prob->init_cmd));
      extra_msg = msg_buf;
      xfree(tmp_prob->init_cmd); tmp_prob->init_cmd = 0;
    }
  }
  if (extra_msg)
    print_string_editing_row_3(f, "Init-style interactor name:",
                               prob->init_cmd,
                               SSERV_CMD_PROB_CHANGE_INIT_CMD,
                               SSERV_CMD_PROB_CLEAR_INIT_CMD,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

  //PROBLEM_PARAM(init_env, "x"),
  if (!prob->abstract) {
    if (!prob->init_env || !prob->init_env[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse(prob->init_env);
    }
    print_string_editing_row_3(f, "Init-style interactor environment:", checker_env,
                               SSERV_CMD_PROB_CHANGE_INIT_ENV,
                               SSERV_CMD_PROB_CLEAR_INIT_ENV,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env); checker_env = 0;
  }

  //PROBLEM_PARAM(solution_src, "s"),
  extra_msg = 0;
  if (show_adv) {
    if (prob->abstract) extra_msg = "";
    if (!prob->abstract) {
      extra_msg = "";
      prepare_set_prob_value(CNTSPROB_solution_src,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "<i>(%s\"%s\")</i>",
               prob->solution_src?"Default - ":"",
               ARMOR(tmp_prob->solution_src));
      extra_msg = msg_buf;
      xfree(tmp_prob->solution_src); tmp_prob->solution_src = 0;
    }
  }
  if (extra_msg)
    print_string_editing_row_3(f, "Solution source name:",
                               prob->solution_src,
                               SSERV_CMD_PROB_CHANGE_SOLUTION_SRC,
                               SSERV_CMD_PROB_CLEAR_SOLUTION_SRC,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

  //PROBLEM_PARAM(solution_cmd, "s"),
  extra_msg = 0;
  if (show_adv) {
    if (prob->abstract) extra_msg = "";
    if (!prob->abstract) {
      extra_msg = "";
      prepare_set_prob_value(CNTSPROB_solution_cmd,
                             tmp_prob, sup_prob, sstate->global);
      snprintf(msg_buf, sizeof(msg_buf), "<i>(%s\"%s\")</i>",
               prob->solution_cmd?"Default - ":"",
               ARMOR(tmp_prob->solution_cmd));
      extra_msg = msg_buf;
      xfree(tmp_prob->solution_cmd); tmp_prob->solution_cmd = 0;
    }
  }
  if (extra_msg)
    print_string_editing_row_3(f, "Solution command:",
                               prob->solution_cmd,
                               SSERV_CMD_PROB_CHANGE_SOLUTION_CMD,
                               SSERV_CMD_PROB_CLEAR_SOLUTION_CMD,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

  // PROBLEM_PARAM(score_view, "x")
  if (!prob->abstract && show_adv) {
    if (!prob->score_view || !prob->score_view[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse_2(prob->score_view);
    }
    print_string_editing_row_3(f, "Special view for scores:", checker_env,
                               SSERV_CMD_PROB_CHANGE_SCORE_VIEW,
                               SSERV_CMD_PROB_CLEAR_SCORE_VIEW,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env);
  }

  if (show_adv && sstate->global) {
    //PROBLEM_PARAM(stand_ignore_score, "d"),
      extra_msg = "Undefined";
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_stand_ignore_score,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->stand_ignore_score?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f,"Ignore problem score in standings:",
                                 prob->stand_ignore_score,
                                 SSERV_CMD_PROB_CHANGE_STAND_IGNORE_SCORE,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
  }

  if (show_adv && sstate->global) {
    //PROBLEM_PARAM(stand_last_column, "d"),
      extra_msg = "Undefined";
      if (!prob->abstract) {
        prepare_set_prob_value(CNTSPROB_stand_last_column,
                               tmp_prob, sup_prob, sstate->global);
        snprintf(msg_buf, sizeof(msg_buf), "Default (%s)",
                 tmp_prob->stand_last_column?"Yes":"No");
        extra_msg = msg_buf;
      }
      print_boolean_3_select_row(f,"Show the problem after all results:",
                                 prob->stand_last_column,
                                 SSERV_CMD_PROB_CHANGE_STAND_LAST_COLUMN,
                                 extra_msg,
                                 session_id, form_row_attrs[row ^= 1],
                                 self_url, extra_args, prob_hidden_vars);
  }

  //PROBLEM_PARAM(lang_time_adj, "x"),
  if (!prob->abstract && !problem_type_flag && show_adv) {
    if (!prob->lang_time_adj || !prob->lang_time_adj[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse_2(prob->lang_time_adj);
    }
    print_string_editing_row_3(f, "Language-based time-limit adjustment:", checker_env,
                               SSERV_CMD_PROB_CHANGE_LANG_TIME_ADJ,
                               SSERV_CMD_PROB_CLEAR_LANG_TIME_ADJ,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env);
  }

  //PROBLEM_PARAM(lang_time_adj_millis, "x"),
  if (!prob->abstract && !problem_type_flag && show_adv) {
    if (!prob->lang_time_adj_millis || !prob->lang_time_adj_millis[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse_2(prob->lang_time_adj_millis);
    }
    print_string_editing_row_3(f, "Language-based time-limit adjustment (ms):",
                               checker_env,
                               SSERV_CMD_PROB_CHANGE_LANG_TIME_ADJ_MILLIS,
                               SSERV_CMD_PROB_CLEAR_LANG_TIME_ADJ_MILLIS,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env);
  }

  //PROBLEM_PARAM(lang_max_vm_size, "x"),
  if (!prob->abstract && !problem_type_flag && show_adv) {
    if (!prob->lang_max_vm_size || !prob->lang_max_vm_size[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse_2(prob->lang_max_vm_size);
    }
    print_string_editing_row_3(f, "Language-based memory limit:", checker_env,
                               SSERV_CMD_PROB_CHANGE_LANG_MAX_VM_SIZE,
                               SSERV_CMD_PROB_CLEAR_LANG_MAX_VM_SIZE,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env);
  }

  //PROBLEM_PARAM(lang_max_stack_size, "x"),
  if (!prob->abstract && !problem_type_flag && show_adv) {
    if (!prob->lang_max_stack_size || !prob->lang_max_stack_size[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse_2(prob->lang_max_stack_size);
    }
    print_string_editing_row_3(f, "Language-based stack limit:", checker_env,
                               SSERV_CMD_PROB_CHANGE_LANG_MAX_STACK_SIZE,
                               SSERV_CMD_PROB_CLEAR_LANG_MAX_STACK_SIZE,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env);
  }

  //PROBLEM_PARAM(disable_language, "x"),
  if (!prob->abstract && show_adv) {
    if (!prob->disable_language || !prob->disable_language[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse_2(prob->disable_language);
    }
    print_string_editing_row_3(f, "Disabled languages:", checker_env,
                               SSERV_CMD_PROB_CHANGE_DISABLE_LANGUAGE,
                               SSERV_CMD_PROB_CLEAR_DISABLE_LANGUAGE,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env);
  }

  //PROBLEM_PARAM(enable_language, "x"),
  if (!prob->abstract && show_adv) {
    if (!prob->enable_language || !prob->enable_language[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse_2(prob->enable_language);
    }
    print_string_editing_row_3(f, "Enabled languages:", checker_env,
                               SSERV_CMD_PROB_CHANGE_ENABLE_LANGUAGE,
                               SSERV_CMD_PROB_CLEAR_ENABLE_LANGUAGE,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env);
  }

  //PROBLEM_PARAM(require, "x"),
  if (!prob->abstract && show_adv) {
    if (!prob->require || !prob->require[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse_2(prob->require);
    }
    print_string_editing_row_3(f, "Required problems:", checker_env,
                               SSERV_CMD_PROB_CHANGE_REQUIRE,
                               SSERV_CMD_PROB_CLEAR_REQUIRE,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env);
  }

  //PROBLEM_PARAM(provide_ok, "x"),
  if (!prob->abstract && show_adv) {
    if (!prob->provide_ok || !prob->provide_ok[0]) {
      extra_msg = "(not set)";
      checker_env = xstrdup("");
    } else {
      extra_msg = "";
      checker_env = sarray_unparse_2(prob->provide_ok);
    }
    print_string_editing_row_3(f, "Provide OK to problems:", checker_env,
                               SSERV_CMD_PROB_CHANGE_PROVIDE_OK,
                               SSERV_CMD_PROB_CLEAR_PROVIDE_OK,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
    xfree(checker_env);
  }

  //PROBLEM_PARAM(variant_num, "d"),
  if (!prob->abstract && show_adv) {
    extra_msg = "";
    if (prob->variant_num <= 0) {
      prob->variant_num = 0;
      extra_msg = "<i>(No variants)</i>";
    }

    snprintf(num_buf, sizeof(num_buf), "%d", prob->variant_num);
    html_start_form(f, 1, self_url, prob_hidden_vars);
    fprintf(f, "<tr%s><td>%s</td><td>", form_row_attrs[row ^= 1],
            "Number of variants:");
    html_edit_text_form(f, 0, 0, "param", num_buf);
    fprintf(f, "%s</td><td>", extra_msg);
    html_submit_button(f, SSERV_CMD_PROB_CHANGE_VARIANT_NUM, "Change");
    if (prob->variant_num > 0) {
      fprintf(f, "%sEdit variants</a>",
              html_hyperref(hbuf, sizeof(hbuf), session_id, self_url, extra_args,
                            "action=%d", SSERV_CMD_PROB_EDIT_VARIANTS));
    }
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_PROB_CHANGE_VARIANT_NUM);
    fprintf(f, "</tr></form>\n");
  }

  //PROBLEM_PARAM(start_date, "t"),
  if (!prob->abstract && show_adv && !global->contest_time) {
    html_start_form(f, 1, self_url, prob_hidden_vars);
    fprintf(f, "<tr%s><td>Accept start date:</td><td>",
            form_row_attrs[row ^= 1]);
    html_date_select(f, prob->start_date);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_PROB_CHANGE_START_DATE, "Change");
    html_submit_button(f, SSERV_CMD_PROB_CLEAR_START_DATE, "Clear");
    fprintf(f, "</td></tr></form>\n");
  }
  //PROBLEM_PARAM(deadline, "t"),
  if (!prob->abstract && show_adv && !global->contest_time) {
    html_start_form(f, 1, self_url, prob_hidden_vars);
    fprintf(f, "<tr%s><td>Accept deadline:</td><td>",
            form_row_attrs[row ^= 1]);
    html_date_select(f, prob->deadline);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_PROB_CHANGE_DEADLINE, "Change");
    html_submit_button(f, SSERV_CMD_PROB_CLEAR_DEADLINE, "Clear");
    fprintf(f, "</td></tr></form>\n");
  }

  if (show_adv) {
    //PROBLEM_PARAM(source_header, "s"),
    extra_msg = "";
    prepare_set_prob_value(CNTSPROB_source_header,
                           tmp_prob, sup_prob, sstate->global);
    if (!prob->source_header[0]) {
      snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - \"%s\")</i>",
               ARMOR(tmp_prob->source_header));
      extra_msg = msg_buf;
    }
    print_string_editing_row_2(f, "Source header file:", prob->source_header,
                               SSERV_CMD_PROB_CHANGE_SOURCE_HEADER,
                               SSERV_CMD_PROB_CLEAR_SOURCE_HEADER,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);

    //PROBLEM_PARAM(source_footer, "s"),
    extra_msg = "";
    prepare_set_prob_value(CNTSPROB_source_footer,
                           tmp_prob, sup_prob, sstate->global);
    if (!prob->source_footer[0]) {
      snprintf(msg_buf, sizeof(msg_buf), "<i>(Default - \"%s\")</i>",
               ARMOR(tmp_prob->source_footer));
      extra_msg = msg_buf;
    }
    print_string_editing_row_2(f, "Source footer file:", prob->source_footer,
                               SSERV_CMD_PROB_CHANGE_SOURCE_FOOTER,
                               SSERV_CMD_PROB_CLEAR_SOURCE_FOOTER,
                               extra_msg,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, prob_hidden_vars);
  }

  if (prob->unhandled_vars) {
    fprintf(f, "<tr%s><td colspan=\"3\" align=\"center\"><b>Uneditable parameters</td></tr>\n<tr><td colspan=\"3\"><pre>%s</pre></td></tr>\n",
            form_row_attrs[row ^= 1], ARMOR(prob->unhandled_vars));
  }
-->
<%
  }
%><%
  tmp_prob = prepare_problem_free(tmp_prob);
%>
