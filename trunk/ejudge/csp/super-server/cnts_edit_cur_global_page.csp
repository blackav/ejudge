<%
/* $Id$ */
%><%@include "includes.csp"
%><%
%><%@set getter_name = "csp_get_cnts_edit_cur_global_page"
%><%@set ac_prefix = "SSERV_CMD_"
%><%@set err_prefix = "SSERV_ERR_"
%><%@page csp_view_cnts_edit_cur_global_page(PageInterface *pg, FILE *log_f, FILE *out_f, struct http_request_info *phr)
%><%@include "stdvars.csp"
%><%
    unsigned char subtitle_buf[1024];
    const unsigned char *title = 0;
    const unsigned char *subtitle = subtitle_buf;
    opcap_t caps = 0;
    int row = 1;
    int cur_page = 2;

static const unsigned char head_row_attr[] =
  " bgcolor=\"#a0a0a0\"";
static const unsigned char * const form_row_attrs[]=
{
  " bgcolor=\"#d0d0d0\"",
  " bgcolor=\"#e0e0e0\"",
};
  static const unsigned char * const contest_types[] =
  {
    "ACM",
    "Kirov",
    "Olympiad",
    "Moscow",
    "Virtual ACM",
    "Virtual Olympiad",
    0,
  };
  static const unsigned char * const standings_languages[] =
  {
    "English",
    "Russian",
    0,
  };

  static const unsigned char * const rounding_modes[] =
  {
    "Truncating up (ceil)",
    "Truncating down (floor)",
    "Rounding",
    0,
  };

    if (phr->priv_level != PRIV_LEVEL_ADMIN) FAIL(SSERV_ERR_PERMISSION_DENIED);
    if (ejudge_cfg_opcaps_find(phr->config, phr->login, &caps) < 0) FAIL(SSERV_ERR_PERMISSION_DENIED);
    if (opcaps_check(caps, OPCAP_EDIT_CONTEST) < 0) FAIL(SSERV_ERR_PERMISSION_DENIED);
    if (!phr->ss->edited_cnts) FAIL(SSERV_ERR_CONTEST_NOT_EDITED);

    snprintf(subtitle_buf, sizeof(subtitle_buf), "editing serve.cfg, global settings");
    cnts = phr->ss->edited_cnts;
    struct section_global_data *global = phr->ss->global;

    (void) row;
    (void) head_row_attr;
    (void) form_row_attrs;
    (void) contest_types;
    (void) standings_languages;
    (void) rounding_modes;
%><%@include "header.csp"
%>

<%@include "cnts_edit_cur_top_menu.csp"
%>

<%
  if (phr->ss->serve_parse_errors) {
%>
<h2><tt>serve.cfg</tt> cannot be edited</h2>
<font color="red"><pre><s:v value="phr->ss->serve_parse_errors" /></pre></font>
<%
    goto bottom_links;
  }
%>

<%
  if (!global) {
%>
<h2>No current global settings!</h2>
<%
    goto bottom_links;
  }
%>

<table border="0">

    <s:form>
        <s:htr attr="form_row_attrs[row ^= 1]">
            <td>Contest time (HH:MM):</td>
<%
  if (global->contest_time <= 0) {
%>
            <td><input type="text" name="param" value="0" size="8"/><i>(Unlimited)</i></td>
            <td><s:submit ac="glob-change-duration" label="Change" /></td>
<%
  } else {
    unsigned char time_buf[64];
    snprintf(time_buf, sizeof(time_buf), "%d:%02d", global->contest_time / 60, global->contest_time % 60);
%>
            <td><s:textfield name="param" value="time_buf" size="8" /></td>
            <td><s:submit ac="glob-change-duration" label="Change" /><s:submit ac="glob-unlimited-duration" label="Set unlimited" /></td>
<%
  }
%>
            <% super_html_print_help_url(out_f, SSERV_CMD_GLOB_CHANGE_DURATION); %>
        </s:htr>
    </s:form>

<!--
  if (!global->contest_time) {
    //GLOBAL_PARAM(contest_finish_time, "t"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Contest end time:</td><td>",
            form_row_attrs[row ^= 1]);
    html_date_select(f, global->contest_finish_time);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_CONTEST_FINISH_TIME, "Change");
    html_submit_button(f, SSERV_CMD_GLOB_CLEAR_CONTEST_FINISH_TIME, "Clear");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_CONTEST_FINISH_TIME);
    fprintf(f, "</tr></form>\n");
  }

  //GLOBAL_PARAM(score_system, "s"),
  //GLOBAL_PARAM(virtual, "d"),
  ASSERT(global->score_system >= SCORE_ACM && global->score_system < SCORE_TOTAL);
  if (global->is_virtual) {
    ASSERT(global->score_system == SCORE_ACM || global->score_system == SCORE_OLYMPIAD);
  }
  html_start_form(f, 1, self_url, hidden_vars);
  fprintf(f, "<tr%s><td>Scoring system:</td><td>", form_row_attrs[row ^= 1]);
  param = global->score_system;
  if (global->is_virtual) {
    if (global->score_system == SCORE_ACM) param = SCORE_TOTAL;
    else param = SCORE_TOTAL + 1;
  }
  html_select(f, param, "param", contest_types);
  fprintf(f, "</td><td>");
  html_submit_button(f, SSERV_CMD_GLOB_CHANGE_TYPE, "Change");
  fprintf(f, "</td>");
  print_help_url(f, SSERV_CMD_GLOB_CHANGE_TYPE);
  fprintf(f, "</tr></form>\n");

  //GLOBAL_PARAM(board_fog_time, "d"),
  //GLOBAL_PARAM(board_unfog_time, "d"),
  html_start_form(f, 1, self_url, hidden_vars);
  fprintf(f, "<tr%s><td>Standings freeze time (HH:MM) before finish:</td>"
          , form_row_attrs[row ^= 1]);
  if (!global->board_fog_time) {
    fprintf(f, "<td><input type=\"text\" name=\"param\" value=\"0\" size=\"8\"/><i>(No freeze)</i></td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_FOG_TIME, "Change");
  } else {
    fprintf(f, "<td><input type=\"text\" name=\"param\" value=\"%d:%02d\" size=\"8\"/></td><td>", global->board_fog_time / 60, global->board_fog_time % 60);
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_FOG_TIME, "Change");
    html_submit_button(f, SSERV_CMD_GLOB_DISABLE_FOG, "Disable");
  }
  fprintf(f, "</td>");
  print_help_url(f, SSERV_CMD_GLOB_CHANGE_FOG_TIME);
  fprintf(f, "</tr></form>\n");
  if (global->board_fog_time) {
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Standings unfreeze time (HH:MM) after finish:</td>",
            form_row_attrs[row ^= 1]);
    fprintf(f, "<td><input type=\"text\" name=\"param\" value=\"%d:%02d\" size=\"8\"/></td><td>", global->board_unfog_time / 60, global->board_unfog_time % 60);
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_UNFOG_TIME, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_UNFOG_TIME);
    fprintf(f, "</tr></form>\n");
  }

  //use standard compilation server?
  html_start_form(f, 1, self_url, hidden_vars);
  fprintf(f, "<tr%s><td>Use the default compilation server:</td><td>",
          form_row_attrs[row ^= 1]);
  html_boolean_select(f, !sstate->disable_compilation_server, "param", 0, 0);
  fprintf(f, "</td><td>");
  html_submit_button(f, SSERV_CMD_GLOB_CHANGE_USE_COMPILATION_SERVER, "Change");
  fprintf(f, "</td>");
  print_help_url(f, SSERV_CMD_GLOB_CHANGE_USE_COMPILATION_SERVER);
  fprintf(f, "</tr></form>\n");

  //enable support for windows languages
  html_start_form(f, 1, self_url, hidden_vars);
  fprintf(f, "<tr%s><td>Enable Win32 languages:</td><td>",
          form_row_attrs[row ^= 1]);
  html_boolean_select(f, sstate->enable_win32_languages, "param", 0, 0);
  fprintf(f, "</td><td>");
  html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ENABLE_WIN32_LANGUAGES, "Change");
  fprintf(f, "</td>");
  print_help_url(f, SSERV_CMD_GLOB_CHANGE_ENABLE_WIN32_LANGUAGES);
  fprintf(f, "</tr></form>\n");

  //GLOBAL_PARAM(separate_user_score, "d"),
  print_boolean_select_row(f, "Calculate and store user-visible score separately:",
                           global->separate_user_score,
                           SSERV_CMD_GLOB_CHANGE_SEPARATE_USER_SCORE,
                           session_id, form_row_attrs[row ^= 1],
                           self_url, extra_args, hidden_vars);

  //GLOBAL_PARAM(secure_run, "d"),
  print_boolean_select_row(f, "Run programs securely:",
                           global->secure_run,
                           SSERV_CMD_GLOB_CHANGE_SECURE_RUN,
                           session_id, form_row_attrs[row ^= 1],
                           self_url, extra_args, hidden_vars);

  //GLOBAL_PARAM(enable_memory_limit_error, "d"),
  print_boolean_select_row(f, "Enable support for MemoryLimit error:",
                           global->enable_memory_limit_error,
                           SSERV_CMD_GLOB_CHANGE_ENABLE_MEMORY_LIMIT_ERROR,
                           session_id, form_row_attrs[row ^= 1],
                           self_url, extra_args, hidden_vars);

  //GLOBAL_PARAM(detect_violations, "d"),
  print_boolean_select_row(f, "Detect security violations:",
                           global->detect_violations,
                           SSERV_CMD_GLOB_CHANGE_DETECT_VIOLATIONS,
                           session_id, form_row_attrs[row ^= 1],
                           self_url, extra_args, hidden_vars);

  //GLOBAL_PARAM(enable_max_stack_size, "d"),
  print_boolean_select_row(f, "Assume max_stack_size == max_vm_size:",
                           global->enable_max_stack_size,
                           SSERV_CMD_GLOB_CHANGE_ENABLE_MAX_STACK_SIZE,
                           session_id, form_row_attrs[row ^= 1],
                           self_url, extra_args, hidden_vars);

  //GLOBAL_PARAM(standings_locale, "s"),
  if (!strcmp(global->standings_locale, "ru_RU.KOI8-R")
      || !strcmp(global->standings_locale, "ru")) {
    param = 1;
  } else {
    param = 0;
  }
  html_start_form(f, 1, self_url, hidden_vars);
  fprintf(f, "<tr%s><td>Standings language:</td><td>",
          form_row_attrs[row ^= 1]);
  html_select(f, param, "param", standings_languages);
  fprintf(f, "</td><td>");
  html_submit_button(f, SSERV_CMD_GLOB_CHANGE_STAND_LOCALE, "Change");
  fprintf(f, "</td>");
  print_help_url(f, SSERV_CMD_GLOB_CHANGE_STAND_LOCALE);
  fprintf(f, "</tr></form>\n");

  print_string_editing_row(f, "Checker locale:", global->checker_locale,
                           SSERV_CMD_GLOB_CHANGE_CHECKER_LOCALE,
                           SSERV_CMD_GLOB_CLEAR_CHECKER_LOCALE,
                           0,
                           session_id, form_row_attrs[row ^= 1],
                           self_url, extra_args, hidden_vars);

  if (sizeof(long) == sizeof(long long)) {
    //GLOBAL_PARAM(enable_32bit_checkers, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Compile 32-bit checkers on 64-bit platforms:</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->enable_32bit_checkers, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ENABLE_32BIT_CHECKERS, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_ENABLE_32BIT_CHECKERS);
    fprintf(f, "</tr></form>\n");
  }



  html_start_form(f, 1, self_url, hidden_vars);
  fprintf(f, "<tr%s><td colspan=\"4\" align=\"center\"><b>Contestant's capabilities</b>", head_row_attr);
  row = 1;
  if (sstate->show_global_1) {
    html_submit_button(f, SSERV_CMD_GLOB_HIDE_1, "Hide");
  } else {
    html_submit_button(f, SSERV_CMD_GLOB_SHOW_1, "Show");
  }
  fprintf(f, "</td></tr></form>");

  if (sstate->show_global_1) {
    //GLOBAL_PARAM(team_enable_src_view, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Contestant may view submitted source code:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->team_enable_src_view, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_SRC_VIEW, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_SRC_VIEW);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(disable_failed_test_view, "d"),
    if (global->score_system == SCORE_ACM
        || global->score_system == SCORE_MOSCOW) {
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Participants cannot view failed test number:</td><td>", form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->disable_failed_test_view, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_DISABLE_FAILED_TEST_VIEW, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_DISABLE_FAILED_TEST_VIEW);
      fprintf(f, "</tr></form>\n");
    }

    //GLOBAL_PARAM(team_enable_rep_view, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Contestant may view testing protocol:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->team_enable_rep_view, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_REP_VIEW, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_REP_VIEW);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(team_enable_ce_view, "d"),
    if (!global->team_enable_rep_view) {
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Contestant may view compilation errors:</td><td>",
              form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->team_enable_ce_view, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_CE_VIEW, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_CE_VIEW);
      fprintf(f, "</tr></form>\n");
    }

    //GLOBAL_PARAM(team_show_judge_report, "d"),
    if (global->team_enable_rep_view) {
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Contestant may view FULL (judge's) testing protocol:</td><td>", form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->team_show_judge_report, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_JUDGE_REPORT, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_JUDGE_REPORT);
      fprintf(f, "</tr></form>\n");
    }

    //GLOBAL_PARAM(report_error_code, "d"),
    if (global->team_enable_rep_view && !global->team_show_judge_report) {
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Process exit code is shown in testing report:</td><td>", form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->report_error_code, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_REPORT_ERROR_CODE, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_REPORT_ERROR_CODE);
      fprintf(f, "</tr></form>\n");
    }
    
    //GLOBAL_PARAM(disable_clars, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Clarification requests are disabled completely:</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->disable_clars, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_DISABLE_CLARS, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_DISABLE_CLARS);
    fprintf(f, "</tr></form>\n");
    
    //GLOBAL_PARAM(disable_team_clars, "d"),
    if (!global->disable_clars) {
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Contestant cannot write clarification request:</td><td>", form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->disable_team_clars, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_DISABLE_TEAM_CLARS, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_DISABLE_TEAM_CLARS);
      fprintf(f, "</tr></form>\n");
    }

    //GLOBAL_PARAM(enable_eoln_select, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Participants may select desired EOLN type:</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->enable_eoln_select, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ENABLE_EOLN_SELECT, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_ENABLE_EOLN_SELECT);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(disable_submit_after_ok, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Disable submit of already solved problems:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->disable_submit_after_ok, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_DISABLE_SUBMIT_AFTER_OK, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_DISABLE_SUBMIT_AFTER_OK);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(ignore_compile_errors, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Compilation errors are not counted as failed runs:</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->ignore_compile_errors, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_IGNORE_COMPILE_ERRORS, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_IGNORE_COMPILE_ERRORS);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(ignore_duplicated_runs, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Identical submits of one contestant are ignored:</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->ignore_duplicated_runs, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_IGNORE_DUPICATED_RUNS, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_IGNORE_DUPICATED_RUNS);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(show_deadline, "d"),
    if (!global->contest_time) {
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Show submit deadline in problem selection menu:</td><td>", form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->show_deadline, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_SHOW_DEADLINE, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_SHOW_DEADLINE);
      fprintf(f, "</tr></form>\n");
    }
    
    //GLOBAL_PARAM(enable_printing, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Contestant may print his submit:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->enable_printing, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ENABLE_PRINTING, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_ENABLE_PRINTING);
    fprintf(f, "</tr></form>\n");

    if (global->enable_printing > 0) {
      //GLOBAL_PARAM(disable_banner_page, "d"),
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Disable separate banner page:</td><td>",
              form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->disable_banner_page, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_DISABLE_BANNER_PAGE, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_DISABLE_BANNER_PAGE);
      fprintf(f, "</tr></form>\n");
    }

    if (global->enable_printing > 0 && global->disable_banner_page > 0) {
      //GLOBAL_PARAM(printout_uses_login, "d"),
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Show login (not name) on printouts:</td><td>",
              form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->printout_uses_login, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_PRINTOUT_USES_LOGIN, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_PRINTOUT_USES_LOGIN);
      fprintf(f, "</tr></form>\n");
    }

    //GLOBAL_PARAM(prune_empty_users, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Do not show contestants, which did not make any submit, in standings:</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->prune_empty_users, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_PRUNE_EMPTY_USERS, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_PRUNE_EMPTY_USERS);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(enable_full_archive, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Store full contestant's program output in the archive:</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->enable_full_archive, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ENABLE_FULL_ARCHIVE, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_ENABLE_FULL_ARCHIVE);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(always_show_problems, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Contestant may view Problems link before start:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->always_show_problems, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ALWAYS_SHOW_PROBLEMS, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_ALWAYS_SHOW_PROBLEMS);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(disable_user_standings, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Disable build-in standings in new-client:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->disable_user_standings, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_DISABLE_USER_STANDINGS, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_DISABLE_USER_STANDINGS);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(disable_language, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Disable language column in new-client:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->disable_language, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_DISABLE_LANGUAGE, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_DISABLE_LANGUAGE);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(problem_navigation, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Advanced problem navigation:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->problem_navigation, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_PROBLEM_NAVIGATION, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_PROBLEM_NAVIGATION);
    fprintf(f, "</tr></form>\n");

    if (global->problem_navigation) {
      //GLOBAL_PARAM(vertical_navigation, "d"),
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Place problem navigation vertically:</td><td>",
              form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->vertical_navigation, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_VERTICAL_NAVIGATION,"Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_VERTICAL_NAVIGATION);
      fprintf(f, "</tr></form>\n");
    }

    if (global->is_virtual) {
      //GLOBAL_PARAM(disable_virtual_start, "d"),
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Disable user Virtual start button:</td><td>",
              form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->disable_virtual_start, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_DISABLE_VIRTUAL_START, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_DISABLE_VIRTUAL_START);
      fprintf(f, "</tr></form>\n");
    }

    //GLOBAL_PARAM(disable_virtual_auto_judge, "d"),
    if (global->score_system == SCORE_OLYMPIAD) {
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Disable auto-judging after virtual olympiad:</td><td>",
              form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->disable_virtual_auto_judge, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_DISABLE_VIRTUAL_AUTO_JUDGE, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_DISABLE_VIRTUAL_AUTO_JUDGE);
      fprintf(f, "</tr></form>\n");
    }

    //GLOBAL_PARAM(enable_auto_print_protocol, "d"),
    if (global->score_system == SCORE_OLYMPIAD) {
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Enable automatic protocol printing:</td><td>",
              form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->enable_auto_print_protocol, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ENABLE_AUTO_PRINT_PROTOCOL, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_ENABLE_AUTO_PRINT_PROTOCOL);
      fprintf(f, "</tr></form>\n");
    }

    //GLOBAL_PARAM(notify_clar_reply, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Enable e-mail clar notifications:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->notify_clar_reply, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_NOTIFY_CLAR_REPLY, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_NOTIFY_CLAR_REPLY);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(notify_status_change, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Enable e-mail status change notifications:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->notify_status_change, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_NOTIFY_STATUS_CHANGE, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_NOTIFY_STATUS_CHANGE);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(disable_auto_refresh, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Disable auto-refreshing:</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->disable_auto_refresh, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_DISABLE_AUTO_REFRESH, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_DISABLE_AUTO_REFRESH);
    fprintf(f, "</tr></form>\n");
  }

  html_start_form(f, 1, self_url, hidden_vars);
  fprintf(f, "<tr%s><td colspan=\"4\" align=\"center\"><b>Files and directories</b>", head_row_attr);
  row = 1;
  if (sstate->show_global_2) {
    html_submit_button(f, SSERV_CMD_GLOB_HIDE_2, "Hide");
  } else {
    html_submit_button(f, SSERV_CMD_GLOB_SHOW_2, "Show");
  }
  fprintf(f, "</td></tr></form>");

  if (sstate->show_global_2) {
    //GLOBAL_PARAM(advanced_layout, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Advanced problem files layout:</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->advanced_layout, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ADVANCED_LAYOUT, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_ADVANCED_LAYOUT);
    fprintf(f, "</tr></form>\n");
  }

  if (sstate->show_global_2) {
    //GLOBAL_PARAM(uuid_run_store, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Use UUID instead of run_id to store runs:</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->uuid_run_store, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_UUID_RUN_STORE, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_UUID_RUN_STORE);
    fprintf(f, "</tr></form>\n");
  }

  if (sstate->show_global_2) {
    //GLOBAL_PARAM(test_dir, "s"),
    print_string_editing_row(f, "Directory for tests (relative to contest configuration dir):", global->test_dir,
                             SSERV_CMD_GLOB_CHANGE_TEST_DIR,
                             SSERV_CMD_GLOB_CLEAR_TEST_DIR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(corr_dir, "s"),
    print_string_editing_row(f, "Directory for correct answers (relative to contest configuration dir):", global->corr_dir,
                             SSERV_CMD_GLOB_CHANGE_CORR_DIR,
                             SSERV_CMD_GLOB_CLEAR_CORR_DIR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(info_dir, "s"),
    print_string_editing_row(f, "Directory for test info files (relative to contest configuration dir):", global->info_dir,
                             SSERV_CMD_GLOB_CHANGE_INFO_DIR,
                             SSERV_CMD_GLOB_CLEAR_INFO_DIR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(tgz_dir, "s"),
    print_string_editing_row(f, "Directory for test tgz files (relative to contest configuration dir):", global->tgz_dir,
                             SSERV_CMD_GLOB_CHANGE_TGZ_DIR,
                             SSERV_CMD_GLOB_CLEAR_TGZ_DIR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(checker_dir, "s"),
    print_string_editing_row(f, "Directory for checkers (relative to contest configuration dir):", global->checker_dir,
                             SSERV_CMD_GLOB_CHANGE_CHECKER_DIR,
                             SSERV_CMD_GLOB_CLEAR_CHECKER_DIR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(statement_dir, "s"),
    print_string_editing_row(f, "Directory for problem statements (relative to contest configuration dir):", global->statement_dir,
                             SSERV_CMD_GLOB_CHANGE_STATEMENT_DIR,
                             SSERV_CMD_GLOB_CLEAR_STATEMENT_DIR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(plugin_dir, "s"),
    print_string_editing_row(f, "Directory for problem plugins (relative to contest configuration dir):", global->plugin_dir,
                             SSERV_CMD_GLOB_CHANGE_PLUGIN_DIR,
                             SSERV_CMD_GLOB_CLEAR_PLUGIN_DIR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(contest_start_cmd, "s"),
    print_string_editing_row(f, "Contest start script:", global->contest_start_cmd,
                             SSERV_CMD_GLOB_CHANGE_CONTEST_START_CMD,
                             SSERV_CMD_GLOB_CLEAR_CONTEST_START_CMD,
                             SSERV_CMD_GLOB_EDIT_CONTEST_START_CMD_PAGE,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(contest_stop_cmd, "s"),
    print_string_editing_row(f, "Contest stop script:", global->contest_stop_cmd,
                             SSERV_CMD_GLOB_CHANGE_CONTEST_STOP_CMD,
                             SSERV_CMD_GLOB_CLEAR_CONTEST_STOP_CMD,
                             SSERV_CMD_GLOB_EDIT_CONTEST_STOP_CMD_PAGE,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(description_file, "s"),
    print_string_editing_row(f, "Contest description file:",
                             global->description_file,
                             SSERV_CMD_GLOB_CHANGE_DESCRIPTION_FILE,
                             SSERV_CMD_GLOB_CLEAR_DESCRIPTION_FILE,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);
  }

  html_start_form(f, 1, self_url, hidden_vars);
  fprintf(f, "<tr%s><td colspan=\"4\" align=\"center\"><b>Contestant's quotas</b>", head_row_attr);
  row = 1;
  if (sstate->show_global_3) {
    html_submit_button(f, SSERV_CMD_GLOB_HIDE_3, "Hide");
  } else {
    html_submit_button(f, SSERV_CMD_GLOB_SHOW_3, "Show");
  }
  fprintf(f, "</td></tr></form>");

  if (sstate->show_global_3) {
    //GLOBAL_PARAM(max_run_size, "d"),
    print_string_editing_row(f, "Maximum size of one submitted program:",
                             num_to_size_str(hbuf, sizeof(hbuf), global->max_run_size),
                             SSERV_CMD_GLOB_CHANGE_MAX_RUN_SIZE,
                             0,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(max_run_total, "d"),
    print_string_editing_row(f, "Maximum total size of all submitted programs:",
                             num_to_size_str(hbuf, sizeof(hbuf), global->max_run_total),
                             SSERV_CMD_GLOB_CHANGE_MAX_RUN_TOTAL,
                             0,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(max_run_num, "d"),
    snprintf(hbuf, sizeof(hbuf), "%d", global->max_run_num);
    print_string_editing_row(f, "Maximum number of submits:",
                             hbuf,
                             SSERV_CMD_GLOB_CHANGE_MAX_RUN_NUM,
                             0,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    if (!global->disable_clars && !global->disable_team_clars) {
      //GLOBAL_PARAM(max_clar_size, "d"),
      print_string_editing_row(f, "Maximum size of one clarification request:",
                               num_to_size_str(hbuf, sizeof(hbuf), global->max_clar_size),
                               SSERV_CMD_GLOB_CHANGE_MAX_CLAR_SIZE,
                               0,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);

      //GLOBAL_PARAM(max_clar_total, "d"),
      print_string_editing_row(f, "Maximum total size of all clarification requests:",
                               num_to_size_str(hbuf, sizeof(hbuf), global->max_clar_total),
                               SSERV_CMD_GLOB_CHANGE_MAX_CLAR_TOTAL,
                               0,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);

      //GLOBAL_PARAM(max_clar_num, "d"),
      snprintf(hbuf, sizeof(hbuf), "%d", global->max_clar_num);
      print_string_editing_row(f, "Maximum number of clarification requests:",
                               hbuf,
                               SSERV_CMD_GLOB_CHANGE_MAX_CLAR_NUM,
                               0,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);
    }

    if (global->enable_printing) {
      //GLOBAL_PARAM(team_page_quota, "d"),
      snprintf(hbuf, sizeof(hbuf), "%d", global->team_page_quota);
      print_string_editing_row(f, "Maximum number of printed pages:",
                               hbuf,
                               SSERV_CMD_GLOB_CHANGE_TEAM_PAGE_QUOTA,
                               0,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);
    }
  }

  html_start_form(f, 1, self_url, hidden_vars);
  fprintf(f, "<tr%s><td colspan=\"4\" align=\"center\"><b>Standings files and URLs:</b>", head_row_attr);
  row = 1;
  if (sstate->show_global_4) {
    html_submit_button(f, SSERV_CMD_GLOB_HIDE_4, "Hide");
  } else {
    html_submit_button(f, SSERV_CMD_GLOB_SHOW_4, "Show");
  }
  fprintf(f, "</td></tr></form>");

  if (sstate->show_global_4) {
    //GLOBAL_PARAM(team_info_url, "s"),
    print_string_editing_row(f, "URL to view detailed contestant information:",
                             global->team_info_url,
                             SSERV_CMD_GLOB_CHANGE_TEAM_INFO_URL,
                             SSERV_CMD_GLOB_CLEAR_TEAM_INFO_URL,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(prob_info_url, "s"),
    print_string_editing_row(f, "URL to view problem statement:",
                             global->prob_info_url,
                             SSERV_CMD_GLOB_CHANGE_PROB_INFO_URL,
                             SSERV_CMD_GLOB_CLEAR_PROB_INFO_URL,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(standings_file_name, "s"),
    print_string_editing_row(f, "Name of the current standings file:",
                             global->standings_file_name,
                             SSERV_CMD_GLOB_CHANGE_STAND_FILE_NAME,
                             SSERV_CMD_GLOB_CLEAR_STAND_FILE_NAME,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(users_on_page, "d"),
    hbuf[0] = 0;
    if (global->users_on_page > 0)
      snprintf(hbuf, sizeof(hbuf), "%d", global->users_on_page);
    print_string_editing_row(f, "Number of users on standings page:",
                             hbuf,
                             SSERV_CMD_GLOB_CHANGE_USERS_ON_PAGE,
                             0,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(stand_header_file, "s"),
    print_string_editing_row(f, "HTML header file for the standings:",
                             global->stand_header_file,
                             SSERV_CMD_GLOB_CHANGE_STAND_HEADER_FILE,
                             SSERV_CMD_GLOB_CLEAR_STAND_HEADER_FILE,
                             SSERV_CMD_GLOB_EDIT_STAND_HEADER_FILE_PAGE,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(stand_footer_file, "s"),
    print_string_editing_row(f, "HTML footer file for the standings:",
                             global->stand_footer_file,
                             SSERV_CMD_GLOB_CHANGE_STAND_FOOTER_FILE,
                             SSERV_CMD_GLOB_CLEAR_STAND_FOOTER_FILE,
                             SSERV_CMD_GLOB_EDIT_STAND_FOOTER_FILE_PAGE,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(stand_symlink_dir, "s"),
    print_string_editing_row(f, "Directory to make standings symlink (rel. to DocumentRoot):",
                             global->stand_symlink_dir,
                             SSERV_CMD_GLOB_CHANGE_STAND_SYMLINK_DIR,
                             SSERV_CMD_GLOB_CLEAR_STAND_SYMLINK_DIR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(stand_ignore_after, "t"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Ignore submissions after:</td><td>",
            form_row_attrs[row ^= 1]);
    html_date_select(f, global->stand_ignore_after);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_STAND_IGNORE_AFTER, "Change");
    html_submit_button(f, SSERV_CMD_GLOB_CLEAR_STAND_IGNORE_AFTER, "Clear");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_STAND_IGNORE_AFTER);
    fprintf(f, "</tr></form>\n");

    // whether supplementary standings are enabled?
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Enable supplementary standings table:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, sstate->enable_stand2, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ENABLE_STAND2, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_ENABLE_STAND2);
    fprintf(f, "</tr></form>\n");

    if (sstate->enable_stand2) {
      //GLOBAL_PARAM(stand2_file_name, "s"),
      print_string_editing_row(f, "Name of the supplementary standings file:",
                               global->stand2_file_name,
                               SSERV_CMD_GLOB_CHANGE_STAND2_FILE_NAME,
                               SSERV_CMD_GLOB_CLEAR_STAND2_FILE_NAME,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);

    //GLOBAL_PARAM(stand2_header_file, "s"),
    print_string_editing_row(f, "HTML header file for the supplementary standings:",
                             global->stand2_header_file,
                             SSERV_CMD_GLOB_CHANGE_STAND2_HEADER_FILE,
                             SSERV_CMD_GLOB_CLEAR_STAND2_HEADER_FILE,
                             SSERV_CMD_GLOB_EDIT_STAND2_HEADER_FILE_PAGE,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(stand2_footer_file, "s"),
    print_string_editing_row(f, "HTML footer file for the supplementary standings:",
                             global->stand2_footer_file,
                             SSERV_CMD_GLOB_CHANGE_STAND2_FOOTER_FILE,
                             SSERV_CMD_GLOB_CLEAR_STAND2_FOOTER_FILE,
                             SSERV_CMD_GLOB_EDIT_STAND2_FOOTER_FILE_PAGE,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(stand2_symlink_dir, "s"),
    print_string_editing_row(f, "Directory to make suppl. standings symlink (rel. to DocumentRoot):",
                             global->stand2_symlink_dir,
                             SSERV_CMD_GLOB_CHANGE_STAND2_SYMLINK_DIR,
                             SSERV_CMD_GLOB_CLEAR_STAND2_SYMLINK_DIR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);
    }

    // whether public submission log is enabled?
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Enable public submission log:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, sstate->enable_plog, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ENABLE_PLOG, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_ENABLE_PLOG);
    fprintf(f, "</tr></form>\n");

    if (sstate->enable_plog) {
      //GLOBAL_PARAM(plog_file_name, "s"),
      print_string_editing_row(f, "Name of the public submission log file:",
                               global->plog_file_name,
                               SSERV_CMD_GLOB_CHANGE_PLOG_FILE_NAME,
                               SSERV_CMD_GLOB_CLEAR_PLOG_FILE_NAME,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);

      //GLOBAL_PARAM(plog_header_file, "s"),
      print_string_editing_row(f, "HTML header file for the public submission log:",
                               global->plog_header_file,
                               SSERV_CMD_GLOB_CHANGE_PLOG_HEADER_FILE,
                               SSERV_CMD_GLOB_CLEAR_PLOG_HEADER_FILE,
                               SSERV_CMD_GLOB_EDIT_PLOG_HEADER_FILE_PAGE,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);

      //GLOBAL_PARAM(plog_footer_file, "s"),
      print_string_editing_row(f, "HTML footer file for the public submission log:",
                               global->plog_footer_file,
                               SSERV_CMD_GLOB_CHANGE_PLOG_FOOTER_FILE,
                               SSERV_CMD_GLOB_CLEAR_PLOG_FOOTER_FILE,
                               SSERV_CMD_GLOB_EDIT_PLOG_FOOTER_FILE_PAGE,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);

      //GLOBAL_PARAM(plog_symlink_dir, "s"),
      print_string_editing_row(f, "Directory to make symlink to public submission log (rel. to DocumentRoot):",
                               global->plog_symlink_dir,
                               SSERV_CMD_GLOB_CHANGE_PLOG_SYMLINK_DIR,
                               SSERV_CMD_GLOB_CLEAR_PLOG_SYMLINK_DIR,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);

      //GLOBAL_PARAM(plog_update_time, "d"),
      snprintf(hbuf, sizeof(hbuf), "%d", global->plog_update_time);
      print_string_editing_row(f, "Public submission log update interval (sec):",
                               hbuf,
                               SSERV_CMD_GLOB_CHANGE_PLOG_UPDATE_TIME,
                               0,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);
    }

    //GLOBAL_PARAM(external_xml_update_time, "d"),
    snprintf(hbuf, sizeof(hbuf), "%d", global->external_xml_update_time);
    print_string_editing_row(f, "External XML log update interval (sec):",
                             hbuf,
                             SSERV_CMD_GLOB_CHANGE_EXTERNAL_XML_UPDATE_TIME,
                             0,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(internal_xml_update_time, "d"),
    snprintf(hbuf, sizeof(hbuf), "%d", global->internal_xml_update_time);
    print_string_editing_row(f, "Internal XML log update interval (sec):",
                             hbuf,
                             SSERV_CMD_GLOB_CHANGE_INTERNAL_XML_UPDATE_TIME,
                             0,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);
  }

  html_start_form(f, 1, self_url, hidden_vars);
  fprintf(f, "<tr%s><td colspan=\"4\" align=\"center\"><b>Standings table attributes</b>", head_row_attr);
  row = 1;
  if (sstate->show_global_5) {
    html_submit_button(f, SSERV_CMD_GLOB_HIDE_5, "Hide");
  } else {
    html_submit_button(f, SSERV_CMD_GLOB_SHOW_5, "Show");
  }
  fprintf(f, "</td></tr></form>");

  if (sstate->show_global_5) {
    //GLOBAL_PARAM(stand_fancy_style, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Use fancy decorations:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->stand_fancy_style, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_STAND_FANCY_STYLE, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_STAND_FANCY_STYLE);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(stand_success_attr, "s"),
    print_string_editing_row(f, "HTML attributes for \"Last success\" note:",
                             global->stand_success_attr,
                             SSERV_CMD_GLOB_CHANGE_STAND_SUCCESS_ATTR,
                             SSERV_CMD_GLOB_CLEAR_STAND_SUCCESS_ATTR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(stand_table_attr, "s"),
    print_string_editing_row(f, "HTML attributes for standings table:",
                             global->stand_table_attr,
                             SSERV_CMD_GLOB_CHANGE_STAND_TABLE_ATTR,
                             SSERV_CMD_GLOB_CLEAR_STAND_TABLE_ATTR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(stand_row_attr, "x"),
    if (!global->stand_row_attr || !global->stand_row_attr[0]) {
      xstr = xstrdup("");
    } else {
      xstr = sarray_unparse_2(global->stand_row_attr);
    }
    print_string_editing_row(f, "Standings row attributes:", xstr,
                             SSERV_CMD_GLOB_CHANGE_STAND_ROW_ATTR,
                             SSERV_CMD_GLOB_CLEAR_STAND_ROW_ATTR,
                             0,
                             session_id, form_row_attrs[row ^= 1],
                             self_url, extra_args, hidden_vars);
    xfree(xstr);

    //GLOBAL_PARAM(stand_place_attr, "s"),
    print_string_editing_row(f, "HTML attributes for the \"Place\" column:",
                             global->stand_place_attr,
                             SSERV_CMD_GLOB_CHANGE_STAND_PLACE_ATTR,
                             SSERV_CMD_GLOB_CLEAR_STAND_PLACE_ATTR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(stand_team_attr, "s"),
    print_string_editing_row(f, "HTML attributes for the \"Team name\" column:",
                             global->stand_team_attr,
                             SSERV_CMD_GLOB_CHANGE_STAND_TEAM_ATTR,
                             SSERV_CMD_GLOB_CLEAR_STAND_TEAM_ATTR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(stand_prob_attr, "s"),
    print_string_editing_row(f, "HTML attributes for the \"Problems\" columns:",
                             global->stand_prob_attr,
                             SSERV_CMD_GLOB_CHANGE_STAND_PROB_ATTR,
                             SSERV_CMD_GLOB_CLEAR_STAND_PROB_ATTR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(stand_solved_attr, "s"),
    print_string_editing_row(f, "HTML attributes for the \"Solved\" column:",
                             global->stand_solved_attr,
                             SSERV_CMD_GLOB_CHANGE_STAND_SOLVED_ATTR,
                             SSERV_CMD_GLOB_CLEAR_STAND_SOLVED_ATTR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    if (global->score_system == SCORE_KIROV
        || global->score_system == SCORE_OLYMPIAD) {
      //GLOBAL_PARAM(stand_score_attr, "s"),
      print_string_editing_row(f, "HTML attributes for the \"Score\" column:",
                               global->stand_score_attr,
                               SSERV_CMD_GLOB_CHANGE_STAND_SCORE_ATTR,
                               SSERV_CMD_GLOB_CLEAR_STAND_SCORE_ATTR,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);
    }

    if (global->score_system == SCORE_ACM
        || global->score_system == SCORE_MOSCOW) {
      //GLOBAL_PARAM(stand_penalty_attr, "s"),
      print_string_editing_row(f, "HTML attributes for the \"Penalty\" column:",
                               global->stand_penalty_attr,
                               SSERV_CMD_GLOB_CHANGE_STAND_PENALTY_ATTR,
                               SSERV_CMD_GLOB_CLEAR_STAND_PENALTY_ATTR,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);
    }

    //GLOBAL_PARAM(stand_use_login, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Use login instead of name:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->stand_use_login, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_STAND_USE_LOGIN, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_STAND_USE_LOGIN);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(stand_show_ok_time, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Show success time in standings:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->stand_show_ok_time, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_STAND_SHOW_OK_TIME, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_STAND_SHOW_OK_TIME);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(stand_show_att_num, "d"),
    if (global->score_system == SCORE_KIROV
        || global->score_system == SCORE_OLYMPIAD) {
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Show number of attempts in standings:</td><td>",
              form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->stand_show_att_num, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_STAND_SHOW_ATT_NUM,"Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_STAND_SHOW_ATT_NUM);
      fprintf(f, "</tr></form>\n");
    }

    //GLOBAL_PARAM(stand_sort_by_solved, "d"),
    if (global->score_system == SCORE_KIROV
        || global->score_system == SCORE_OLYMPIAD) {
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Sort participants by the solved problems first:</td><td>", form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->stand_sort_by_solved, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_STAND_SORT_BY_SOLVED, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_STAND_SORT_BY_SOLVED);
      fprintf(f, "</tr></form>\n");
    }

    //GLOBAL_PARAM(stand_collate_name, "d"),
    if (global->score_system == SCORE_KIROV
        || global->score_system == SCORE_OLYMPIAD) {
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Collate standings on user name:</td><td>",
              form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->stand_collate_name, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_STAND_COLLATE_NAME, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_STAND_COLLATE_NAME);
      fprintf(f, "</tr></form>\n");
    }

    //GLOBAL_PARAM(stand_enable_penalty, "d"),
    if (global->score_system == SCORE_KIROV
        || global->score_system == SCORE_OLYMPIAD) {
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Enable time penalties:</td><td>",
              form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->stand_enable_penalty, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_STAND_ENABLE_PENALTY, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_STAND_ENABLE_PENALTY);
      fprintf(f, "</tr></form>\n");
    }

    //GLOBAL_PARAM(ignore_success_time, "d"),
    if (global->score_system == SCORE_ACM
        || global->score_system == SCORE_MOSCOW) {
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Ignore success time in penalty calculation:</td><td>", form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->ignore_success_time, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_IGNORE_SUCCESS_TIME, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_IGNORE_SUCCESS_TIME);
      fprintf(f, "</tr></form>\n");
    }

    if (global->stand_show_ok_time) {
      //GLOBAL_PARAM(stand_time_attr, "s"),
      print_string_editing_row(f, "HTML attributes for the success time:",
                               global->stand_time_attr,
                               SSERV_CMD_GLOB_CHANGE_STAND_TIME_ATTR,
                               SSERV_CMD_GLOB_CLEAR_STAND_TIME_ATTR,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);
    }

    //GLOBAL_PARAM(stand_fail_attr, "s"),
    print_string_editing_row(f, "HTML attributes for \"Check failed\" cells:",
                             global->stand_fail_attr,
                             SSERV_CMD_GLOB_CHANGE_STAND_FAIL_ATTR,
                             SSERV_CMD_GLOB_CLEAR_STAND_FAIL_ATTR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(stand_trans_attr, "s"),
    print_string_editing_row(f, "HTML attributes for transient cells:",
                             global->stand_trans_attr,
                             SSERV_CMD_GLOB_CHANGE_STAND_TRANS_ATTR,
                             SSERV_CMD_GLOB_CLEAR_STAND_TRANS_ATTR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(stand_disq_attr, "s"),
    print_string_editing_row(f, "HTML attributes for \"Disqualified\" cells:",
                             global->stand_disq_attr,
                             SSERV_CMD_GLOB_CHANGE_STAND_DISQ_ATTR,
                             SSERV_CMD_GLOB_CLEAR_STAND_DISQ_ATTR,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    if (global->is_virtual) {
      //GLOBAL_PARAM(stand_self_row_attr, "s"),
      print_string_editing_row(f, "HTML attributes for the participant's table row:",
                               global->stand_self_row_attr,
                               SSERV_CMD_GLOB_CHANGE_STAND_SELF_ROW_ATTR,
                               SSERV_CMD_GLOB_CLEAR_STAND_SELF_ROW_ATTR,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);

      //GLOBAL_PARAM(stand_v_row_attr, "s"),
      print_string_editing_row(f, "HTML attributes for the virtual participant's rows:",
                               global->stand_v_row_attr,
                               SSERV_CMD_GLOB_CHANGE_STAND_V_ROW_ATTR,
                               SSERV_CMD_GLOB_CLEAR_STAND_V_ROW_ATTR,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);

      //GLOBAL_PARAM(stand_r_row_attr, "s"),
      print_string_editing_row(f, "HTML attributes for the real participant's rows:",
                               global->stand_r_row_attr,
                               SSERV_CMD_GLOB_CHANGE_STAND_R_ROW_ATTR,
                               SSERV_CMD_GLOB_CLEAR_STAND_R_ROW_ATTR,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);

      //GLOBAL_PARAM(stand_u_row_attr, "s"),
      print_string_editing_row(f, "HTML attributes for the unknown participant's rows:",
                               global->stand_u_row_attr,
                               SSERV_CMD_GLOB_CHANGE_STAND_U_ROW_ATTR,
                               SSERV_CMD_GLOB_CLEAR_STAND_U_ROW_ATTR,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);
    }
    
    //enable "Extra" column
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Show \"Extra information\" column:</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, sstate->enable_extra_col, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ENABLE_EXTRA_COL, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_ENABLE_EXTRA_COL);
    fprintf(f, "</tr></form>\n");

    if (sstate->enable_extra_col) {
      //GLOBAL_PARAM(stand_extra_format, "s"),
      print_string_editing_row(f, "Format string for \"Extra information\" column:",
                               global->stand_extra_format,
                               SSERV_CMD_GLOB_CHANGE_STAND_EXTRA_FORMAT,
                               SSERV_CMD_GLOB_CLEAR_STAND_EXTRA_FORMAT,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);

      //GLOBAL_PARAM(stand_extra_legend, "s"),
      print_string_editing_row(f, "Column title for \"Extra information\" column:",
                               global->stand_extra_legend,
                               SSERV_CMD_GLOB_CHANGE_STAND_EXTRA_LEGEND,
                               SSERV_CMD_GLOB_CLEAR_STAND_EXTRA_LEGEND,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);

      //GLOBAL_PARAM(stand_extra_attr, "s"),
      print_string_editing_row(f, "HTML attributes for \"Extra information\" column:",
                               global->stand_extra_attr,
                               SSERV_CMD_GLOB_CHANGE_STAND_EXTRA_ATTR,
                               SSERV_CMD_GLOB_CLEAR_STAND_EXTRA_ATTR,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);
    }

    //GLOBAL_PARAM(stand_show_warn_number, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Show \"Warnings\" column:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->stand_show_warn_number, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_STAND_SHOW_WARN_NUMBER, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_STAND_SHOW_WARN_NUMBER);
    fprintf(f, "</tr></form>\n");

    if (global->stand_show_warn_number) {
      //GLOBAL_PARAM(stand_warn_number_attr, "s"),
      print_string_editing_row(f, "HTML attributes for the \"Warnings\" column:",
                               global->stand_warn_number_attr,
                               SSERV_CMD_GLOB_CHANGE_STAND_WARN_NUMBER_ATTR,
                               SSERV_CMD_GLOB_CLEAR_STAND_WARN_NUMBER_ATTR,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);
    }

    if (global->users_on_page > 0) {
      //GLOBAL_PARAM(stand_page_table_attr, "s"),
      print_string_editing_row(f, "HTML attributes for page table:",
                               global->stand_page_table_attr,
                               SSERV_CMD_GLOB_CHANGE_STAND_PAGE_TABLE_ATTR,
                               SSERV_CMD_GLOB_CLEAR_STAND_PAGE_TABLE_ATTR,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);

      //GLOBAL_PARAM(stand_page_cur_attr, "s"),
      print_string_editing_row(f, "HTML attributes for current page message:",
                               global->stand_page_cur_attr,
                               SSERV_CMD_GLOB_CHANGE_STAND_PAGE_CUR_ATTR,
                               SSERV_CMD_GLOB_CLEAR_STAND_PAGE_CUR_ATTR,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);

      //GLOBAL_PARAM(stand_page_row_attr, "x"),
      if (!global->stand_page_row_attr || !global->stand_page_row_attr[0]) {
        xstr = xstrdup("");
      } else {
        xstr = sarray_unparse_2(global->stand_page_row_attr);
      }
      print_string_editing_row(f, "Page table row attributes:", xstr,
                               SSERV_CMD_GLOB_CHANGE_STAND_PAGE_ROW_ATTR,
                               SSERV_CMD_GLOB_CLEAR_STAND_PAGE_ROW_ATTR,
                               0,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, hidden_vars);
      xfree(xstr);

      //GLOBAL_PARAM(stand_page_col_attr, "x"),
      if (!global->stand_page_col_attr || !global->stand_page_col_attr[0]) {
        xstr = xstrdup("");
      } else {
        xstr = sarray_unparse_2(global->stand_page_col_attr);
      }
      print_string_editing_row(f, "Page table column attributes:", xstr,
                               SSERV_CMD_GLOB_CHANGE_STAND_PAGE_COL_ATTR,
                               SSERV_CMD_GLOB_CLEAR_STAND_PAGE_COL_ATTR,
                               0,
                               session_id, form_row_attrs[row ^= 1],
                               self_url, extra_args, hidden_vars);
      xfree(xstr);
    }
  }

  html_start_form(f, 1, self_url, hidden_vars);
  fprintf(f, "<tr%s><td colspan=\"4\" align=\"center\"><b>Advanced settings</b>", head_row_attr);
  row = 1;
  if (sstate->show_global_6) {
    html_submit_button(f, SSERV_CMD_GLOB_HIDE_6, "Hide");
  } else {
    html_submit_button(f, SSERV_CMD_GLOB_SHOW_6, "Show");
  }
  fprintf(f, "</td></tr></form>");

  if (sstate->show_global_6) {
    //GLOBAL_PARAM(appeal_deadline, "t"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Appeal deadline:</td><td>",
            form_row_attrs[row ^= 1]);
    html_date_select(f, global->appeal_deadline);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_APPEAL_DEADLINE, "Change");
    html_submit_button(f, SSERV_CMD_GLOB_CLEAR_APPEAL_DEADLINE, "Clear");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_APPEAL_DEADLINE);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(sleep_time, "d"),
    snprintf(hbuf, sizeof(hbuf), "%d", global->sleep_time);
    print_string_editing_row(f, "`compile', `run' sleep time (ms):",
                             hbuf,
                             SSERV_CMD_GLOB_CHANGE_SLEEP_TIME,
                             0,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(serve_sleep_time, "d"),
    snprintf(hbuf, sizeof(hbuf), "%d", global->serve_sleep_time);
    print_string_editing_row(f, "`serve' sleep time (ms):",
                             hbuf,
                             SSERV_CMD_GLOB_CHANGE_SERVE_SLEEP_TIME,
                             0,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(autoupdate_standings, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Update standings automatically (except freeze time):</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->autoupdate_standings, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_AUTOUPDATE_STANDINGS, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_AUTOUPDATE_STANDINGS);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(use_ac_not_ok, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Use AC status instead of OK:</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->use_ac_not_ok, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_USE_AC_NOT_OK, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_USE_AC_NOT_OK);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(rounding_mode, "s"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Seconds to minutes rounding mode:</td><td>",
            form_row_attrs[row ^= 1]);
    html_select(f, global->rounding_mode, "param", rounding_modes);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ROUNDING_MODE, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_ROUNDING_MODE);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(max_file_length, "d"),
    print_string_editing_row(f, "Maximal file size to be included into testing protocol:",
                             num_to_size_str(hbuf, sizeof(hbuf), global->max_file_length),
                             SSERV_CMD_GLOB_CHANGE_MAX_FILE_LENGTH,
                             0,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(max_line_length, "d"),
    print_string_editing_row(f, "Maximal line length to be included into testing protocol:",
                             num_to_size_str(hbuf, sizeof(hbuf), global->max_line_length),
                             SSERV_CMD_GLOB_CHANGE_MAX_LINE_LENGTH,
                             0,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(inactivity_timeout, "d"),
    snprintf(hbuf, sizeof(hbuf), "%d", global->inactivity_timeout);
    print_string_editing_row(f, "Inactivity timeout for `serve' and `run' (sec)",
                             hbuf,
                             SSERV_CMD_GLOB_CHANGE_INACTIVITY_TIMEOUT,
                             0,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(ignore_bom, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Ignore BOM in text submits:</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->ignore_bom, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_IGNORE_BOM, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_IGNORE_BOM);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(disable_testing, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Disable any testing of submissions:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->disable_testing, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_DISABLE_TESTING, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_DISABLE_TESTING);
    fprintf(f, "</tr></form>\n");

    if (!global->disable_testing) {
      //GLOBAL_PARAM(disable_auto_testing, "d"),
      html_start_form(f, 1, self_url, hidden_vars);
      fprintf(f, "<tr%s><td>Disable automatic testing of submissions:</td><td>", form_row_attrs[row ^= 1]);
      html_boolean_select(f, global->disable_auto_testing, "param", 0, 0);
      fprintf(f, "</td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_DISABLE_AUTO_TESTING, "Change");
      fprintf(f, "</td>");
      print_help_url(f, SSERV_CMD_GLOB_CHANGE_DISABLE_AUTO_TESTING);
      fprintf(f, "</tr></form>\n");
    }

    //GLOBAL_PARAM(cr_serialization_key, "d"),
    snprintf(hbuf, sizeof(hbuf), "%d", global->cr_serialization_key);
    print_string_editing_row(f, "Serialization semaphore for `compile' and `run'",
                             hbuf,
                             SSERV_CMD_GLOB_CHANGE_CR_SERIALIZATION_KEY,
                             0,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(show_astr_time, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Show astronomic time instead of relative time:</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->show_astr_time, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_SHOW_ASTR_TIME, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_SHOW_ASTR_TIME);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(memoize_user_results, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Memoize user results:</td><td>", form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->memoize_user_results, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_MEMOIZE_USER_RESULTS, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_MEMOIZE_USER_RESULTS);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(enable_continue, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Enable contest continuation:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->enable_continue, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ENABLE_CONTINUE, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_ENABLE_CONTINUE);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(enable_report_upload, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Enable testing protocol upload:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->enable_report_upload, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ENABLE_REPORT_UPLOAD, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_ENABLE_REPORT_UPLOAD);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(enable_runlog_merge, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Enable run database importing and merging:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->enable_runlog_merge, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ENABLE_RUNLOG_MERGE, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_ENABLE_RUNLOG_MERGE);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(disable_user_database, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Disable user database loading:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->disable_user_database, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_DISABLE_USER_DATABASE, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_DISABLE_USER_DATABASE);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(enable_l10n, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Enable message translation:</td><td>",
            form_row_attrs[row ^= 1]);
    html_boolean_select(f, global->enable_l10n, "param", 0, 0);
    fprintf(f, "</td><td>");
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_ENABLE_L10N, "Change");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_ENABLE_L10N);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(charset, "s"),
    print_string_editing_row(f, "Character set:",
                             global->charset,
                             SSERV_CMD_GLOB_CHANGE_CHARSET,
                             SSERV_CMD_GLOB_CLEAR_CHARSET,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(standings_charset, "s"),
    print_string_editing_row(f, "Stadings character set:",
                             global->standings_charset,
                             SSERV_CMD_GLOB_CHANGE_STANDINGS_CHARSET,
                             SSERV_CMD_GLOB_CLEAR_STANDINGS_CHARSET,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);

    //GLOBAL_PARAM(stand2_charset, "s"),
    if (sstate->enable_stand2 && global->stand2_file_name[0]) {
      print_string_editing_row(f, "Aux. stadings character set:",
                               global->charset,
                               SSERV_CMD_GLOB_CHANGE_STAND2_CHARSET,
                               SSERV_CMD_GLOB_CLEAR_STAND2_CHARSET,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);
    }

    //GLOBAL_PARAM(plog_charset, "s"),
    if (sstate->enable_plog && global->plog_file_name[0]) {
      print_string_editing_row(f, "Submission log character set:",
                               global->charset,
                               SSERV_CMD_GLOB_CHANGE_PLOG_CHARSET,
                               SSERV_CMD_GLOB_CLEAR_PLOG_CHARSET,
                               0,
                               session_id,
                               form_row_attrs[row ^= 1],
                               self_url,
                               extra_args,
                               hidden_vars);
    }

    //GLOBAL_PARAM(team_download_time, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>Team archive download interval (HH:MM:SS):</td>",
            form_row_attrs[row ^= 1]);
    if (!global->team_download_time) {
      fprintf(f, "<td><input type=\"text\" name=\"param\" value=\"0\" size=\"8\"/><i>(Disabled)</i></td><td>");
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_TEAM_DOWNLOAD_TIME, "Change");
    } else {
      fprintf(f, "<td><input type=\"text\" name=\"param\" value=\"%d:%02d:%02d\" size=\"8\"/></td><td>",
              global->team_download_time / 3600,
              (global->team_download_time / 60) % 60,
              global->team_download_time % 60);
      html_submit_button(f, SSERV_CMD_GLOB_CHANGE_TEAM_DOWNLOAD_TIME, "Change");
      html_submit_button(f, SSERV_CMD_GLOB_DISABLE_TEAM_DOWNLOAD_TIME, "Disable");
    }
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_TEAM_DOWNLOAD_TIME);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(cpu_bogomips, "d"),
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td>CPU speed (BogoMIPS):</td>",
            form_row_attrs[row ^= 1]);
    if (global->cpu_bogomips <= 0) {
      fprintf(f, "<td><input type=\"text\" name=\"param\" value=\"0\" size=\"8\"/><i>(Unknown)</i></td><td>");
    } else {
      fprintf(f, "<td><input type=\"text\" name=\"param\" value=\"%d\" size=\"8\"/></td><td>", global->cpu_bogomips);
    }
    html_submit_button(f, SSERV_CMD_GLOB_CHANGE_CPU_BOGOMIPS, "Change");
    html_submit_button(f, SSERV_CMD_GLOB_DETECT_CPU_BOGOMIPS, "Detect");
    fprintf(f, "</td>");
    print_help_url(f, SSERV_CMD_GLOB_CHANGE_CPU_BOGOMIPS);
    fprintf(f, "</tr></form>\n");

    //GLOBAL_PARAM(load_user_group, "x"),
    if (!global->load_user_group || !global->load_user_group[0]) {
      xstr = xstrdup("");
    } else {
      xstr = sarray_unparse_2(global->load_user_group);
    }
    print_string_editing_row(f, "User groups to load:", xstr,
                             SSERV_CMD_GLOB_CHANGE_LOAD_USER_GROUP,
                             SSERV_CMD_GLOB_CLEAR_LOAD_USER_GROUP,
                             0,
                             session_id, form_row_attrs[row ^= 1],
                             self_url, extra_args, hidden_vars);
    xfree(xstr);

    //GLOBAL_PARAM(clardb_plugin, "s"),
    print_string_editing_row(f, "ClarDB storage engine:",
                             global->clardb_plugin,
                             SSERV_CMD_GLOB_CHANGE_CLARDB_PLUGIN,
                             SSERV_CMD_GLOB_CLEAR_CLARDB_PLUGIN,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);
    //GLOBAL_PARAM(rundb_plugin, "s"),
    print_string_editing_row(f, "RunDB storage engine:",
                             global->rundb_plugin,
                             SSERV_CMD_GLOB_CHANGE_RUNDB_PLUGIN,
                             SSERV_CMD_GLOB_CLEAR_RUNDB_PLUGIN,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);
    //GLOBAL_PARAM(xuser_plugin, "s"),
    print_string_editing_row(f, "XuserDB storage engine:",
                             global->xuser_plugin,
                             SSERV_CMD_GLOB_CHANGE_XUSER_PLUGIN,
                             SSERV_CMD_GLOB_CLEAR_XUSER_PLUGIN,
                             0,
                             session_id,
                             form_row_attrs[row ^= 1],
                             self_url,
                             extra_args,
                             hidden_vars);
  }

  if (global->unhandled_vars) {
    html_start_form(f, 1, self_url, hidden_vars);
    fprintf(f, "<tr%s><td colspan=\"4\" align=\"center\"><b>Uneditable parameters</b>", head_row_attr);
    row = 1;
    if (sstate->show_global_7) {
      html_submit_button(f, SSERV_CMD_GLOB_HIDE_7, "Hide");
    } else {
      html_submit_button(f, SSERV_CMD_GLOB_SHOW_7, "Show");
    }
    fprintf(f, "</td></tr></form>\n");
    if (sstate->show_global_7) {
      s = html_armor_string_dup(global->unhandled_vars);
      fprintf(f, "<tr%s><td colspan=\"3\"><pre>%s</pre></td></tr>\n", form_row_attrs[row ^= 1], s);
      xfree(s);
    }
  }
-->
</table>

<%
bottom_links: ;
%>

<s:form>
<table border="0"><tr>
    <td><s:a ac="main-page"><s:_>To the top</s:_></s:a></td>
    <td><s:submit ac="cnts-forget" label="Forget it" /></td>
    <td><s:submit ac="cnts-commit" label="COMMIT changes!" /></td>
    <td><s:a ac="view-new-serve-cfg"><s:_>View serve.cfg</s:_></s:a></td>
</tr></table>
</s:form>

<%@include "footer.csp"
%><%
  l10n_setlocale(0);
cleanup:
  html_armor_free(&ab);
%>
