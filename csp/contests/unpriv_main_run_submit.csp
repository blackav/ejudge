<%
    if (prob_id > cs->max_prob) prob_id = 0;
    if (prob_id > 0 && !(prob = cs->probs[prob_id])) prob_id = 0;
    if (prob_id > 0 && !serve_is_problem_started(cs, phr->user_id, prob, 0))
      prob_id = 0;
    if (prob_id > 0 && prob) {
      serve_is_problem_deadlined(cs, phr->user_id, phr->login, prob, &pinfo[prob_id].deadline, 0);
    }
/*
    if (prob_id > 0 && serve_is_problem_deadlined(cs, phr->user_id, phr->login,
                                                  prob,
                                                  &pinfo[prob_id].deadline, 0))
      prob_id = 0;
*/
    //if (prob_id > 0 && prob->disable_user_submit > 0) prob_id = 0;
    if (prob_id > 0 && prob->variant_num > 0
        && (variant = find_variant(cs, phr->user_id, prob_id, 0)) <= 0)
      prob_id = 0;

    int is_viewable = 0;
    if (prob_id > 0) {
      is_viewable = (pinfo[prob_id].status & PROB_STATUS_VIEWABLE) != 0;
    }

    int time_ok = 0;
    if (cs->upsolving_mode) {
      time_ok = 1;
    } else if (start_time > 0 && stop_time <= 0) {
      time_ok = 1;
    }
    if (time_ok && !prob_id) {
%><div class="h2-long"><h2><s:_>View the problem statement and send a submission</s:_></h2></div>
<s:form>
<table class="b0">
<tr><td class="b0"><s:_>Problem</s:_>:</td><td class="b0"><%
      html_problem_selection(cs, out_f, phr, pinfo, 0, 0, start_time);
%></td><td class="b0"><s:submit ac="view-problem-submit" label="Select problem" /></td></tr></table>
</s:form>
<%
    } /* 14 */ else if (time_ok && prob_id > 0) {
      // ----(0) active problem code begins here
      prob = cs->probs[prob_id];

      if (!cnts->exam_mode) {
%><h2><%
        if ((pinfo[prob_id].status & PROB_STATUS_SUBMITTABLE)) {
%><s:_>Submit a solution for</s:_><%
        } else {
%><s:_>Problem</s:_><%
        }
%> <s:v value="prob->short_name" escape="false" /><%
        if (prob->long_name && prob->long_name[0]) {
%>-<s:v value="prob->long_name" /><%
        }
        if (prob->hide_variant <= 0 && variant > 0) {
%> (<s:_>Variant</s:_> <s:v value="variant" />)<%
        }
%></h2>

<table class="line-table-wb">
<%
        if (prob->type == PROB_TYPE_STANDARD) {
%>
<%
          if (global->score_system == SCORE_KIROV && is_viewable) {
%>
    <tr><td><b><s:_>Full score</s:_>:</b></td><td><tt><s:v value="prob->full_score" /></tt></td></tr>
<%
            if (prob->run_penalty > 0 && is_viewable) {
%>
    <tr><td><b><s:_>Run penalty</s:_>:</b></td><td><tt><s:v value="prob->run_penalty" /></tt></td></tr>
<%
            }
%>
<%
            if (prob->score_bonus && is_viewable) {
%>
    <tr><td><b><s:_>Score bonus</s:_>:</b></td><td><tt><s:v value="prob->score_bonus" /></tt></td></tr>
<%
            }
%>
<%
          }
%>
<%
          if (prob->combined_stdin > 0 && prob->input_file && prob->input_file[0] && prob->hide_file_names <= 0 && is_viewable) {
%>
    <tr><td><b><s:_>Input file name</s:_>:</b></td><td><tt><s:v value="prob->input_file" /></tt><s:_> or standard input</s:_></td></tr>
<%
          } else if (prob->use_stdin <= 0 && prob->input_file && prob->input_file[0] && prob->hide_file_names <= 0 && is_viewable) {
%>
    <tr><td><b><s:_>Input file name</s:_>:</b></td><td><tt><s:v value="prob->input_file" /></tt></td></tr>
<%
          }
%>
<%
          if (prob->combined_stdout > 0 && prob->output_file && prob->output_file[0] && prob->hide_file_names <= 0 && is_viewable) {
%>
    <tr><td><b><s:_>Output file name</s:_>:</b></td><td><tt><s:v value="prob->output_file" /></tt><s:_> or standard output</s:_></td></tr>
<%
          } else if (prob->use_stdout <= 0 && prob->output_file && prob->output_file[0] && prob->hide_file_names <= 0 && is_viewable) {
%>
    <tr><td><b><s:_>Output file name</s:_>:</b></td><td><tt><s:v value="prob->output_file" /></tt></td></tr>
<%
          }
%>
<%
          if (prob->time_limit_millis > 0 && is_viewable) {
%>
    <tr><td><b><s:_>Time limit</s:_>:</b></td><td><tt><s:v value="prob->time_limit_millis" /> <s:_>ms</s:_></tt></td></tr>
<%
          } else if (prob->time_limit > 0 && is_viewable) {
%>
    <tr><td><b><s:_>Time limit</s:_>:</b></td><td><tt><s:v value="prob->time_limit" /> <s:_>s</s:_></tt></td></tr>
<%
          }
%>
<%
          if (prob->real_time_limit > 0 && prob->hide_real_time_limit <= 0 && is_viewable) {
%>
    <tr><td><b><s:_>Real time limit</s:_>:</b></td><td><tt><s:v value="prob->real_time_limit" /> <s:_>s</s:_></tt></td></tr>
<%
          }
%>
<%
          if (prob->max_vm_size >= 0 && is_viewable) {
%>
    <tr><td><b><s:_>Memory limit</s:_>:</b></td><td><tt><s:v format="V" value="prob->max_vm_size" /></tt></td></tr>
<%
          }
%>
<%
          if (prob->max_rss_size >= 0 && is_viewable) {
%>
    <tr><td><b><s:_>Memory RSS limit</s:_>:</b></td><td><tt><s:v format="V" value="prob->max_rss_size" /></tt></td></tr>
<%
          }
%>
<%
          if (prob->max_stack_size >= 0 && prob->max_stack_size != prob->max_vm_size && is_viewable) {
%>
    <tr><td><b><s:_>Stack limit</s:_>:</b></td><td><tt><s:v format="V" value="prob->max_stack_size" /></tt></td></tr>
<%
          }
%>
<%
        }
%>

<%
        if (prob->start_date > 0) {
%>
    <tr><td><b><s:_>Open date</s:_>:</b></td><td><tt><s:v value="prob->start_date" /></tt></td></tr>
<%
        }
%>

<%
        if (pinfo[prob_id].deadline > 0) {
%>
    <tr><td><b><s:_>Deadline</s:_>:</b></td><td><tt><s:v value="pinfo[prob_id].deadline" /></tt></td></tr>
<%
        }
%>

<%
        if (pinfo[prob_id].deadline <= 0 || cs->current_time < pinfo[prob_id].deadline) {
          if (prob->date_penalty) {
            int dpi;
            time_t base_time = start_time;
            if (prob->start_date > 0 && prob->start_date > base_time) {
              base_time = prob->start_date;
            }
            for (dpi = 0; dpi < prob->dp_total; ++dpi) {
              if (cs->current_time < prob->dp_infos[dpi].date)
                break;
            }
            const struct penalty_info *dp = NULL;
            if (dpi < prob->dp_total) {
              if (dpi > 0) {
                base_time = prob->dp_infos[dpi - 1].date;
              }
              dp = &prob->dp_infos[dpi];
            }
            if (dp) {
              const unsigned char *formula = prob->date_penalty[dpi];
              int penalty = dp->penalty;
              time_t next_deadline = 0;
              if (dp->scale > 0) {
                time_t offset = cs->current_time - base_time;
                if (offset < 0) offset = 0;
                penalty += dp->decay * (offset / dp->scale);
                next_deadline = base_time + (offset / dp->scale + 1) * dp->scale;
                if (next_deadline >= dp->date) {
                  next_deadline = dp->date;
                }
                if (pinfo[prob_id].deadline > 0 && next_deadline >= pinfo[prob_id].deadline) {
                  next_deadline = 0;
                }
              }
              penalty = -penalty; // penalty is negative
%>
    <tr><td><b><s:_>Date penalty formula</s:_>:</b></td><td><tt><s:v value="formula" /></tt></td></tr>
<%
              if (penalty > 0) {
%>
    <tr><td><b><s:_>Current penalty</s:_>:</b></td><td><tt><s:v value="penalty" /></tt></td></tr>
<%
              }
              if (next_deadline > 0) {
%>
    <tr><td><b><s:_>Next soft deadline</s:_>:</b></td><td><tt><s:v value="next_deadline" /></tt></td></tr>
<%
              }
%>
<%
            }
          }
        }
%>

<%
      }
%><%
      if (prob->max_user_run_count > 0) {
        int remain_count = prob->max_user_run_count - pinfo[prob_id].eff_attempts;
        if (remain_count < 0) remain_count = 0;
%>
    <tr><td><b><s:_>Remaining attempts</s:_>:</b></td><td><tt><s:v value="remain_count" /></tt></td></tr>
<%
        if (remain_count <= 0) pinfo[prob_id].status &= ~PROB_STATUS_SUBMITTABLE;
      }
%>

</table>

<%
      px = 0;
      pmd = NULL;
      if (prob->variant_num > 0 && variant > 0 && prob->md_size > 0 && variant <= prob->md_size) {
        pmd = &prob->md_files[variant - 1];
      } else if (prob->variant_num <= 0 && variant <= 0 && prob->md_size == 1) {
        pmd = &prob->md_files[0];
      }
      if (variant > 0 && prob->xml.a && prob->xml.a[variant - 1]) {
        px = prob->xml.a[variant - 1];
      } else if (variant <= 0 && prob->xml.p) {
        px = prob->xml.p;
      }

      /* put problem statement */
      if (is_viewable) {
        if (pmd && pmd->data) {
          putc_unlocked('\n', out_f);
          fwrite_unlocked(pmd->data, 1, pmd->size, out_f);
          putc_unlocked('\n', out_f);
        } else if (px && px->stmts) {
          ns_unparse_statement(out_f, phr, cnts, extra, prob, 0, px, NULL,
                               pinfo[prob_id].status & PROB_STATUS_SUBMITTABLE);
        } else if (prob->statement_file && prob->statement_file[0] && is_viewable) {
          if (variant > 0) {
            prepare_insert_variant_num(variant_stmt_file,
                                       sizeof(variant_stmt_file),
                                       prob->statement_file, variant);
            pw = &cs->prob_extras[prob_id].v_stmts[variant];
            pw_path = variant_stmt_file;
          } else {
            pw = &cs->prob_extras[prob_id].stmt;
            pw_path = prob->statement_file;
          }
          watched_file_update(pw, pw_path, cs->current_time);
          if (!pw->text) {
%><big><font color="red"><p><s:_>The problem statement is not available</s:_></p></font></big>
<%
          } else {
            if ((pinfo[prob_id].status & PROB_STATUS_SUBMITTABLE)
                && prob->type == PROB_TYPE_CUSTOM) {
              html_start_form(out_f, 2, phr->self_url, phr->hidden_vars);
              skip_start_form = 1;
            }
            fprintf(out_f, "%s", pw->text);
          }
        } else {
        }
      }
%>
<%
  if (prob->enable_user_input > 0 && prob->type == PROB_TYPE_STANDARD) {
%>
<script>
  $(function() {
    $("#ej-submit-tabs").tabs();
  });
</script>
<%
  }
  unsigned char *av_langs = alloca(cs->max_lang + 1);
  memset(av_langs, 0, cs->max_lang + 1);
  lang_count = 0;
  int last_av_lang = 0;
  int last_eoln_type = 0;
%>
<%
%><p>&nbsp;</p><div id="ej-submit-tabs">
<%
  if (prob->enable_user_input > 0 && prob->type == PROB_TYPE_STANDARD) {
%>
    <ul>
      <li><a href="#ej-main-submit-tab"><s:_>Submit for judgement</s:_></a></li>
      <li><a href="#ej-user-submit-tab"><s:_>Run on server</s:_></a></li>
    </ul>
<%
  }
%>
<%

%><div id="ej-main-submit-tab">
<%
      // ----(3) submit form and runs list begins here
      if ((pinfo[prob_id].status & PROB_STATUS_SUBMITTABLE)) {
        // ----(1) submit form begins here
        if (prob->type == PROB_TYPE_SELECT_ONE) {
%><h3><s:_>Choose an answer</s:_></h3><%
        } else if (prob->enable_vcs > 0) {
%><h3><s:_>Set up github/gitlab integration and push solution</s:_></h3><%
        } else {
%><h3><s:_>Submit a solution</s:_></h3><%
        }

        if (!skip_start_form) {
%><s:form enctype="multipart/form-data"><%
        }
%><s:hidden name="prob_id" value="prob_id" />
<table class="b0">
<%        if (!prob->type) {
          if (!prob->custom_compile_cmd || !prob->custom_compile_cmd[0]) {
            for (i = 1; i <= cs->max_lang; i++) {
              const struct section_language_data *lang = cs->langs[i];
              if (!lang || lang->disabled > 0
                  || (prob->enable_container <= 0 && lang->insecure > 0 && global->secure_run)) continue;
              if (lang->enable_custom > 0) continue;
              if ((lang_list = prob->enable_language)) {
                for (j = 0; lang_list[j]; j++)
                  if (!strcmp(lang_list[j], lang->short_name))
                    break;
                if (!lang_list[j]) continue;
              } else if ((lang_list = prob->disable_language)) {
                for (j = 0; lang_list[j]; j++)
                  if (!strcmp(lang_list[j], lang->short_name))
                    break;
                if (lang_list[j]) continue;
              }
              lang_count++;
              lang_id = i;
              last_av_lang = i;
              av_langs[i] = 1;
            }
          } else {
            for (i = 1; i <= cs->max_lang; i++) {
              const struct section_language_data *lang = cs->langs[i];
              if (!lang) continue;
              if (lang->enable_custom <= 0) continue;
              lang_count++;
              lang_id = i;
              last_av_lang = i;
              av_langs[i] = 1;
            }
          }

          if (lang_count == 1) {
            lang_id = last_av_lang;
            if (prob && prob->enable_vcs <= 0) {
%><s:hidden name="lang_id" value="lang_id" /><%
%><tr><td class="b0"><s:_>Language</s:_>:</td><td class="b0"><s:v value="cs->langs[lang_id]->short_name" escape="false" /> - <% if (prob && prob->custom_compile_cmd && prob->custom_compile_cmd[0] && cs->langs[lang_id]->enable_custom > 0) { %><s:v value="prob->custom_lang_name" checkExpr="" /><% } else { %><s:v value="cs->langs[lang_id]->long_name" checkExpr="" /><% } %></td></tr><%
            }
%><%
          } else {
            last_lang_id = get_last_language(cs, phr->user_id, &last_eoln_type);
            if (prob && prob->enable_vcs <= 0) {
%><tr><td class="b0"><s:_>Language</s:_>:</td><td class="b0"><s:select name="lang_id"><option value=""></option><%
              for (i = 1; i <= cs->max_lang; i++) {
                if (!av_langs[i]) continue;
%><s:option value="i" selectedExpr="last_lang_id == i"><s:v value="cs->langs[i]->short_name" escape="false" /> - <s:v value="cs->langs[i]->long_name" checkExpr="" /></s:option><%
              }
%></s:select></td></tr>
<%
            }
          }
%><%
          if (cs->global->enable_eoln_select > 0 && (!prob || prob->enable_vcs <= 0)) {
%><tr><td class="b0"><s:_>Desired EOLN Type</s:_>:</td><td class="b0"><s:select name="eoln_type">
<option value="0"></option>
<s:option value="1" selectedExpr="last_eoln_type == 1">LF (Unix/MacOS)</s:option>
<s:option value="2" selectedExpr="last_eoln_type == 2">CRLF (Windows/DOS)</s:option>
</s:select></td></tr>
<%
          }
        }
%><%
        switch (prob->type) {
          /*
        case PROB_TYPE_STANDARD:
          fprintf(out_f, "<tr><td class=\"b0\">%s</td><td class=\"b0\"><input type=\"file\" name=\"file\"/></td></tr>", _("File"));
          break;
          */
        case PROB_TYPE_STANDARD:
        case PROB_TYPE_OUTPUT_ONLY:
        case PROB_TYPE_TESTS:
          if (prob->enable_vcs <= 0) {
            if (prob->enable_text_form > 0) {
%><tr><td colspan="2" class="b0"><textarea name="text_form" rows="20" cols="60"></textarea></td></tr>
<%
            }
%><tr><td class="b0"><s:_>File</s:_></td><td class="b0"><input type="file" name="file"/></td></tr>
<%
          }
          break;
        case PROB_TYPE_SHORT_ANSWER:
          last_source = 0;
          if (cnts->exam_mode) {
            last_source = get_last_source(cs, phr->user_id, prob->id);
          }
          if (last_source) {
%><tr><td class="b0"><s:_>Answer</s:_></td><td class="b0"><s:textfield name="file" value="last_source" /></td></tr>
<%
          } else {
%><tr><td class="b0"><s:_>Answer</s:_></td><td class="b0"><input type="text" name="file" /></td></tr>
<%
          }
          xfree(last_source); last_source = 0;
          break;
        case PROB_TYPE_TEXT_ANSWER:
%><tr><td colspan="2" class="b0"><textarea name="file" rows="20" cols="60"></textarea></td></tr>
<%
          break;
        case PROB_TYPE_SELECT_ONE:
          last_answer = -1;
          if (cnts->exam_mode) {
            last_answer = get_last_answer_select_one(cs, phr->user_id,
                                                     prob->id);
          }

          if (px) {
            next_prob_id = prob->id;
            if (cnts->exam_mode) {
              if (prob->advance_to_next > 0) {
                next_prob_id++;
                for (; next_prob_id <= cs->max_prob; next_prob_id++) {
                  if (!(prob2 = cs->probs[next_prob_id])) continue;
                  if (!serve_is_problem_started(cs, phr->user_id, prob2, 0))
                    continue;
                  break;
                }
                if (next_prob_id > cs->max_prob) next_prob_id = prob->id;
              }
              ns_unparse_answers(out_f, phr, cnts, extra, prob, variant,
                                 px, 0 /* lang */, 1 /* is_radio */,
                                 last_answer, next_prob_id,
                                 1 /* js_flag */, "b0");
            } else {
              ns_unparse_answers(out_f, phr, cnts, extra, prob, variant,
                                 px, 0 /* lang */, 1 /* is_radio */,
                                 last_answer, next_prob_id,
                                 0 /* js_flag */, "b0");
            }
          } else if (prob->alternative) {
            for (i = 0; prob->alternative[i]; i++) {
              cc = "";
              if (i + 1 == last_answer) cc = " checked=\"1\"";
              fprintf(out_f, "<tr><td class=\"b0\">%d</td><td class=\"b0\"><input type=\"radio\" name=\"file\" value=\"%d\"%s/></td><td>%s</td></tr>", i + 1, i + 1, cc, prob->alternative[i]);
            }
          }
          break;
        case PROB_TYPE_SELECT_MANY:
          if (prob->alternative) {
            for (i = 0; prob->alternative[i]; i++) {
              fprintf(out_f, "<tr><td class=\"b0\">%d</td><td class=\"b0\"><input type=\"checkbox\" name=\"ans_%d\"/></td><td>%s</td></tr>", i + 1, i + 1, prob->alternative[i]);
            }
          }
          break;
        case PROB_TYPE_CUSTOM:
          break;
        }
        if (cnts->exam_mode) {
          if (prob->type != PROB_TYPE_SELECT_ONE) {
            cc = "";
            if (prob && (prob->type == PROB_TYPE_SELECT_MANY || prob->type == PROB_TYPE_SELECT_ONE)) cc = "<td class=\"b0\">&nbsp;</td>";
            fprintf(out_f, "<tr>%s<td class=\"b0\">&nbsp;</td><td class=\"b0\">%s</td></tr></table></form>", cc,
                    ns_submit_button(bb, sizeof(bb), 0,
                                     NEW_SRV_ACTION_SUBMIT_RUN,
                                     _("Submit solution!")));
          } else {
            fprintf(out_f, "</tr></table></form>");
          }
        } else {
          if (prob && prob->enable_vcs > 0) {
%></table></form><%
          } else {
%><tr><td class="b0"><s:_>Send!</s:_></td><td class="b0"><s:submit ac="submit-run" /></td></tr></table></form>
<%
          }
        }
        // ----(1) submit form ends here
      } /* (pinfo[prob_id].status & PROB_STATUS_SUBMITTABLE) */
%><%
      if (global->problem_navigation
          //&& !prob->disable_user_submit
          && prob->type != PROB_TYPE_SELECT_ONE
          && pinfo[prob->id].all_attempts) {
        // ----(2) table starts here
        if (pinfo[prob->id].all_attempts <= 15) {
%><h2><s:_>Previous submissions of this problem</s:_></h2>
<%
        } else {
%><h2><s:_>Previous submissions of this problem</s:_> (<s:_>last 15</s:_>)</h2>
<%
        }
        if (cs->contest_plugin && cs->contest_plugin->generate_html_user_runs){
          // FIXME: logged output is also ignored
          // FIXME: return code is ignored for now
          char *ur_text = 0;
          size_t ur_size = 0;
          FILE *ur_file = open_memstream(&ur_text, &ur_size);
          (*cs->contest_plugin->generate_html_user_runs)(cs->contest_plugin_data, ur_file, out_f, cnts, cs, phr, phr->user_id, prob_id, all_runs, "b1");
          close_memstream(ur_file); ur_file = 0;
          xfree(ur_text); ur_text = 0;
        } else if (global->score_system == SCORE_OLYMPIAD) {
          ns_write_olympiads_user_runs(phr, out_f, cnts, extra, all_runs,
                                       prob_id, "b1", pinfo, NEW_SRV_ACTION_VIEW_PROBLEM_SUBMIT);
        } else {
          new_write_user_runs(cs, out_f, phr, all_runs, prob->id, "b1", pinfo, NEW_SRV_ACTION_VIEW_PROBLEM_SUBMIT, start_time, stop_time);
        }
        // ----(2) table ends here
      }
%><%
      // ----(3) submit form and runs list ends here
%></div>
<% // ej-main-submit-tab

%>
<%
      if (prob->enable_user_input > 0 && prob->type == PROB_TYPE_STANDARD) {
%>
<div id="ej-user-submit-tab">
<h3><s:_>Run program on server</s:_></h3>
<s:form enctype="multipart/form-data" id="ej-run-input-form">
<s:hidden name="prob_id" value="prob_id" />
<s:hidden name="action" ac="submit-run-input" />
<table class="b0">
<%
          if (lang_count == 1) {
            lang_id = last_av_lang;
%><s:hidden name="lang_id" value="lang_id" />
<tr><td class="b0"><s:_>Language</s:_>:</td><td class="b0"><s:v value="cs->langs[lang_id]->short_name" escape="false" /> - <% if (prob && prob->custom_compile_cmd && prob->custom_compile_cmd[0] && cs->langs[lang_id]->enable_custom > 0) { %><s:v value="prob->custom_lang_name" checkExpr="" /><% } else { %><s:v value="cs->langs[lang_id]->long_name" checkExpr="" /><% } %></td></tr>
<%
          } else {
%><tr><td class="b0"><s:_>Language</s:_>:</td><td class="b0"><s:select name="lang_id"><option value=""></option><%
            for (i = 1; i <= cs->max_lang; i++) {
              if (!av_langs[i]) continue;
%><s:option value="i" selectedExpr="last_lang_id == i"><s:v value="cs->langs[i]->short_name" escape="false" /> - <s:v value="cs->langs[i]->long_name" checkExpr="" /></s:option><%
            }
%></s:select></td></tr>
<%
          }
%>
<%
          if (cs->global->enable_eoln_select > 0) {
%><tr><td class="b0"><s:_>Desired EOLN Type</s:_>:</td><td class="b0"><s:select name="eoln_type">
<option value="0"></option>
<s:option value="1" selectedExpr="last_eoln_type == 1">LF (Unix/MacOS)</s:option>
<s:option value="2" selectedExpr="last_eoln_type == 2">CRLF (Windows/DOS)</s:option>
</s:select></td></tr>
<%
          }
%>
<tr><td class="b0" colspan="2" align="center"><b><s:_>Source code</s:_></b></td></tr>
<%
          if (prob->enable_text_form > 0) {
%>
<tr><td class="b0" colspan="2" align="center">(<s:_>Attach a file or copy text below</s:_>)</td></tr>
<tr><td colspan="2" class="b0"><textarea name="text_form" rows="20" cols="60"></textarea></td></tr>
<%
          }
%><tr><td class="b0"><s:_>File</s:_></td><td class="b0"><input type="file" name="file"/></td></tr>

<tr><td class="b0" colspan="2" align="center"><b><s:_>Input data</s:_></b></td></tr>
<%
          if (prob->enable_text_form > 0) {
%>
<tr><td class="b0" colspan="2" align="center">(<s:_>Attach a file or copy text below</s:_>)</td></tr>
<tr><td colspan="2" class="b0"><textarea name="text_form_input" rows="20" cols="60"></textarea></td></tr>
<%
          }
%><tr><td class="b0"><s:_>File</s:_></td><td class="b0"><input type="file" name="file_input"/></td></tr>

<tr><td class="b0"><s:_>Send!</s:_></td><td class="b0"><s:submit ac="submit-run-input" /></td></tr>

</table>
</s:form>

<div id="ej-submit-status-div" style="display:none;" >
<p>Status: <span id="ej-submit-status"></span></p>
</div>

<div id="ej-submit-compiler-div" style="display:none;" >
<p>Compiler output:</p>
<pre id="ej-submit-compiler">
</pre>
</div>

<div id="ej-test-checker-div" style="display:none;" >
<p>Test checker output:</p>
<pre id="ej-test-checker">
</pre>
</div>

<div id="ej-submit-output-div" style="display:none;" >
<p>Program output:</p>
<pre id="ej-submit-output">
</pre>
</div>

<div id="ej-submit-error-div" style="display:none;" >
<p>Program error:</p>
<pre id="ej-submit-error">
</pre>
</div>

<div id="ej-submit-stats-div" style="display:none;" >
<p>Statistics:
<span id="ej-submit-exit"></span>
CPU time: <span id="ej-submit-time"></span>
Real time: <span id="ej-submit-real-time"></span>
Max Memory Used: <span id="ej-submit-max-rss"></span></p>
</div>

<div id="ej-submit-log-div" style="display:none;">
<p>Submission log:</p>
<pre id="ej-submit-log">
</pre>
</div>

<script>
  function process_result(data)
  {
    console.log(data);
    if (data.ok) {
      $("#ej-submit-status-div").show();
      $("#ej-submit-status").text(data.result.status_str);
      if (data.result.compiler_output) {
        $("#ej-submit-compiler-div").show();
        $("#ej-submit-compiler").text(data.result.compiler_output);
      }
      if (data.result.test_checker) {
        $("#ej-test-checker-div").show();
        $("#ej-test-checker").text(data.result.test_checker);
      }
      if (data.result.output) {
        $("#ej-submit-output-div").show();
        $("#ej-submit-output").text(data.result.output);
      }
      if (data.result.error) {
        $("#ej-submit-error-div").show();
        $("#ej-submit-error").text(data.result.error);
      }
      var enable_stat = false;
      if (data.result.time > 0) {
        $("#ej-submit-time").text(data.result.time);
        enable_stat = true;
      }
      if (data.result.real_time > 0) {
        $("#ej-submit-real-time").text(data.result.real_time);
        enable_stat = true;
      }
      var has_code = false;
      if (data.result.term_signal > 0) {
        $("#ej-submit-exit").text("Termination signal: " + data.result.term_signal);
        has_code = true;
        enable_stat = true;
      }
      if (data.result.exit_code >= 0) {
        $("#ej-submit-exit").text("Exit code: " + data.result.exit_code);
        has_code = true;
        enable_stat = true;
      }
      if (data.result.max_rss > 0) {
        $("#ej-submit-max-rss").text(data.result.max_rss);
        enable_stat = true;
      } else if (data.result.max_memory_used > 0) {
        $("#ej-submit-max-rss").text(data.result.max_memory_used);
        enable_stat = true;
      }
      if (enable_stat) {
        if (!has_code) {
          $("#ej-submit-exit").text("Exit code: 0");
        }
        $("#ej-submit-stats-div").show();
      }
      if (data.result.status > 90) {
        window.setTimeout(function() {
          wait_for_result(data.result.submit_id);
        }, 1000);
      }
    }
  }
  function wait_for_result(submit_id)
  {
    $.get(self_url + "?SID=" + SID + "&submit_id=" + submit_id + "&action=get-submit", process_result);
  }

  $(function() {
    $("#ej-run-input-form").submit(function(e) {
      e.preventDefault();
      var data = new FormData(this);
      var action = $("#ej-run-input-form").attr("action");

      $("#ej-submit-status-div").hide();
      $("#ej-submit-compiler-div").hide();
      $("#ej-test-checker-div").hide();
      $("#ej-submit-output-div").hide();
      $("#ej-submit-error-div").hide();
      $("#ej-submit-stats-div").hide();
      $("#ej-submit-log-div").show();

      $("#ej-submit-status").empty();
      $("#ej-submit-compiler").empty();
      $("#ej-submit-output").empty();
      $("#ej-submit-error").empty();
      $("#ej-submit-exit").empty();
      $("#ej-submit-time").empty();
      $("#ej-submit-real-time").empty();
      $("#ej-submit-max-rss").empty();
      $("#ej-submit-log").empty();

      $.ajax({
        method: "POST",
        url: self_url,
        contentType: false,
        cache: false,
        data: data,
        processData: false,
        success: function(data) {
          if (data.ok) {
            $("#ej-submit-log").append("submit id: " + data.result.submit_id);
            wait_for_result(data.result.submit_id);
          } else {
            $("#ej-submit-log").append("submit failed: " + data.error.message);
          }
        },
        error: function(xhr, options, err) {
          $("#ej-submit-log").append("submit failed");
        }
      });
    });
  });
</script>

<%
%>
</div>
<% // ej-user-submit-tab
      }
%></div>
<% // ej-submit-tabs
%>
<%
      if (prob->enable_vcs > 0) {
%>
<div id="ej-gitlab-create-dialog" title="Create integration">
<p><s:_>No integration is defined. Create a new one?</s:_></p>
</div>
<div id="ej-gitlab-edit-dialog" title="Integration properties">
  <form id="ej-gitlab-edit-form">
    <input id="ej-gitlab-serial-id" type="hidden" name="serial_id" />
    <div>
      <div>Git webhook:</div>
      <div><input size="80" id="ej-gitlab-webhook-url" type="text" name="webhook_url" readonly="readonly" /><span id="ej-gitlab-copy-webhook-url" class="ui-icon ui-icon-clipboard"></span></div>
    </div>
    <div>
      <div>Git webhook token:</div>
      <div><input size="80" id="ej-gitlab-gitlab-token" type="text" name="github_token" readonly="readonly" /><span id="ej-gitlab-copy-gitlab-token" class="ui-icon ui-icon-clipboard"></span></div>
    </div>
    <div>
      <div>Git type:</div>
      <div><select id="ej-gitlab-vcs-type" name="vcs_type"><option>gitlab</option><option>github</option><option>gitlab-token</option></select></div>
    </div>
    <div>
      <div>GIT SSH URL:</div>
      <div><input size="80" id="ej-gitlab-vcs-url" type="text" name="vcs_url" /></div>
    </div>
    <div>
      <div>Language:</div>
      <div>
        <select id="ej-gitlab-lang-name" name="lang_name">
          <option></option>
<%
      for (i = 1; i <= cs->max_lang; ++i) {
        if (av_langs && !av_langs[i]) continue;
%>
          <option value='<s:v value="cs->langs[i]->short_name" escape="false" />'><s:v value="cs->langs[i]->short_name" escape="false" /> - <s:v value="cs->langs[i]->long_name" checkExpr="" /></option>
<%
      }
%>
        </select>
      </div>
    </div>
    <div>
      <div>Repo subdirectory:</div>
      <div><input size="80" id="ej-gitlab-vcs-subdir" type="text" name="vcs_subdir" /></div>
    </div>
    <div>
      <div>Branch specification:</div>
      <div><input size="80" id="ej-gitlab-vcs-branch-spec" type="text" name="vcs_branch_spec" /></div>
    </div>
    <div>
      <div>SSH private key (deploy key) or access token:</div>
      <div><textarea id="ej-gitlab-ssh-private-key" name="ssh_private_key" rows="10" cols="80"></textarea></div>
    </div>
  </form>
</div>
<div id="ej-gitlab-delete-dialog" title="Delete integration">
<p><s:_>Delete this integration?</s:_></p>
</div>
<script>
  function activate_edit_dialog(data)
  {
    console.log(data);
    if (data.result) {
      var target_url = self_url;
      target_url = target_url.replace("/cgi-bin/master", "/ej/master");
      target_url = target_url.replace("/cgi-bin/new-master", "/ej/master");
      target_url = target_url.replace("/cgi-bin/judge", "/ej/judge");
      target_url = target_url.replace("/cgi-bin/new-judge", "/ej/judge");
      target_url = target_url.replace("/cgi-bin/client", "/ej/client");
      target_url = target_url.replace("/cgi-bin/new-client", "/ej/client");
      target_url = target_url.replace("/cgi-bin/team", "/ej/client");
      target_url = target_url.replace("/cgi-bin/new-team", "/ej/client");
      target_url = target_url.replace("/new-client", "/ej/client");
      $("#ej-gitlab-serial-id").val(data.result.serial_id);
      $("#ej-gitlab-webhook-url").val(target_url + "/vcs-webhook/S" + data.result.hook_id);
      $("#ej-gitlab-gitlab-token").val(data.result.gitlab_token);
      if (data.result.vcs_type) {
        $("#ej-gitlab-vcs-type").val(data.result.vcs_type);
      }
      if (data.result.lang_name) {
        $("#ej-gitlab-lang-name").val(data.result.lang_name);
      }
      if (data.result.vcs_url) {
        $("#ej-gitlab-vcs-url").val(data.result.vcs_url);
      }
      if (data.result.vcs_subdir) {
        $("#ej-gitlab-vcs-subdir").val(data.result.vcs_subdir);
      }
      if (data.result.vcs_branch_spec) {
        $("#ej-gitlab-vcs-branch-spec").val(data.result.vcs_branch_spec);
      }
      if (data.result.ssh_private_key) {
        $("#ej-gitlab-ssh-private-key").val(data.result.ssh_private_key);
      }
    }
    $("#ej-gitlab-edit-dialog").dialog("open");
  }
  function on_gitlab_button()
  {
    prob_id = '<s:v value="prob_id" />';
    $.get(self_url + "?SID=" + SID + "&prob_id=" + prob_id + "&action=get-userprob", function(data) {
      console.log(data);
      if (data.result) {
        activate_edit_dialog(data);
      } else {
        $("#ej-gitlab-create-dialog").dialog("open");
      }
    });
    return false;
  }
  $(function() {
    $("#ej-gitlab-create-dialog").dialog({
      autoOpen: false,
      modal: true,
      buttons: {
        Ok: function() {
          $(this).dialog("close");
          prob_id = '<s:v value="prob_id" />';
          $.ajax({
            method: "POST",
            url: self_url,
            data: {
              prob_id: prob_id,
              SID: SID,
              action: 'create-userprob'
            },
            success: function(data) {
              if (data.ok) {
                activate_edit_dialog(data);
              } else {
                alert(data.error.message + ": " + data.error.log_id);
              }
            },
            error: function(xhr, options, err) {
              alert(err);
            }
          });
        },
        Cancel: function() {
          $(this).dialog("close");
        }
      }
    });
    $("#ej-gitlab-edit-dialog").dialog({
      autoOpen: false,
      modal: true,
      width: 768,
      height: 600,
      buttons: {
        Ok: function() {
          $(this).dialog("close");
          serial_id = $("#ej-gitlab-serial-id").val();
          vcs_type = $("#ej-gitlab-vcs-type").val();
          lang_name = $("#ej-gitlab-lang-name").val();
          vcs_url = $("#ej-gitlab-vcs-url").val();
          vcs_subdir = $("#ej-gitlab-vcs-subdir").val();
          vcs_branch_spec = $("#ej-gitlab-vcs-branch-spec").val();
          ssh_private_key = $("#ej-gitlab-ssh-private-key").val();
          $.ajax({
            method: "POST",
            url: self_url,
            data: {
              serial_id: serial_id,
              lang_name: lang_name,
              vcs_url: vcs_url,
              vcs_subdir: vcs_subdir,
              vcs_branch_spec: vcs_branch_spec,
              ssh_private_key: ssh_private_key,
              vcs_type: vcs_type,
              SID: SID,
              action: 'save-userprob'
            },
            success: function(data) {
              if (!data.ok) {
                alert(data.error.message + ": " + data.error.log_id);
              }
            },
            error: function(xhr, options, err) {
              alert(err);
            }
          });
        },
        Cancel: function() {
          $(this).dialog("close");
        },
        "Delete": function() {
          $(this).dialog("close");
          $("#ej-gitlab-delete-dialog").dialog("open");
        }
      }
    });
    $("#ej-gitlab-delete-dialog").dialog({
      autoOpen: false,
      modal: true,
      buttons: {
        Ok: function() {
          $(this).dialog("close");
          serial_id = $("#ej-gitlab-serial-id").val();
          $.ajax({
            method: "POST",
            url: self_url,
            data: {
              serial_id: serial_id,
              SID: SID,
              action: 'remove-userprob'
            },
            success: function(data) {
            },
            error: function(xhr, options, err) {
            }
          });
        },
        Cancel: function() {
          $(this).dialog("close");
        }
      }
    });
    $("#ej-gitlab-copy-webhook-url").click(function() {
      $("#ej-gitlab-webhook-url").focus();
      $("#ej-gitlab-webhook-url").select();
      document.execCommand('copy');
    });
    $("#ej-gitlab-copy-gitlab-token").click(function() {
      $("#ej-gitlab-gitlab-token").focus();
      $("#ej-gitlab-gitlab-token").select();
      document.execCommand('copy');
    });
  });
</script>
<p><button id="ej-gitlab-button" onclick="return on_gitlab_button()"><s:_>Setup Version Control System Integration</s:_></button></p>
<%
      }
%>
<%
      // ----(0) active problem code ends here
    }
%>
